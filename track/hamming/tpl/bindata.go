// Code generated by go-bindata. DO NOT EDIT.
// sources:
// declare-when-needed.md (174B)
// error-message-format.md (293B)
// increase.md (84B)
// invert-if.md (372B)
// multiple-string-conversions.md (339B)
// no-error-msg.md (177B)
// return-zero-value.md (447B)
// rune-to-byte.md (438B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _declareWhenNeededMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x3b\x8e\x02\x31\x10\x84\xe1\x7c\x4f\x51\xc9\x6a\x93\x65\xee\xc1\x11\xc8\xa6\xed\xa9\x19\xb7\x30\x36\x74\xb7\x91\xe6\xf6\x88\x47\x40\x5a\xd2\x57\xfa\x0f\x38\xf5\x01\x31\x62\x61\xae\x62\xda\x36\xcc\xbf\x3e\x23\x71\xed\x46\xec\x7d\x20\x17\xe6\x33\x74\x45\x14\xa2\xb2\x6d\x51\xa0\x0e\xde\x86\xd4\x7f\x78\x7f\xed\x6f\x2e\xa1\xbd\xe1\x22\x3b\xd8\x16\x8c\x2b\x12\x9f\x8f\xa3\x35\x66\xba\x8b\xed\x13\x8e\xf1\xe7\x48\x8c\xa0\x21\xfa\x07\x12\x82\xbb\x98\x4a\xaa\x84\xe9\x56\xe2\xbb\x60\x38\xa1\x31\xfd\x3c\x02\x00\x00\xff\xff\xd5\xde\x98\x93\xae\x00\x00\x00")

func declareWhenNeededMdBytes() ([]byte, error) {
	return bindataRead(
		_declareWhenNeededMd,
		"declare-when-needed.md",
	)
}

func declareWhenNeededMd() (*asset, error) {
	bytes, err := declareWhenNeededMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "declare-when-needed.md", size: 174, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x10, 0xef, 0xa, 0x40, 0xc, 0xd6, 0xac, 0x38, 0x6b, 0xb5, 0xfa, 0x4b, 0x81, 0x3a, 0xbf, 0x8a, 0xb3, 0xab, 0x8c, 0x87, 0xfb, 0xac, 0x8b, 0xc6, 0x5a, 0x3e, 0x97, 0xa9, 0x6f, 0xb4, 0x28}}
	return a, nil
}

var _errorMessageFormatMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x90\xc1\x4a\x43\x41\x0c\x45\xf7\x7e\xc5\x05\x17\x55\xb0\x9d\xbd\xdb\x82\xe2\xd6\xad\xb8\x48\x67\xf2\x66\x42\xe7\x25\x25\x93\x67\xd1\xaf\x97\x8e\x2e\x03\x87\x93\xc3\xdd\xe3\x4d\xf1\x6a\x4f\x60\x77\x73\x8c\x70\xd1\x3a\x40\xce\xb0\x25\x58\x91\x1b\x89\x72\x41\x58\xe5\x68\xec\x08\xc3\x62\xbe\x82\x70\x16\x2d\xb0\x05\xbb\x93\x33\x95\xec\xdb\x7a\x42\x38\x49\xdf\xc1\x79\xe9\x9c\x43\xb4\x22\x1a\xff\x49\x6e\xe8\xb2\x69\x0e\x31\x45\xa6\xde\x07\xa2\x51\xa0\x4f\xfb\xe4\x66\xc4\x01\x2f\xe6\x88\x26\x03\xce\x34\x4c\x21\x81\x79\x64\x5b\x57\xd6\x72\xe3\x1b\x7f\xcf\xc8\x0f\xb5\x40\xa6\x8b\x04\x75\xf9\xe1\x02\x73\x5c\x6e\x4f\x36\x0a\x2e\x9f\x0f\x2d\xe2\x32\x9e\x53\xaa\x12\x6d\x3b\x1d\xb2\xad\xa9\x5a\x27\xad\xa9\x5a\xba\xca\x59\xd2\xd1\x0a\xbf\xf3\x97\xf0\xf5\x38\xf5\x31\xee\x67\xc6\xfe\x7f\x8b\xc7\xc3\xdd\x6f\x00\x00\x00\xff\xff\x66\xad\xa3\x9d\x25\x01\x00\x00")

func errorMessageFormatMdBytes() ([]byte, error) {
	return bindataRead(
		_errorMessageFormatMd,
		"error-message-format.md",
	)
}

func errorMessageFormatMd() (*asset, error) {
	bytes, err := errorMessageFormatMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error-message-format.md", size: 293, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0x7f, 0x45, 0x90, 0x5c, 0xb6, 0x8, 0xcf, 0x7b, 0x67, 0x26, 0x6d, 0x20, 0xfb, 0x24, 0x7e, 0xa5, 0x3, 0xaa, 0x5b, 0x59, 0xfd, 0xa7, 0x66, 0x46, 0xab, 0x7f, 0xa5, 0xf0, 0xda, 0x8b, 0x3b}}
	return a, nil
}

var _increaseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x11\xc2\x30\x08\x06\xe0\x77\xa7\xf8\xdf\x51\x07\x70\x01\xd7\x00\x73\xd8\x70\x4d\x21\x47\x68\xe7\xef\xf7\xc2\x37\xd0\x65\x41\xb0\xa6\x36\x93\x01\x26\x62\xc4\xd4\x94\x8a\xc4\x3f\x12\xe6\x2d\xf5\x50\x2f\xf3\x0d\x82\x4b\xd2\xe4\x37\xf4\x89\x61\xbb\xa2\xba\xad\x0f\xb8\xc5\xe9\x45\xc4\xef\xc7\x1d\x00\x00\xff\xff\xc4\xf0\x45\x96\x54\x00\x00\x00")

func increaseMdBytes() ([]byte, error) {
	return bindataRead(
		_increaseMd,
		"increase.md",
	)
}

func increaseMd() (*asset, error) {
	bytes, err := increaseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "increase.md", size: 84, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xe2, 0xf7, 0x48, 0xf5, 0xc0, 0xb2, 0x14, 0xa3, 0x57, 0xa5, 0x6f, 0xe2, 0xd7, 0x59, 0xbc, 0xd7, 0x76, 0xf4, 0xd8, 0x42, 0x36, 0xae, 0x7d, 0xdc, 0x64, 0x4f, 0xb4, 0xb, 0x4f, 0xf2, 0x50}}
	return a, nil
}

var _invertIfMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x6e\xeb\x30\x10\x44\xfb\x7f\x8a\x81\x6b\xdb\x77\xf8\x55\x2e\x90\x26\x9d\x56\xe4\xc8\x22\x42\xed\x0a\xcb\x95\x1d\xdd\x3e\xa0\x02\x05\xe9\x88\xc5\x1b\xce\xbc\x1b\x3e\x6c\x43\xb2\xad\x66\x2c\xf2\x49\xc4\x4c\x4c\x9b\xa6\x28\xa6\x58\xcc\x09\xa7\x64\x19\x2b\x31\xee\x28\xfa\xa4\x47\xd1\xc7\xc1\x25\xd3\x5c\x0e\xd0\xa6\xe3\x30\x94\x69\x40\x0b\x09\x2e\xd4\xc0\x2c\x9a\xeb\x09\xd3\xdd\x1c\x49\x1a\xef\x78\x9f\xfb\xb7\x2d\xce\xdc\x6f\x61\x12\xed\x07\xc5\x48\xd8\x16\x99\x1a\xcc\x18\x99\x64\x6b\x84\x28\x06\xd6\xc6\x01\xa3\x8b\xa6\x19\xa5\x41\x2d\xa0\x64\x66\xbe\xe3\x3f\xde\x0c\xab\xdb\x93\x3e\xa2\xc9\xde\x70\xe9\x4d\xb3\xac\xeb\x8e\x55\xe2\x08\x54\x4e\x71\x93\x5a\x1e\xca\x7c\xb9\x62\xa1\xe8\x39\x51\xcd\x17\xa9\x98\xaa\xbd\xfa\xb2\x64\x1a\x6e\x15\x93\xd5\x6a\xaf\x76\x20\x47\xba\x7b\x61\x11\x7f\x14\xbd\xa2\xbf\x4d\xeb\x0e\x7e\x25\xae\xdd\x42\x2a\xcc\xff\xf8\x36\x88\x13\x45\x7f\x6c\xee\xff\xbe\x03\x00\x00\xff\xff\xd0\xd8\x6b\x38\x74\x01\x00\x00")

func invertIfMdBytes() ([]byte, error) {
	return bindataRead(
		_invertIfMd,
		"invert-if.md",
	)
}

func invertIfMd() (*asset, error) {
	bytes, err := invertIfMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "invert-if.md", size: 372, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xbc, 0xb5, 0x3e, 0xcc, 0x39, 0x92, 0xe9, 0x34, 0xe8, 0xd8, 0x6d, 0x28, 0x26, 0x38, 0x4d, 0xef, 0x95, 0xd, 0xb1, 0x77, 0xb1, 0xf0, 0x19, 0xc8, 0xf2, 0x1c, 0xf9, 0x96, 0x7f, 0xd4, 0x59}}
	return a, nil
}

var _multipleStringConversionsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8f\xb1\x4e\xf3\x40\x10\x84\xfb\x3c\xc5\x94\xff\x2f\x19\xa7\x4f\x47\x85\xa8\xa1\x43\x48\x39\xfb\x26\xe7\x03\xb3\x1b\xed\xee\x99\xe4\xed\x91\x6d\x24\xda\xbb\xf9\x66\xe7\x7b\xc0\xa3\xe3\xae\x0d\x9f\xa2\xdf\x1d\x9a\x57\x29\x38\x5b\x92\xc2\x33\x74\xa1\x21\xc1\xc3\xd6\xd7\x52\x17\xee\xd9\x04\x6b\xc2\x0e\x43\x0b\x54\xc9\xbc\xad\xdf\x55\x42\xff\xc2\xc6\x68\x26\x8e\x84\xe1\x1e\xc4\x92\xe6\xc6\x1e\xaf\x13\x91\xeb\xe5\x42\xa3\x8c\x44\x75\x64\xfa\x68\x75\x60\x46\x15\x7c\xa9\x11\x99\x91\xea\x8c\x89\xc6\x13\xde\x5e\xb6\x3a\xef\xb6\x1a\xef\xb6\xc3\x8e\x24\x19\xe3\x94\x2c\x8d\x41\xf3\x15\x7d\xd2\xf7\x7f\x53\xc4\xd5\x4f\xc7\xe3\x30\x6b\xe9\x8b\xce\x49\x4a\xaf\x56\x8e\xfb\x24\xff\xdf\x1f\x0e\xc0\xb3\x20\xa6\xea\xe0\x8d\x36\x56\xe7\x26\x34\x6a\x9b\x33\x3e\x9a\x07\x46\x95\x85\x16\x88\x89\xfb\xf4\xcd\x6a\xf7\xf5\xb4\xac\x6e\x2b\xa1\x42\xf0\x16\x96\x10\xf7\x2b\x7f\x29\xaf\x2a\xfd\xe1\x27\x00\x00\xff\xff\x8b\x92\x39\x17\x53\x01\x00\x00")

func multipleStringConversionsMdBytes() ([]byte, error) {
	return bindataRead(
		_multipleStringConversionsMd,
		"multiple-string-conversions.md",
	)
}

func multipleStringConversionsMd() (*asset, error) {
	bytes, err := multipleStringConversionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "multiple-string-conversions.md", size: 339, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xda, 0x64, 0x95, 0x4e, 0xf8, 0xe9, 0x3b, 0x4d, 0xdf, 0x7a, 0x5f, 0xbe, 0x10, 0x11, 0xb8, 0x1e, 0xbc, 0xd5, 0x1d, 0x52, 0xa2, 0x75, 0x9d, 0x7a, 0x67, 0x94, 0xd5, 0xe0, 0xd6, 0xbd, 0xab}}
	return a, nil
}

var _noErrorMsgMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\xc1\xad\xc3\x30\x0c\x43\xef\x7f\x0a\x0e\xf0\x9b\x35\x7a\xed\xa1\x03\x44\x88\x89\xd8\xa8\x23\x05\x92\x90\xa2\xdb\x17\xf6\xb5\x27\x02\xe4\x23\x79\xc3\xa3\x53\x82\x28\x06\xb5\x84\x1d\x2d\x91\x95\xa0\xbb\x39\x0e\x46\xc8\xce\x05\xcf\x4a\x44\x8a\x16\xf1\x82\x75\x86\x2b\x8a\x31\x66\xab\xca\x45\xc8\x00\xb6\x17\xd2\x65\xe3\x3f\x0e\x8a\x36\xdd\xd1\x14\x77\xfb\x9d\x44\x8b\x69\x9a\xf6\x0f\xb2\x0e\x32\xd9\xfb\xd4\x4a\x14\x5e\xec\x76\xd2\xf1\xae\x32\x0e\xce\x93\xca\xb2\xfc\x7d\x03\x00\x00\xff\xff\x01\x3b\x83\x1f\xb1\x00\x00\x00")

func noErrorMsgMdBytes() ([]byte, error) {
	return bindataRead(
		_noErrorMsgMd,
		"no-error-msg.md",
	)
}

func noErrorMsgMd() (*asset, error) {
	bytes, err := noErrorMsgMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "no-error-msg.md", size: 177, mode: os.FileMode(420), modTime: time.Unix(1542628451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x70, 0xd7, 0xe8, 0x50, 0xd0, 0x86, 0x48, 0x39, 0xb3, 0xa9, 0xfc, 0x4, 0x57, 0x4, 0xc0, 0xf1, 0x1a, 0xe7, 0x24, 0x2b, 0xf6, 0x12, 0x9d, 0xd3, 0xe1, 0x59, 0xbd, 0x9f, 0xd3, 0x36, 0x18}}
	return a, nil
}

var _returnZeroValueMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcd\xaa\xdc\x30\x0c\x85\xf7\xf7\x29\x0e\x74\x91\x16\xf2\x43\xb7\x7d\x81\xd2\x75\x2f\x74\x51\xca\x8d\xae\xa3\xc4\x06\x8f\x34\x58\xf2\x0c\xe9\xd3\x17\x27\x33\x85\xbb\x34\x3a\xd6\xf9\xf4\x0d\xf8\x15\x59\xb0\x6b\x2d\x58\xab\x04\x4f\x2a\x28\xec\xb5\x88\x81\x04\x33\x97\xa2\x65\xee\xe1\x31\x19\x9c\x73\x36\x78\x64\x04\xca\x99\x0b\x3c\x92\x1f\x6f\xf5\xc8\xe5\xf1\x11\x37\xca\x95\x61\x51\x6b\x5e\xa4\x73\xbc\x33\xaa\xf1\x32\xe2\xe5\x67\x92\xc0\x48\x8e\x45\xd9\xda\x88\x82\x57\xca\x79\xc7\x85\xdc\xb9\xe0\xde\x16\xee\x5a\x9f\xab\x92\x9c\x1d\x81\x8c\xfb\xb3\x59\xe5\xc6\x72\x70\x36\x22\x7d\x26\xdb\xec\xf7\x5f\x2e\x7a\xd6\xff\xf9\x1c\xdd\xaf\xf6\x6d\x9a\x36\xcd\x24\xdb\xa8\x65\x9b\x0a\xaf\x93\x5d\x39\x7c\x7a\x8d\xfc\xd6\xb2\x6f\x47\xf6\xcb\xf8\xf2\x43\xd0\x52\x95\x36\xb6\xb3\x71\xd1\x83\x2f\x67\xbd\xe3\x52\xb3\xa7\x6b\xe6\x0f\x07\x1a\xd6\xa2\x97\xff\xd6\xac\x3f\xb8\x75\x75\x16\x08\xf3\xd2\xd8\xaa\x71\xb3\x98\xe4\x46\x39\x2d\xe8\xb4\xfa\xa0\xeb\xf0\x4e\xb2\x74\x0f\x4d\xae\xb0\xb4\x09\xe5\x16\x3c\x6c\xf7\xb0\x1a\x22\xc8\x30\x0f\x5f\xe7\x11\xaf\x91\xbc\x33\x88\x3a\x84\x03\x9b\x51\xd9\x9b\x98\xef\x3a\xfe\x0b\x00\x00\xff\xff\x52\xe6\x6a\xff\xbf\x01\x00\x00")

func returnZeroValueMdBytes() ([]byte, error) {
	return bindataRead(
		_returnZeroValueMd,
		"return-zero-value.md",
	)
}

func returnZeroValueMd() (*asset, error) {
	bytes, err := returnZeroValueMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "return-zero-value.md", size: 447, mode: os.FileMode(420), modTime: time.Unix(1544025826, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xea, 0x6d, 0xa5, 0xe3, 0xed, 0xfa, 0x25, 0xea, 0x47, 0xac, 0xec, 0x64, 0x6, 0x58, 0xf2, 0xe1, 0x7f, 0x57, 0x9e, 0x52, 0xcb, 0x1a, 0xff, 0xff, 0xfe, 0x6, 0xff, 0x4f, 0x5d, 0x23, 0xda}}
	return a, nil
}

var _runeToByteMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xdb\x0a\x52\x08\x7b\xb7\xaa\x03\x45\x1d\x3a\xd0\xa5\xaa\x3a\x5c\x92\xc3\xb1\x6a\xee\x22\xdf\x19\xc4\xbf\xaf\xe2\x50\x89\xd1\xd6\xf3\xfb\xfc\xbd\x2d\xbe\xb4\x80\x32\xa3\x57\xb9\x70\xf6\x28\x01\x84\x5c\x84\xe1\x0a\x42\x77\x73\x6e\xb1\xd7\x7a\x65\xe8\x49\xe6\xa4\x45\x73\xe8\x09\xe7\x92\x3c\x4e\x89\x6b\xcc\x1a\x98\xc2\xc7\x68\xf7\x32\x8b\x2a\xcb\x0b\x2a\xc6\xb8\x69\xc1\x94\xb5\x4b\x7c\x36\xc4\x53\x3d\x8f\x74\xa9\xa0\x81\x29\xe1\x1a\x7d\x84\xa8\x6c\x5f\x8e\xaf\x87\x03\xfa\x91\x32\xf5\xce\xd9\x5a\xbc\xe9\x95\x2f\x9c\x1b\x44\xb9\x13\xc8\x18\xd1\x9f\x0c\x1f\xef\x0d\x3a\x5e\x10\x3e\x32\xa2\x4c\xc5\x61\x9e\x67\x95\x5e\xc5\x29\x8a\x41\x25\xdd\xb0\xf4\xae\x2d\x4a\x48\xbc\x9d\xff\xbc\x79\xa4\xac\x56\x00\xf0\xa9\x08\xec\x20\x0c\xcc\x13\x67\x14\x19\x38\x9b\x93\x0c\x73\xa1\x9e\x66\xc8\xcc\x36\x2b\x6c\x55\xe2\x1c\xc3\xe8\x48\xf1\xb7\xaa\x64\xa6\x01\xdf\xc7\xca\xb7\xe6\x7f\x99\x65\x3e\x92\xe1\x01\x38\xcb\xec\xf5\x67\x3d\xba\x4f\xf6\xbc\xdb\x75\x49\x43\x1b\x34\x91\x84\x56\x73\xd8\x2d\x0e\xb6\x81\x4a\x35\xdb\x2b\x6a\x64\xf5\x17\x00\x00\xff\xff\x92\xa2\xe3\x52\xb6\x01\x00\x00")

func runeToByteMdBytes() ([]byte, error) {
	return bindataRead(
		_runeToByteMd,
		"rune-to-byte.md",
	)
}

func runeToByteMd() (*asset, error) {
	bytes, err := runeToByteMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rune-to-byte.md", size: 438, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0xee, 0xf4, 0xd3, 0x9e, 0xe5, 0x8b, 0xa5, 0xce, 0x99, 0x42, 0x91, 0x43, 0x5c, 0x4e, 0xb4, 0x8, 0x95, 0x17, 0x3, 0x9f, 0xe6, 0x48, 0xec, 0x2e, 0x1a, 0xad, 0x2, 0x32, 0x5b, 0x29, 0xd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"declare-when-needed.md": declareWhenNeededMd,

	"error-message-format.md": errorMessageFormatMd,

	"increase.md": increaseMd,

	"invert-if.md": invertIfMd,

	"multiple-string-conversions.md": multipleStringConversionsMd,

	"no-error-msg.md": noErrorMsgMd,

	"return-zero-value.md": returnZeroValueMd,

	"rune-to-byte.md": runeToByteMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"declare-when-needed.md":         &bintree{declareWhenNeededMd, map[string]*bintree{}},
	"error-message-format.md":        &bintree{errorMessageFormatMd, map[string]*bintree{}},
	"increase.md":                    &bintree{increaseMd, map[string]*bintree{}},
	"invert-if.md":                   &bintree{invertIfMd, map[string]*bintree{}},
	"multiple-string-conversions.md": &bintree{multipleStringConversionsMd, map[string]*bintree{}},
	"no-error-msg.md":                &bintree{noErrorMsgMd, map[string]*bintree{}},
	"return-zero-value.md":           &bintree{returnZeroValueMd, map[string]*bintree{}},
	"rune-to-byte.md":                &bintree{runeToByteMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
