// Code generated by go-bindata. DO NOT EDIT.
// sources:
// if-continue.md (459B)
// isletter.md (149B)
// just-return.md (149B)
// mustcompile.md (168B)
// nonexisting-map-value.md (363B)
// regex-in-func.md (306B)
// two-loops.md (145B)
// unicode-loop.md (103B)
// unicode.md (301B)
// universal-isletter.md (99B)
// zero-value-assign.md (194B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ifContinueMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x91\xbd\x8e\x53\x31\x10\x85\x7b\x9e\xe2\x68\x2b\x90\xf6\x26\xa2\x81\x88\x0a\x2a\x5e\x80\x06\x21\xa4\x4c\xec\xb9\xb1\x89\x3d\x63\x8d\xc7\x9b\xbd\x6f\x8f\x7c\xb3\xdb\xf9\xe7\xd8\xdf\xf9\xec\x05\xbf\x75\x20\xe8\x28\x11\x95\x6e\x0c\x4f\x8c\x75\x48\xf0\xac\x82\xaa\xc6\x30\xa6\x48\x97\xc2\xb8\x6c\xc8\xf2\xc2\xe6\x59\xae\x7b\x2e\xa8\xc4\xbc\x07\x75\xdd\x17\xce\x79\x3d\x23\x24\x0e\xb7\x19\x59\xd5\x50\xd8\x9d\xad\x1f\x1e\x18\x12\x8c\xfe\x60\x9c\x83\x8a\x67\x19\x7c\xc6\x8d\xb7\xbb\x5a\x84\x2b\xfe\x8d\xda\x40\x89\x69\x9f\xcd\x9c\xf0\xab\xa3\xa8\x36\x64\x67\xa3\x49\x3b\xe0\x57\x9a\xb5\xba\xbf\x73\xf7\xfd\x79\xbb\x27\x16\x5c\x18\x3a\x3c\xb2\x38\xc7\x03\x7e\xe0\xa7\xa2\x99\xbe\xb0\x5d\xd0\x69\xeb\xf8\xf3\x34\xcf\x27\x6a\x6d\x43\x23\x4f\xc8\x1d\x85\x57\x5f\xa8\xe4\xab\x70\x7c\xfa\xfb\x31\xb9\xb7\xfe\xed\x78\xac\x1c\xf3\xa8\x87\xa0\xf5\xf8\xbd\x92\xdb\xc6\x76\x2c\x59\x78\xd1\x75\xe9\xf9\x9a\x7c\xc9\xb2\x04\x8d\xbc\x7c\x3e\x7d\x89\xf1\x6b\x88\x4c\xa7\xd3\xa7\x67\x54\x26\x79\x7f\x26\x51\xab\x54\xb0\x16\xbd\xcf\xc2\x53\xdc\xb4\x60\xd5\x52\xf4\xde\x1f\x02\x13\x9f\x48\xe6\x27\xd8\x35\xcb\x33\xe6\x58\xa5\x6c\xe0\xd7\xc0\x6d\x6a\x53\x81\x1a\xd8\x4c\x0d\x81\x3a\x77\x90\x31\xb2\xbc\x89\x7e\xf8\x1f\x00\x00\xff\xff\x8b\x7b\xbd\xa7\xcb\x01\x00\x00")

func ifContinueMdBytes() ([]byte, error) {
	return bindataRead(
		_ifContinueMd,
		"if-continue.md",
	)
}

func ifContinueMd() (*asset, error) {
	bytes, err := ifContinueMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "if-continue.md", size: 459, mode: os.FileMode(420), modTime: time.Unix(1543061558, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xf8, 0x25, 0x76, 0x1c, 0x2a, 0x2e, 0x83, 0xa7, 0xc2, 0xa0, 0xba, 0xf1, 0xf8, 0x8b, 0xaf, 0xd9, 0x1b, 0x90, 0x2a, 0x22, 0xfc, 0x77, 0x6c, 0x94, 0xa0, 0xa6, 0xaf, 0x26, 0xf5, 0x61, 0x74}}
	return a, nil
}

var _isletterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xc1\x8d\xc2\x30\x10\x05\xd0\xfb\x56\xf1\xf7\x94\x0b\xa4\x8f\x48\x14\x91\x91\xf3\x89\x47\x18\x3b\x9a\x19\x0b\x72\xa3\x08\x2a\xa4\x12\x04\xe2\xfe\xf4\x8e\x98\xe0\x24\xf6\xd6\x07\x23\xba\x6b\x5d\x21\x30\xae\xbd\x88\x81\xf7\xcd\xe8\xae\xad\x22\x1a\x52\x66\xba\xe0\x96\x19\x99\x06\x41\xca\x62\x92\x82\x06\x75\x08\x0a\x23\x68\x23\xa6\xea\x41\x59\x0e\x08\xdb\x7f\xe3\xdc\xab\xa6\xb6\x70\x9c\xfc\xf4\x55\xf3\xeb\xf1\xd4\x18\x1c\xae\xd7\xad\x7c\xb6\xba\xe0\x2c\x1e\xb4\xff\xbf\x77\x00\x00\x00\xff\xff\xff\xa8\x5d\xdd\x95\x00\x00\x00")

func isletterMdBytes() ([]byte, error) {
	return bindataRead(
		_isletterMd,
		"isletter.md",
	)
}

func isletterMd() (*asset, error) {
	bytes, err := isletterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "isletter.md", size: 149, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xaf, 0x44, 0x1e, 0xa4, 0x7a, 0xc6, 0x72, 0x18, 0xce, 0xaa, 0x7a, 0x37, 0x4b, 0xd1, 0x1d, 0x91, 0xc7, 0x54, 0x39, 0x39, 0x8a, 0x5d, 0x16, 0x21, 0xfe, 0xcd, 0x8, 0x7d, 0x7f, 0x97, 0x45}}
	return a, nil
}

var _justReturnMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcd\x41\x0e\xc2\x40\x08\x46\xe1\xbd\xa7\xf8\x0f\xa0\xbd\x8f\xbb\xa1\x0e\x55\x94\x82\x61\xc0\x64\x6e\x6f\x52\xe3\xfe\xe5\x7b\x17\x5c\xbd\x40\xc1\x58\x83\xe9\x25\x76\x87\x57\xc2\x37\xe4\x83\xd1\x36\x8f\x06\x75\x7f\xc3\x4d\x27\xd2\x11\x9c\x15\x06\xc2\x87\x42\x68\x55\xc6\xf4\xc2\xb3\x46\x62\x70\x2e\x07\x77\xf3\xd2\x8e\xf6\x4b\x1b\x64\xdf\xb9\x0b\x25\xeb\x84\xd8\x48\xa6\x7e\x06\x59\x07\xab\xec\x62\x94\x7c\xcc\xfe\xe0\x72\xfa\x06\x00\x00\xff\xff\x39\xeb\x11\x69\x95\x00\x00\x00")

func justReturnMdBytes() ([]byte, error) {
	return bindataRead(
		_justReturnMd,
		"just-return.md",
	)
}

func justReturnMd() (*asset, error) {
	bytes, err := justReturnMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "just-return.md", size: 149, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7e, 0xeb, 0x6f, 0x3a, 0xd2, 0x67, 0x7e, 0x8a, 0xa3, 0x96, 0xa3, 0xef, 0x59, 0x43, 0x54, 0x4c, 0xd5, 0xad, 0xa2, 0xfa, 0x3f, 0xe, 0xb, 0x6b, 0x1f, 0x3c, 0xa, 0x5b, 0xd3, 0x21, 0xdb, 0xa0}}
	return a, nil
}

var _mustcompileMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x41\xb2\x82\x30\x10\x84\xe1\xfd\x3b\x45\xef\x78\x56\x21\x97\x70\xed\x8e\x03\x30\x86\x18\xba\x0c\x0c\x95\x99\x88\xdc\xde\x02\xb7\x5d\xfd\xfd\x57\xf4\x8a\xa0\xf3\xca\x1c\x21\x30\x17\x67\x40\x89\x29\x7e\x5a\xd0\x1b\x83\x20\xa9\x8e\xe0\x18\x05\xae\xa8\x16\x31\xdc\xab\xf9\xed\x87\xfe\x2f\x43\x87\x7e\xa2\x61\x63\xce\x08\x72\x1c\x7c\x8a\x58\x8b\xa6\x22\xf3\x61\x56\x59\x18\xc0\xe7\xb9\x9f\x6d\xd0\xc0\xe5\x2d\x99\x63\x0b\x53\xec\x5a\x9b\x9c\xf1\x5a\x74\x83\x3c\xb4\x3a\xe8\x28\x4c\x93\x43\x36\xd9\xbb\xbf\x6f\x00\x00\x00\xff\xff\xfa\x98\x2c\xcd\xa8\x00\x00\x00")

func mustcompileMdBytes() ([]byte, error) {
	return bindataRead(
		_mustcompileMd,
		"mustcompile.md",
	)
}

func mustcompileMd() (*asset, error) {
	bytes, err := mustcompileMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mustcompile.md", size: 168, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xb2, 0x40, 0x36, 0x90, 0xb3, 0x55, 0x4e, 0x7b, 0xa1, 0xe1, 0x86, 0xd4, 0x8f, 0x22, 0xe9, 0x1a, 0x8f, 0x1e, 0x8c, 0x8a, 0xf2, 0x6e, 0x83, 0xf0, 0xfe, 0x6f, 0x3a, 0xd0, 0x94, 0x91, 0x52}}
	return a, nil
}

var _nonexistingMapValueMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\x41\x4f\x23\x31\x0c\x85\xef\xfb\x2b\x9e\xb4\x97\x5d\xa9\xcc\xdc\x7b\xe1\x82\x40\x9c\xe1\x80\x54\x55\x8d\x69\x3d\x33\xd1\x64\xec\x90\x78\xda\x06\xc4\x7f\x47\x09\x70\xb2\x64\x7d\x7e\xef\xf3\x0d\xee\xfc\x09\x45\x57\xcc\xa2\x17\xd8\x44\x06\xc2\x42\x11\x5e\xf0\xa0\x10\x3e\x73\x42\x24\xf1\xc7\x0c\x3f\x34\x92\xf2\x0c\x6f\x18\x34\x81\x20\x2a\x7c\xf5\xd9\x58\x0c\x33\x97\x5b\x3c\x4a\x36\xa6\x53\x25\x12\xdb\x9a\x24\xc3\x26\xc6\xee\x9d\x93\xe2\x4c\x61\xe5\xfd\xbf\xc9\x2c\xe6\x6d\xdf\x8f\x1a\x48\xc6\x4e\xd3\xd8\x27\x1e\xfa\x1c\xf9\xf8\xf7\x79\xe2\x43\x65\x0f\x8d\xfd\xdf\x6a\x9a\x96\x95\xc8\x1d\xee\x35\x81\xaf\xb4\xc4\xc0\x9b\x5f\xa1\x89\xce\x0c\x82\x5b\x28\xee\x5e\xf6\xaf\xaa\xc1\xd5\xfa\x8b\x0f\xe1\xc7\x01\x6e\xa0\x90\xd9\xd5\x8b\x6a\xc3\x62\xa9\xe0\xa4\x9c\x21\x6a\x68\x1f\x74\x78\xd2\x16\x77\x24\xc1\xdb\xca\xa9\x34\xb4\xa6\x3a\x5c\xbc\x4d\xba\x1a\xd6\xec\x65\xfc\xde\x37\xbf\x0d\x74\x76\xc8\x45\x8c\xae\x5b\x38\x3f\x20\xeb\xc2\x55\xa4\xce\x99\xcb\x1e\x1f\x5d\xd7\x7d\xba\xee\xcf\x57\x00\x00\x00\xff\xff\xdb\xce\x1f\xa4\x6b\x01\x00\x00")

func nonexistingMapValueMdBytes() ([]byte, error) {
	return bindataRead(
		_nonexistingMapValueMd,
		"nonexisting-map-value.md",
	)
}

func nonexistingMapValueMd() (*asset, error) {
	bytes, err := nonexistingMapValueMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nonexisting-map-value.md", size: 363, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x96, 0x40, 0xaf, 0x50, 0x71, 0xf8, 0xb4, 0x46, 0x2b, 0x44, 0xb9, 0x33, 0x79, 0x86, 0xca, 0x7c, 0xe3, 0x2c, 0x42, 0x8e, 0x16, 0x32, 0xb9, 0x38, 0x93, 0xd0, 0x0, 0xdf, 0x68, 0x52, 0x8d}}
	return a, nil
}

var _regexInFuncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x4d\x6e\xeb\x30\x0c\xc4\xf1\xab\xcc\x2e\x9b\x3c\x1f\xe3\x15\xdd\xe6\x06\xb2\x3c\x92\x89\xc8\xa4\x41\x51\x49\x7c\xfb\xc2\xfd\x40\xbb\xff\xcf\x6f\xfe\xe1\xc6\x3a\x5a\x72\xf0\xb5\x3b\x7b\x17\xd3\x0e\x51\xbc\x19\x9e\xe6\x77\x24\x34\x89\x68\xc4\x22\xa5\xd0\xa9\xd1\x0e\x14\xb7\x0d\x16\x2b\x1d\x2d\x69\x1d\xa9\xb2\x4f\xf8\x6f\x8e\x99\x11\x74\xec\xf4\x62\xbe\x25\xcd\xbc\x22\xc1\x59\xf9\x82\x74\x64\xdb\x76\x69\x5c\x30\xb3\x98\x13\x12\x97\x8e\xd1\xb9\x4c\xb8\x49\x5d\x03\x6a\xcf\x2b\x0e\x1b\x17\xe7\x77\x2c\x5a\x11\x2b\x7f\x0c\xed\xb2\xf0\x2c\x1c\x65\x68\x0e\x31\xbd\x62\x1e\x01\x09\x98\xb6\x03\x4a\x2e\x1d\x61\x98\xf9\x7b\x67\x9a\x39\xe1\xbd\xfc\x95\x3a\x7a\xa4\x90\x7c\x62\xc8\x49\xb1\xd9\x83\x9f\xc1\xd7\x2c\x9d\xf6\x09\xed\x29\xdf\x53\x25\x1a\x1f\x6c\xd3\x47\x00\x00\x00\xff\xff\x07\x6d\x8d\x98\x32\x01\x00\x00")

func regexInFuncMdBytes() ([]byte, error) {
	return bindataRead(
		_regexInFuncMd,
		"regex-in-func.md",
	)
}

func regexInFuncMd() (*asset, error) {
	bytes, err := regexInFuncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-in-func.md", size: 306, mode: os.FileMode(420), modTime: time.Unix(1542132321, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x2d, 0x3a, 0xb5, 0xec, 0x9c, 0x27, 0xe3, 0x9b, 0x18, 0xc4, 0xb4, 0xc5, 0xc1, 0xc8, 0xe5, 0x60, 0xc3, 0x82, 0xe7, 0x4f, 0x21, 0x7f, 0x3c, 0xd0, 0x3d, 0xcf, 0x3, 0x6d, 0xc2, 0xe4, 0xa9}}
	return a, nil
}

var _twoLoopsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xb1\x11\xc2\x40\x0c\x44\xd1\x9c\x2a\xb6\x01\xdc\x02\x01\x2d\x90\x10\x6a\x60\xe1\x04\x46\xba\x39\xe9\x6c\xae\x7b\x06\x70\xba\x6f\xe7\xef\x71\xf6\x0e\x69\xc4\xc5\x5f\x55\x9a\xda\x1d\x5c\xd8\x06\x66\x66\xb2\x41\x0d\x59\x88\xc8\x1f\xad\x9a\x65\x73\xcf\xc2\xb6\xbd\x26\x9c\x8a\x24\x34\xc0\x77\xa5\x85\x2e\x9c\x70\x14\xc3\xf0\x8e\x2c\x6a\x4f\xf8\x0d\x82\x55\x06\xd2\x71\xf5\xef\x18\xff\xda\xa3\x47\xc2\x8d\x98\xdd\xeb\x61\xf7\x09\x00\x00\xff\xff\x01\xf2\x6f\xcb\x91\x00\x00\x00")

func twoLoopsMdBytes() ([]byte, error) {
	return bindataRead(
		_twoLoopsMd,
		"two-loops.md",
	)
}

func twoLoopsMd() (*asset, error) {
	bytes, err := twoLoopsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "two-loops.md", size: 145, mode: os.FileMode(420), modTime: time.Unix(1542563342, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x29, 0x9f, 0x49, 0x9b, 0x59, 0x43, 0x42, 0xbe, 0x36, 0xa7, 0xf6, 0xc0, 0xa8, 0x8e, 0x78, 0x17, 0xbe, 0x45, 0x3c, 0xdf, 0xcf, 0xa3, 0xcb, 0xcd, 0x12, 0x5e, 0xab, 0x8f, 0xbe, 0x9b, 0xc9}}
	return a, nil
}

var _unicodeLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x31\x0a\x02\x41\x0c\x85\xe1\xde\x53\x3c\x0b\x4b\x05\x6f\xe1\x1d\x44\x48\x98\x7d\xae\xc1\x25\x19\x26\x59\xcf\x2f\x53\x6c\xfd\xff\x7c\x57\x3c\xf4\x47\x28\xb6\x88\x2f\xb4\xb0\xa7\xf9\x0a\xd9\xdd\x5a\x2c\xbc\x5d\x9e\xf7\x57\x0a\x2a\x30\xd8\x37\x6d\x84\x64\x0d\xf3\x35\x8f\x64\x8e\xfa\x10\xf2\x8e\x21\x53\xe9\x73\x36\x6f\x83\x9a\x44\x76\x72\x39\x9f\xfe\x01\x00\x00\xff\xff\x2c\x81\x9b\x0a\x67\x00\x00\x00")

func unicodeLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeLoopMd,
		"unicode-loop.md",
	)
}

func unicodeLoopMd() (*asset, error) {
	bytes, err := unicodeLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode-loop.md", size: 103, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xa5, 0x51, 0x64, 0x0, 0xb1, 0xd3, 0x26, 0x5, 0xea, 0xf3, 0xfe, 0x57, 0x9e, 0x43, 0x38, 0x9c, 0x11, 0xa9, 0xba, 0x40, 0xd7, 0x78, 0xae, 0x1d, 0xf1, 0x9f, 0x19, 0xae, 0x18, 0x79, 0x9f}}
	return a, nil
}

var _unicodeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x6a\xeb\x30\x10\x45\xf7\xf9\x8a\xfb\x16\x0f\x5a\x48\x03\xfd\x96\xd2\x45\x29\x05\x8f\xad\x6b\x7b\x1a\x49\x63\x34\xa3\x45\xfe\xbe\x28\x25\x8b\x6e\x87\x73\xee\x99\x17\x7c\x58\xc7\x62\x3d\x27\x64\xb3\x2b\x24\xd0\x5d\xeb\x86\xa9\x57\x5d\x2c\xf1\xf2\xff\xf3\xf5\xcb\x27\x68\x75\x4d\x44\xec\xc4\xb4\x5a\x9b\x06\x7e\x8c\x6b\x50\x12\x6c\xc5\xe4\xd1\xb4\x6e\xfe\x10\x66\xae\xd6\x7e\x85\x81\x9e\x11\x06\xad\x4b\xa3\x38\xe1\x07\x99\x2e\xa7\x13\x00\x3c\xbd\x59\x61\x68\xa1\x43\x03\x45\xae\xf4\xbb\x35\xea\x10\x64\x8d\xc8\x04\xc5\x95\x6d\x8c\xb4\x11\xd4\x15\xb7\xf1\xb9\xe4\xfc\xb7\xfc\x08\xef\x52\xd3\x19\xb1\x5b\xdf\xf6\x0b\xde\x9d\x83\x6f\x98\xe9\x81\xef\x9e\xb6\xc2\x1a\x67\x48\x4d\x68\x2c\x2c\x33\xdb\x7d\x58\x66\xcd\x1a\x37\xcc\x94\x70\x1c\x6c\xab\xb5\x22\x75\xe1\xbf\xe7\xd3\x4f\x00\x00\x00\xff\xff\x57\x75\x4b\x35\x2d\x01\x00\x00")

func unicodeMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeMd,
		"unicode.md",
	)
}

func unicodeMd() (*asset, error) {
	bytes, err := unicodeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode.md", size: 301, mode: os.FileMode(420), modTime: time.Unix(1544124510, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x0, 0x1e, 0xdf, 0x6, 0xc9, 0x39, 0x5a, 0xc0, 0x41, 0x32, 0x72, 0x9d, 0x5, 0xc4, 0x4b, 0xf0, 0x5c, 0x47, 0xc7, 0xa1, 0x9, 0x85, 0x40, 0xf0, 0x7f, 0xe3, 0x19, 0x55, 0xae, 0xc1, 0xf8}}
	return a, nil
}

var _universalIsletterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\xdd\x09\xc2\x40\x10\x04\xe0\x77\xab\x98\x02\x4c\xea\x50\xb0\x88\x8c\x97\x39\x3d\x5c\x76\x61\xb3\xfe\xa4\x7b\x21\x05\x7c\x13\x2e\xfc\x08\x84\x45\xbc\xc0\xc2\xf2\xf6\xd1\x62\xd5\x7c\xdd\x6e\xaa\x52\x2e\xe8\x91\x20\xba\xe9\x37\xee\xa6\x33\x1e\x72\x25\x0d\x5f\xee\xa8\xc0\x58\xe5\x35\xfa\x0e\x0f\x9f\xec\x30\x68\x4f\x26\x5b\x29\xb7\xf9\xf4\x0f\x00\x00\xff\xff\x3c\xb6\x6e\x91\x63\x00\x00\x00")

func universalIsletterMdBytes() ([]byte, error) {
	return bindataRead(
		_universalIsletterMd,
		"universal-isletter.md",
	)
}

func universalIsletterMd() (*asset, error) {
	bytes, err := universalIsletterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "universal-isletter.md", size: 99, mode: os.FileMode(420), modTime: time.Unix(1542537851, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xad, 0x50, 0xcd, 0xe2, 0x4d, 0x41, 0x36, 0x7c, 0x6a, 0x1f, 0x7f, 0x7f, 0x91, 0x4f, 0x2e, 0x9f, 0xf7, 0x26, 0xf, 0x81, 0x69, 0xbd, 0x45, 0xe9, 0xd0, 0x91, 0xcf, 0x2d, 0x3e, 0x57, 0xdd}}
	return a, nil
}

var _zeroValueAssignMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\xc1\x4a\x03\x31\x10\x87\xf1\xbb\x4f\xf1\xa7\x1e\x54\xd0\xe6\xbe\xe0\x03\x78\xf7\x26\xd2\x4c\xb3\xd3\x64\x20\x3b\x29\x33\xd3\x2d\xee\xd3\xcb\x16\xbe\xe3\x0f\xbe\x0f\x7c\x5d\xf0\x37\x6e\x2f\xc6\x98\xb9\x74\x32\xd1\x0a\xc2\x4a\x26\x74\xee\x8c\x7b\x93\xd2\x50\x48\x71\x66\x88\x4a\x08\x75\xd9\x78\xc6\x5d\xa2\x41\xc2\xf1\xb3\xb1\x0d\xac\xd4\x6f\xfc\xfb\xda\x22\xae\x3e\xa5\x54\x47\x27\xad\xc7\x61\x35\x19\x5f\x92\x5f\xb9\x3c\x7f\x37\x3e\xed\xf6\xf4\xb0\x6f\xef\x88\xc6\x8a\xbc\x92\xc1\xe1\xb1\x9f\x33\xc4\xb1\x0c\x63\xc8\x2c\x63\xa1\x90\x82\x68\xa4\xd8\x73\x97\xaa\x0b\x6b\x4c\xc8\x8e\xe9\x13\x87\x43\x3e\x3e\xfd\x07\x00\x00\xff\xff\x4d\xb5\x81\x1f\xc2\x00\x00\x00")

func zeroValueAssignMdBytes() ([]byte, error) {
	return bindataRead(
		_zeroValueAssignMd,
		"zero-value-assign.md",
	)
}

func zeroValueAssignMd() (*asset, error) {
	bytes, err := zeroValueAssignMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "zero-value-assign.md", size: 194, mode: os.FileMode(420), modTime: time.Unix(1542537851, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x84, 0xf, 0x44, 0x91, 0xaa, 0xe6, 0x45, 0x4d, 0xd, 0xe6, 0x49, 0xfb, 0xce, 0x42, 0xe7, 0x91, 0xfb, 0xf4, 0xee, 0x97, 0x75, 0x6a, 0xa3, 0xad, 0xf0, 0xaf, 0x2b, 0x1, 0xdb, 0xd2, 0xab}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"if-continue.md": ifContinueMd,

	"isletter.md": isletterMd,

	"just-return.md": justReturnMd,

	"mustcompile.md": mustcompileMd,

	"nonexisting-map-value.md": nonexistingMapValueMd,

	"regex-in-func.md": regexInFuncMd,

	"two-loops.md": twoLoopsMd,

	"unicode-loop.md": unicodeLoopMd,

	"unicode.md": unicodeMd,

	"universal-isletter.md": universalIsletterMd,

	"zero-value-assign.md": zeroValueAssignMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"if-continue.md":           &bintree{ifContinueMd, map[string]*bintree{}},
	"isletter.md":              &bintree{isletterMd, map[string]*bintree{}},
	"just-return.md":           &bintree{justReturnMd, map[string]*bintree{}},
	"mustcompile.md":           &bintree{mustcompileMd, map[string]*bintree{}},
	"nonexisting-map-value.md": &bintree{nonexistingMapValueMd, map[string]*bintree{}},
	"regex-in-func.md":         &bintree{regexInFuncMd, map[string]*bintree{}},
	"two-loops.md":             &bintree{twoLoopsMd, map[string]*bintree{}},
	"unicode-loop.md":          &bintree{unicodeLoopMd, map[string]*bintree{}},
	"unicode.md":               &bintree{unicodeMd, map[string]*bintree{}},
	"universal-isletter.md":    &bintree{universalIsletterMd, map[string]*bintree{}},
	"zero-value-assign.md":     &bintree{zeroValueAssignMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
