// Code generated by go-bindata. DO NOT EDIT.
// sources:
// challenge.md (139B)
// flatten-map.md (198B)
// go-routines.md (176B)
// ifs-to-switch.md (63B)
// loop-rune-not-byte.md (153B)
// maprune.md (178B)
// move-map.md (193B)
// regex.md (209B)
// slice-rune-conversion.md (206B)
// try-switch.md (298B)
// type-conversion.md (175B)
// unicode-loop.md (100B)
// unicode.md (334B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _challengeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xcc\x31\x8e\xc2\x40\x0c\x40\xd1\x7e\x4f\xf1\xcb\xa5\x80\x03\xd0\x50\xe4\x14\x94\x0e\x38\x71\x94\x89\x8d\x66\x1c\x46\xb9\x3d\x4a\xfd\xa4\x77\x65\x30\x29\x45\x7d\xd6\x3b\xcf\xd8\x59\x3d\x3a\x16\x9d\x0c\xea\xee\x88\xbf\x59\x3c\xb5\x7e\xaa\x26\x69\xca\xa8\xfe\xb2\x4d\xea\xda\xf0\xe8\x37\x06\x71\x8e\xd8\x49\x5b\x7c\x25\x26\x22\x4d\x2b\x5d\x8e\x76\x26\x2d\xca\x57\x4f\x6c\xa4\x49\xb2\x2d\xb3\x25\xa3\xf2\x2f\x94\xc8\x0b\x93\xb4\xd4\xfa\xf8\xfb\x05\x00\x00\xff\xff\xe6\x4b\x15\x1b\x8b\x00\x00\x00")

func challengeMdBytes() ([]byte, error) {
	return bindataRead(
		_challengeMd,
		"challenge.md",
	)
}

func challengeMd() (*asset, error) {
	bytes, err := challengeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "challenge.md", size: 139, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x97, 0xf2, 0xf6, 0xaa, 0x56, 0x51, 0x9a, 0x7d, 0x3e, 0xcd, 0xbc, 0xdd, 0xdc, 0x9b, 0x71, 0x3b, 0x9b, 0x55, 0xaf, 0xa8, 0x0, 0x63, 0x85, 0x85, 0xde, 0x20, 0x60, 0xcf, 0xef, 0x52, 0x47, 0xcc}}
	return a, nil
}

var _flattenMapMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x41\x4e\xc4\x30\x10\x04\xef\xbc\xa2\x1f\xb0\xe4\x1d\x3c\x80\x0b\x42\x48\x3b\x19\x37\xb1\x95\xf5\xd8\x1a\x8f\x59\xe5\xf7\x28\x39\xec\xb1\xa5\xae\xaa\x77\x7c\x66\xe2\x29\x07\x22\x13\x55\x3a\xca\x80\x3a\x25\x98\x70\xb4\x09\x9d\xee\xb4\x78\x1c\x30\x32\x21\x9e\x0d\x8f\xd6\xfa\x58\xf0\x21\x7f\x84\x9c\x6b\x87\xc4\xc5\xaf\x34\xcd\x55\x7c\x1f\x37\x38\xc5\x5d\x6c\xe3\xcb\xfc\xdb\x1c\xa9\x38\x35\x2e\x68\xf6\x1b\xc4\x12\x34\x53\xf7\xeb\x34\xfa\x99\x90\x4d\x8a\x2d\xf8\x6a\xd3\xb1\x72\x04\x34\xb7\xa2\x44\x2d\x5b\x0e\xac\x67\xf3\x5e\xa5\x7f\xfb\x34\xfe\x14\x8b\xfb\xf2\xf6\x1f\x00\x00\xff\xff\x86\xcc\xae\xa3\xc6\x00\x00\x00")

func flattenMapMdBytes() ([]byte, error) {
	return bindataRead(
		_flattenMapMd,
		"flatten-map.md",
	)
}

func flattenMapMd() (*asset, error) {
	bytes, err := flattenMapMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flatten-map.md", size: 198, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x21, 0x65, 0x8f, 0x6f, 0x4e, 0x2d, 0x7b, 0x14, 0xbc, 0xc1, 0xad, 0x3f, 0x3f, 0x91, 0x68, 0xb6, 0x9c, 0x65, 0x18, 0x32, 0xbb, 0xc9, 0xba, 0x56, 0x15, 0xdc, 0xb, 0x1b, 0xa2, 0x78, 0xe9}}
	return a, nil
}

var _goRoutinesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x8e\x31\x8e\xc3\x30\x0c\x04\xfb\x7b\xc5\x5e\x95\x2a\xfe\x40\x8a\x34\x69\xd2\xfb\x03\xb4\xc2\x98\x82\x2d\xd1\x20\x29\x18\xfe\x7d\x20\xf5\x33\xbb\x73\xc7\x1b\xce\x8c\x4b\x1b\xc8\x18\xcd\x73\x5d\xb1\xaa\x69\x8b\x5c\xd9\xff\x31\x0b\xc5\xcd\x91\x54\xf7\xc7\xc0\x0e\xd3\x85\x96\xfd\xc2\x49\x35\x10\x8a\x42\x1b\x23\x07\xbc\x1d\x6c\xf8\x92\xc7\x84\x57\xfe\x0c\x38\x09\xa7\x0d\x21\x8c\x85\x6b\x92\x42\xb6\x79\x77\xfa\xa7\xe8\x89\xd2\x92\x0c\x85\xad\x4f\x64\x7f\x62\x16\x06\x55\x3f\xd9\x50\xe8\x82\x37\x3b\x2c\xfb\x48\x9c\xfe\x7e\x01\x00\x00\xff\xff\x24\x66\xe6\x7b\xb0\x00\x00\x00")

func goRoutinesMdBytes() ([]byte, error) {
	return bindataRead(
		_goRoutinesMd,
		"go-routines.md",
	)
}

func goRoutinesMd() (*asset, error) {
	bytes, err := goRoutinesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go-routines.md", size: 176, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0x9c, 0x8c, 0xf3, 0x35, 0x34, 0x20, 0x98, 0xeb, 0xdf, 0x40, 0xd1, 0x3a, 0x78, 0x4f, 0xbf, 0x51, 0x74, 0x79, 0xa, 0x5a, 0x69, 0x97, 0x15, 0xdc, 0x9b, 0x4f, 0x2b, 0x82, 0x8b, 0x92, 0x26}}
	return a, nil
}

var _ifsToSwitchMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x55\x08\x29\xaa\x54\x48\x54\x48\x28\x2e\xcf\x2c\x49\xce\x48\x50\x28\x2e\x49\x2c\x49\xcd\x4d\xcd\x2b\x51\xc8\xcc\x2b\x2e\x49\x4d\x4c\x51\xc8\x4f\x53\x28\x4e\x2d\x4b\x2d\x4a\xcc\x51\x48\xc8\x4c\x43\x52\x51\xac\xc7\x05\x08\x00\x00\xff\xff\xc9\x18\x8f\xbc\x3f\x00\x00\x00")

func ifsToSwitchMdBytes() ([]byte, error) {
	return bindataRead(
		_ifsToSwitchMd,
		"ifs-to-switch.md",
	)
}

func ifsToSwitchMd() (*asset, error) {
	bytes, err := ifsToSwitchMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ifs-to-switch.md", size: 63, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0x8, 0x18, 0x78, 0x60, 0x64, 0xe3, 0x49, 0x82, 0x19, 0xa9, 0xd4, 0xb3, 0xbe, 0x59, 0x57, 0xab, 0xf3, 0xee, 0xe0, 0xaf, 0x3c, 0xaf, 0x52, 0xb6, 0xd6, 0x2d, 0x7c, 0xc8, 0x1d, 0xa2, 0x45}}
	return a, nil
}

var _loopRuneNotByteMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8d\x41\xae\x02\x31\x0c\x43\xf7\xff\x14\x5e\x57\xfa\xdc\x81\x25\x7b\x38\x40\x48\x0d\x54\x1a\xd2\x2a\x49\x91\xe6\xf6\xa8\xc3\xce\x96\x9e\x9f\xff\x71\x49\xba\x64\xb3\x27\xfa\x87\x0e\x41\xa4\xaf\x36\xbc\xd7\xa9\x0c\xf8\x34\xc6\x09\xe7\x23\xc0\x39\x9c\x41\xcb\x80\xe0\x66\x4d\x7b\x25\xf4\x25\x2e\x9a\x6b\x6e\x15\x2a\x06\xed\x16\x2d\x12\xfd\x81\x52\xde\x73\xcb\x36\x36\x96\x82\xfb\x9e\x4b\x76\xf5\x1d\x33\xd6\xcd\x61\x47\xb3\x48\x4a\x5d\xf8\x8f\xf8\xfb\x06\x00\x00\xff\xff\xb1\x35\x1d\xd3\x99\x00\x00\x00")

func loopRuneNotByteMdBytes() ([]byte, error) {
	return bindataRead(
		_loopRuneNotByteMd,
		"loop-rune-not-byte.md",
	)
}

func loopRuneNotByteMd() (*asset, error) {
	bytes, err := loopRuneNotByteMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "loop-rune-not-byte.md", size: 153, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x91, 0x83, 0xc8, 0x50, 0xba, 0x8a, 0xcc, 0x84, 0xf, 0x9b, 0xd5, 0x5b, 0xd6, 0x76, 0x49, 0x6d, 0xe6, 0x2f, 0x50, 0x26, 0xa4, 0x5b, 0x77, 0x23, 0x0, 0xa8, 0x1, 0x1e, 0x91, 0xe4, 0x84}}
	return a, nil
}

var _mapruneMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcd\x41\x6a\xc4\x30\x10\x44\xd1\x7d\x4e\x51\x59\x04\x6f\x92\x1c\xc0\xbb\x1c\x23\x84\x80\x84\x54\x1e\x37\xd6\x74\x7b\xd4\x2d\xc3\xdc\x7e\xb0\xd7\xf5\xa8\xff\x85\x5f\x1b\x28\x36\x5a\xc5\x70\x22\x23\xdd\xf3\xfe\xd7\x87\xf2\x5f\x34\x12\x44\x3d\x98\x2b\x6c\x41\xfa\xf0\x84\xc5\x3a\xaa\x74\x96\x40\x33\xdb\xc6\x7e\x2e\xb1\x12\x5e\xac\x13\x47\x6e\x83\x17\xca\x38\x4f\x66\xa8\x21\x9e\x3b\x51\x4c\x0f\x76\x17\x53\x28\x59\x59\xdf\xf1\x73\x11\x34\x09\xf6\xdc\xce\xbe\xc3\x45\x6f\x8d\x78\x0c\x0b\xfa\x27\x9a\x6c\x44\xac\xe2\x33\xd2\x94\xa7\xf4\xfd\xf6\x0a\x00\x00\xff\xff\x90\xd2\xb4\x7b\xb2\x00\x00\x00")

func mapruneMdBytes() ([]byte, error) {
	return bindataRead(
		_mapruneMd,
		"maprune.md",
	)
}

func mapruneMd() (*asset, error) {
	bytes, err := mapruneMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "maprune.md", size: 178, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xf3, 0x94, 0x98, 0xe3, 0x39, 0x48, 0x43, 0xd1, 0xd1, 0xa1, 0xc3, 0xf, 0xa7, 0x52, 0xd0, 0x56, 0xc8, 0xa5, 0x3d, 0x85, 0x52, 0x40, 0x49, 0x92, 0xd4, 0x55, 0x9e, 0xff, 0x2c, 0x1b, 0x1f}}
	return a, nil
}

var _moveMapMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0e\x83\x40\x0c\x44\xd1\x3e\xa7\x98\x8e\x86\x70\x19\xd2\xa4\xc3\xf2\x3a\xac\x15\xb0\xd1\xae\x01\x91\xd3\x47\x22\x12\x29\x47\x9a\xff\xee\x78\xfa\xda\x14\x01\x17\xa1\x50\x1b\x11\x59\x30\xd3\x02\xb5\xaa\x49\xce\x39\xf4\xec\x45\x06\xbc\x56\xe3\x50\xb7\x0e\xbd\x1a\xcb\x75\x35\xd9\xa4\x80\x33\xd9\x28\xb5\x45\x94\x03\xb3\x6f\x3f\x4c\x2b\xd8\x93\xc0\xd7\xb8\xbc\xbf\xf3\xc8\x14\xd8\xe9\x68\xa1\xd1\x54\xb8\x4d\x07\xd4\x34\x94\x26\xfd\x48\x82\x1b\x4b\x8b\x3d\x8b\x9d\xe1\x42\xfc\xa6\x51\xa0\x15\x93\x53\x92\xd4\xdd\xbe\x01\x00\x00\xff\xff\x65\x94\x12\x35\xc1\x00\x00\x00")

func moveMapMdBytes() ([]byte, error) {
	return bindataRead(
		_moveMapMd,
		"move-map.md",
	)
}

func moveMapMd() (*asset, error) {
	bytes, err := moveMapMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "move-map.md", size: 193, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xf0, 0xab, 0x77, 0xb9, 0x7d, 0x8c, 0x75, 0x21, 0x37, 0xc2, 0x37, 0x66, 0xfb, 0x62, 0xec, 0xc4, 0x70, 0xa, 0x4, 0xbd, 0xc0, 0x42, 0xaf, 0xa2, 0x52, 0xe8, 0xd2, 0xf9, 0x16, 0xd1, 0x59}}
	return a, nil
}

var _regexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x31\x56\x86\x40\x0c\x45\xe1\xde\x55\xbc\x0d\xe8\x16\x2c\x5c\x85\x65\x18\x1e\x4c\x0e\x61\xc2\x99\x64\x40\x76\xef\x41\xdb\xbf\xbc\xcd\x77\xdf\xf1\xed\x03\xd2\x89\xe2\xfb\xa1\xa6\x6d\x85\x20\x52\x52\x0b\x3a\xd7\x61\xd2\xc1\x9f\xa3\x33\x42\xbd\x41\x1b\x04\xcb\x68\x25\x9f\xca\x2a\x89\x4b\xcd\xb0\x7b\x24\x4c\x37\xda\x8d\x89\x28\x62\xc6\x19\xc1\x93\x5d\x0c\xa9\x3b\xe3\x03\x5f\x3e\x6c\xc6\xed\x03\x55\x4e\x42\x60\xee\x1b\x24\x91\x95\x08\xfe\x9b\x32\xf9\xc8\x17\xeb\xc0\x44\xf3\x0b\xd2\x1e\x97\xd0\xe5\x4f\x2a\xd2\x20\xa7\xeb\x8c\xac\x1a\x9f\x6f\xbf\x01\x00\x00\xff\xff\xcb\x92\xf9\x15\xd1\x00\x00\x00")

func regexMdBytes() ([]byte, error) {
	return bindataRead(
		_regexMd,
		"regex.md",
	)
}

func regexMd() (*asset, error) {
	bytes, err := regexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex.md", size: 209, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x4d, 0x6c, 0x6c, 0x23, 0xe3, 0xa6, 0xf2, 0x78, 0x83, 0xc, 0x54, 0x5f, 0xfc, 0xf2, 0x2b, 0x44, 0x19, 0xfb, 0x5a, 0x5, 0xd, 0xf5, 0xe, 0xd6, 0x86, 0x5e, 0x8e, 0xc, 0x88, 0x3d, 0x34}}
	return a, nil
}

var _sliceRuneConversionMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xb1\x4a\x03\x41\x10\x80\xe1\x7e\x9f\xe2\xef\x6c\xa2\xe9\x03\x16\x96\x3e\x83\x08\xbb\xec\x8d\x97\x81\x63\x46\xe6\x66\x13\x0e\xf1\xdd\xe5\xce\x22\xdd\xdf\xfc\xdf\x33\xef\x98\xa7\x76\x99\xd8\x7c\x3c\x85\xd0\xdd\x6e\x12\xa9\x36\xd3\x58\x33\xf6\x50\x4b\xa7\x51\x3f\x3e\x63\x98\x54\xd2\xc9\xab\x18\x8b\xfb\x37\x7e\x93\x40\xf3\x85\xb7\x9e\xa3\x2d\xcb\x76\x62\xac\xfb\x55\xa3\xd9\x2c\x95\xbb\xe6\xf5\x61\xf5\x66\x84\xe4\x08\x63\xc7\x56\x26\x0d\xe9\xb9\x6c\x97\x02\xb5\xd6\xd9\x0b\x7c\x79\xa0\x27\x82\xcb\x2b\x87\xc2\xdd\x63\xe2\xa7\x00\x9c\xcf\x04\xba\xd2\x0e\xa0\xc0\xef\xff\x59\xfe\x02\x00\x00\xff\xff\xb8\x31\x47\x2d\xce\x00\x00\x00")

func sliceRuneConversionMdBytes() ([]byte, error) {
	return bindataRead(
		_sliceRuneConversionMd,
		"slice-rune-conversion.md",
	)
}

func sliceRuneConversionMd() (*asset, error) {
	bytes, err := sliceRuneConversionMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "slice-rune-conversion.md", size: 206, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0x1f, 0xd5, 0x73, 0x94, 0x50, 0xc3, 0x2f, 0x1d, 0xcd, 0xbf, 0x24, 0xaa, 0xf6, 0xc4, 0xf5, 0x80, 0xb8, 0x34, 0x99, 0xcc, 0x4f, 0x40, 0x1c, 0xf3, 0xfd, 0x6e, 0x54, 0xa4, 0x92, 0xbb, 0xdc}}
	return a, nil
}

var _trySwitchMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\x31\x4e\xc4\x30\x10\x45\x7b\x4e\xf1\xbb\x05\x09\x27\xfd\xde\x80\x02\x9a\x2d\x11\x52\x26\xce\x24\x1e\xad\x33\xb6\x3c\x93\x8d\x72\x7b\x94\xa5\xa1\xfd\x5f\xef\xbd\x80\x8f\x19\x47\xd9\x2e\x13\xb2\xdc\x19\x5e\xe0\xed\x80\xf8\x3b\x36\x13\x5d\x40\x18\x6c\x17\x8f\x69\x80\xa8\x39\xd3\x84\x32\x9f\xeb\x4a\x75\xc0\x2e\x39\x43\x34\x36\x26\x63\x58\x65\x9e\x60\xb2\xa8\xcc\x12\x49\x3d\x1f\x10\x85\x27\x31\x54\x6a\x2e\x71\xcb\xd4\x10\xc9\xb8\xc3\x57\x71\xbe\xfe\x93\x9b\x5e\x1c\xca\x91\xcd\xa8\x49\x3e\x30\x93\x39\x37\x78\x22\x05\x61\xa5\x7a\xba\x28\xe7\x27\x6f\x1d\x6e\xcc\x57\x7c\xdf\x9e\x3c\x1e\xd6\xe1\x93\xea\xcf\x6b\x72\xaf\x76\xed\xfb\x44\x96\x5a\x89\x77\xf6\x2e\x96\xb5\x1f\x73\x59\xfa\x5a\xcc\xad\xff\x2b\x86\x87\x85\x95\x6a\xd8\x93\xc4\x14\xc4\x82\x27\x0e\x23\xbb\x73\x0b\x3b\x1d\xc1\x4b\x18\x1b\xe9\xf9\x69\x58\xca\xdb\xcb\x6f\x00\x00\x00\xff\xff\xe6\xe8\xe3\xd7\x2a\x01\x00\x00")

func trySwitchMdBytes() ([]byte, error) {
	return bindataRead(
		_trySwitchMd,
		"try-switch.md",
	)
}

func trySwitchMd() (*asset, error) {
	bytes, err := trySwitchMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "try-switch.md", size: 298, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x9f, 0x82, 0xe8, 0xb7, 0x98, 0xfe, 0x95, 0xd7, 0x68, 0x11, 0xec, 0x86, 0x64, 0x6b, 0x84, 0x4, 0xdb, 0x63, 0x3, 0x19, 0xbd, 0xca, 0x68, 0xae, 0x2a, 0x35, 0x37, 0x69, 0x73, 0x92, 0x98}}
	return a, nil
}

var _typeConversionMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x31\x6e\x84\x40\x0c\x46\xe1\x3e\xa7\xf8\x53\xd1\x24\x1c\x20\x1d\x52\x2e\xb1\x9d\x47\x8c\x61\x2c\x46\x36\x3b\xf6\x80\xb8\xfd\x8a\xdd\xf6\xe9\x7b\xbf\xf8\x37\x1d\x02\xd9\x90\xf4\x42\x5c\x3b\x63\x36\x3d\xb8\xb9\x98\x3a\x2e\xeb\xc8\x6f\x51\xd2\xc1\x08\xfb\xc6\xc3\x3a\x66\xeb\x35\xe3\xb4\xb6\xe1\x94\x28\x9f\x8f\x5a\x57\x26\x88\x7a\x70\xca\xb0\x05\xe4\xd1\x44\xd7\xbb\x21\x0a\x83\x16\x6b\x84\x6a\xb6\x8f\x98\x70\x73\x54\x09\x6e\xa9\xa2\x3b\x3b\x5c\x74\xad\x8c\x67\xb7\x60\xff\x41\x95\x8d\x11\x45\xfc\x0f\x34\x4c\x03\x8d\x5f\xaf\x00\x00\x00\xff\xff\x18\xef\xc2\xae\xaf\x00\x00\x00")

func typeConversionMdBytes() ([]byte, error) {
	return bindataRead(
		_typeConversionMd,
		"type-conversion.md",
	)
}

func typeConversionMd() (*asset, error) {
	bytes, err := typeConversionMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type-conversion.md", size: 175, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x21, 0xed, 0x55, 0x24, 0xfc, 0x6, 0x8b, 0x90, 0xd6, 0x5b, 0x78, 0x8c, 0x6, 0xe8, 0x72, 0x68, 0xc7, 0x35, 0x5a, 0x5d, 0x10, 0x74, 0x56, 0x7c, 0x59, 0x26, 0x22, 0xfc, 0x59, 0x1f, 0x6e, 0x45}}
	return a, nil
}

var _unicodeLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x3b\x0a\x42\x31\x10\x05\xd0\xde\x55\xdc\xc6\xd2\x07\x2e\x47\x44\xc8\x23\xb9\xc4\x81\x30\x13\xe6\x53\xb8\x7b\xb1\xb0\x3e\xe7\x86\x87\x15\xba\xd5\x1a\x48\xff\xa0\x42\x74\xa2\x95\x4a\xb7\xc1\xe3\xfa\xbc\xbf\xa2\x21\x0d\xce\xbd\xce\x4e\xb4\x48\x17\x9d\xf1\x27\xd1\x90\x41\xe4\x9b\x58\x66\xfb\x57\x45\xbb\xf3\x0c\x22\x36\x39\x8e\xcb\x37\x00\x00\xff\xff\x08\x4d\x41\x60\x64\x00\x00\x00")

func unicodeLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeLoopMd,
		"unicode-loop.md",
	)
}

func unicodeLoopMd() (*asset, error) {
	bytes, err := unicodeLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode-loop.md", size: 100, mode: os.FileMode(420), modTime: time.Unix(1542198423, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xd, 0x1e, 0x5e, 0xbc, 0xa5, 0x3c, 0xfe, 0xb4, 0xb3, 0x72, 0xf4, 0xb3, 0xb4, 0x5f, 0x67, 0xda, 0xe8, 0xa4, 0xa9, 0x42, 0xe9, 0x34, 0xb3, 0x84, 0x38, 0xda, 0x7e, 0x51, 0xe0, 0xd7, 0x41}}
	return a, nil
}

var _unicodeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x4e\x03\x41\x0c\x04\xd0\x3e\x5f\x31\x29\x50\x12\x29\x44\xe2\x2f\xa0\x46\x54\x08\xe9\xbc\xb7\xbe\x3b\x93\xdd\x75\x64\xfb\x40\xf9\x7b\xb4\x81\x14\xb4\xd6\xcc\xf8\x3d\xe2\x59\xbf\x41\x49\xd7\xc0\xea\xd2\x66\x0c\x6b\x93\x51\x33\x9f\x1e\xde\x9f\x3e\x7c\x80\x34\x97\xcc\x88\x85\x31\x4c\x6a\x03\x8a\xea\xa5\x5f\x83\x29\x43\x27\x0c\x1e\x26\x6d\xf6\x7b\x21\xf1\xa4\xf6\x5b\xe8\xd1\x13\x5e\x62\xe7\x98\xc8\x83\x0d\x7b\x99\x70\xd5\x15\x59\xdb\x2e\x90\xb8\x08\x7f\x31\x2a\x1f\x11\x76\x45\xe2\x36\x2e\x95\xec\xdc\x21\x12\xdb\xc3\x66\x03\x00\xfb\x57\xad\x1c\x52\xd9\x21\x81\x4a\x67\xf6\xdb\x7c\x67\x82\x50\x24\xa2\x30\x98\x5c\xd8\x10\x0a\xeb\xb2\xbf\x47\x23\x95\xf2\x9f\x78\x17\x2e\xd4\xf2\x11\xb1\xe8\x3a\x2f\x27\xbc\x39\xf7\xbc\x21\xb1\x07\x3e\xd7\x3c\x57\x6e\x71\x04\xb5\x0c\xe3\xca\x35\xb1\xdd\x86\x29\x49\x91\xe8\x56\x0a\xc7\x85\x6d\x52\xab\xd4\x46\xde\x1e\x36\x3f\x01\x00\x00\xff\xff\x92\x75\x58\xc0\x4e\x01\x00\x00")

func unicodeMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeMd,
		"unicode.md",
	)
}

func unicodeMd() (*asset, error) {
	bytes, err := unicodeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode.md", size: 334, mode: os.FileMode(420), modTime: time.Unix(1544124510, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x3f, 0x56, 0xbc, 0x8c, 0x3c, 0x9, 0xa6, 0xef, 0x73, 0xdd, 0x82, 0x4c, 0x23, 0x2d, 0x3a, 0x9c, 0xc5, 0x78, 0x4b, 0x54, 0xd5, 0x89, 0xa, 0xef, 0xa9, 0x66, 0x81, 0x74, 0x9f, 0x8, 0x56}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"challenge.md": challengeMd,

	"flatten-map.md": flattenMapMd,

	"go-routines.md": goRoutinesMd,

	"ifs-to-switch.md": ifsToSwitchMd,

	"loop-rune-not-byte.md": loopRuneNotByteMd,

	"maprune.md": mapruneMd,

	"move-map.md": moveMapMd,

	"regex.md": regexMd,

	"slice-rune-conversion.md": sliceRuneConversionMd,

	"try-switch.md": trySwitchMd,

	"type-conversion.md": typeConversionMd,

	"unicode-loop.md": unicodeLoopMd,

	"unicode.md": unicodeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"challenge.md":             &bintree{challengeMd, map[string]*bintree{}},
	"flatten-map.md":           &bintree{flattenMapMd, map[string]*bintree{}},
	"go-routines.md":           &bintree{goRoutinesMd, map[string]*bintree{}},
	"ifs-to-switch.md":         &bintree{ifsToSwitchMd, map[string]*bintree{}},
	"loop-rune-not-byte.md":    &bintree{loopRuneNotByteMd, map[string]*bintree{}},
	"maprune.md":               &bintree{mapruneMd, map[string]*bintree{}},
	"move-map.md":              &bintree{moveMapMd, map[string]*bintree{}},
	"regex.md":                 &bintree{regexMd, map[string]*bintree{}},
	"slice-rune-conversion.md": &bintree{sliceRuneConversionMd, map[string]*bintree{}},
	"try-switch.md":            &bintree{trySwitchMd, map[string]*bintree{}},
	"type-conversion.md":       &bintree{typeConversionMd, map[string]*bintree{}},
	"unicode-loop.md":          &bintree{unicodeLoopMd, map[string]*bintree{}},
	"unicode.md":               &bintree{unicodeMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
