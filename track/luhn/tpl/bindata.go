// Code generated by go-bindata. DO NOT EDIT.
// sources:
// mustcompile.md (168B)
// one-loop.md (1.862kB)
// regex-in-func.md (307B)
// regex-to-fast.md (1.884kB)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mustcompileMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x41\xb2\x82\x30\x10\x84\xe1\xfd\x3b\x45\xef\x78\x56\x21\x97\x70\xed\x8e\x03\x30\x86\x18\xba\x0c\x0c\x95\x99\x88\xdc\xde\x02\xb7\x5d\xfd\xfd\x57\xf4\x8a\xa0\xf3\xca\x1c\x21\x30\x17\x67\x40\x89\x29\x7e\x5a\xd0\x1b\x83\x20\xa9\x8e\xe0\x18\x05\xae\xa8\x16\x31\xdc\xab\xf9\xed\x87\xfe\x2f\x43\x87\x7e\xa2\x61\x63\xce\x08\x72\x1c\x7c\x8a\x58\x8b\xa6\x22\xf3\x61\x56\x59\x18\xc0\xe7\xb9\x9f\x6d\xd0\xc0\xe5\x2d\x99\x63\x0b\x53\xec\x5a\x9b\x9c\xf1\x5a\x74\x83\x3c\xb4\x3a\xe8\x28\x4c\x93\x43\x36\xd9\xbb\xbf\x6f\x00\x00\x00\xff\xff\xfa\x98\x2c\xcd\xa8\x00\x00\x00")

func mustcompileMdBytes() ([]byte, error) {
	return bindataRead(
		_mustcompileMd,
		"mustcompile.md",
	)
}

func mustcompileMd() (*asset, error) {
	bytes, err := mustcompileMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mustcompile.md", size: 168, mode: os.FileMode(420), modTime: time.Unix(1542541121, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xb2, 0x40, 0x36, 0x90, 0xb3, 0x55, 0x4e, 0x7b, 0xa1, 0xe1, 0x86, 0xd4, 0x8f, 0x22, 0xe9, 0x1a, 0x8f, 0x1e, 0x8c, 0x8a, 0xf2, 0x6e, 0x83, 0xf0, 0xfe, 0x6f, 0x3a, 0xd0, 0x94, 0x91, 0x52}}
	return a, nil
}

var _oneLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x55\x4f\x8f\xdb\xc6\x0f\xbd\xfb\x53\xbc\xe4\xe2\x5d\xc0\xd6\x6f\xf7\x77\xab\x93\x14\x48\x11\x14\xcd\x25\xb9\xb4\x08\x82\xa2\x80\x68\x89\xb6\xa6\x1e\x91\xc2\x0c\x65\xc5\x68\xfa\xdd\x0b\x8e\x64\xef\x26\xb9\xc9\xf2\x0c\xf9\xf8\xfe\x50\xab\xed\x76\xbb\xfa\xac\x63\x42\xd6\x38\x5a\x50\xc1\x14\xac\x43\x3f\x46\x0b\x43\x64\x44\xd5\x21\x23\x64\x24\xa6\x96\xf6\x91\x41\xd2\xc2\xd4\x28\xc6\x0b\x0e\x41\xb8\xc2\xfb\x03\x2e\x3a\x62\x22\x31\x98\x82\xce\x1a\xda\x72\x31\xc8\x11\x7a\xe6\x04\xeb\x18\xd9\x92\xff\xbe\x55\xb6\xd0\x73\xde\xa0\xe3\xc4\xeb\x0c\x42\xcb\x46\x21\x72\x0b\xfe\x32\x44\x12\x2a\x60\xf4\x00\x15\xc6\xa0\x39\x07\x6f\x3e\xd1\xc5\x5b\xb4\x8a\x60\xbb\xd5\xea\xb1\xc2\xaf\x21\x65\xdb\x20\x48\xa3\x69\xd0\x44\xc6\xa5\x9b\xa8\x6c\xdb\x70\x0c\x86\x8e\xa4\x8d\xde\x39\x88\x69\xf9\xaf\xa7\x20\x05\xdf\x6e\xb5\x02\x80\x2d\x3e\x75\xc1\x38\x0f\xd4\xf0\x0e\xd3\xed\xd9\xc7\xa6\x18\x75\xe2\x16\x41\x70\xa6\x18\xfc\x61\x18\x2d\x6f\x90\x15\x53\xc7\x82\x89\xc1\xd2\xe8\x28\xc6\xe9\xd9\xdd\x8d\xff\xd1\x90\x60\xcc\x8c\xba\x51\xb1\x20\x23\xd7\x0e\xfe\xef\xb1\x1f\xb0\x40\x11\xfe\x62\x08\xc6\xe9\x36\xae\xbf\x75\x6c\xd5\x15\xdb\x47\xeb\x38\x3d\xcd\x93\x77\x5e\xb9\x4e\x6c\x63\x12\x1c\x28\x66\xae\x11\x0e\xdf\xe2\xb0\x8e\x7b\x87\x7c\x2b\x86\xcf\x3a\x16\x38\xad\xf7\x25\x9b\x55\xae\x47\x09\x8d\xb6\x5c\xbd\xcf\xef\xbc\x76\x29\xe4\x52\x52\x62\x4c\x9a\x4e\x4e\x5b\x39\x99\x46\xe1\x5c\x15\xc2\x3f\xf9\x6f\xeb\x42\x7e\xce\x54\xd3\x91\x1c\xe7\xa1\x83\x58\xd2\x76\x6c\xb8\x05\x61\x48\xba\x8f\xdc\xef\x0a\x92\x20\x2d\x7f\x41\x1d\xea\xe7\x73\x3a\xc9\xa2\x86\x02\xdd\xfb\xbd\x6c\x34\x25\x6e\x2c\x5e\x5e\x82\xe4\x82\x5e\x13\x57\xf8\x34\xb3\xd9\x24\x76\x85\x09\xc2\x13\xce\x94\x42\xb1\x64\xbd\xcc\x5d\xe8\x3d\x31\x0f\xb0\x44\xcd\xc9\xdb\x74\x3a\xa1\xf7\x32\x33\x79\x98\x78\x7d\x66\x64\x66\xd9\x14\x27\x07\x69\x12\xf7\x2c\xae\x82\x1f\x1c\x8b\xaf\x9f\x51\x87\x3b\x3a\x2c\x94\x3e\xd7\xd1\xef\x2e\x22\xd4\x68\x28\x73\xbe\xaf\xf0\x4e\x65\x6d\x38\x68\x3a\x72\x49\x42\xd3\x71\x73\xc2\xd3\xfd\x79\xde\xc3\x0d\x2f\x7e\xc6\x63\xc1\x9c\x99\x17\x0d\x8f\x6a\x65\x62\x57\x49\x8a\xf7\x0b\xf0\x99\xfa\xb7\xa2\xc5\x0c\x0b\xab\xdf\xb1\x3d\xcd\xc2\xf0\x8f\xba\x38\xc7\xb3\xea\x85\xc5\x42\x37\xc5\x66\x8c\xd7\xb4\xd4\x91\xe5\x68\x5d\x8d\x3d\x1f\xe6\xe6\x0b\x58\x92\xcb\xcc\xff\x2f\xe3\xf5\x36\x44\xa7\xc5\xb2\x8c\x3d\x35\xa7\x89\x52\x9b\x7f\xc8\x79\x0e\xd2\xb0\x5f\xe9\xe8\xec\x4b\xa3\xa8\x3f\xb0\xb4\xce\xf5\x9c\xcc\x85\x85\x1d\xea\x83\x26\x04\xec\xde\x20\xb2\xdc\x65\x4b\xf7\xd8\xe2\xf1\x15\x1e\xf0\xfa\x0d\xc2\x2b\x84\xed\x16\xff\x54\x55\xf5\x6f\xbd\xa4\xe2\xf7\x6e\xe1\xa5\x18\x73\x1e\x8f\x05\x75\xf2\x1a\xfe\xca\x8b\xfc\x19\xfe\xba\xaf\x9f\x9c\x6f\x9c\xad\x00\x3c\x53\x1c\xd9\xbd\xf1\x8d\x6d\x5c\x82\xa9\xe3\xc2\xaf\xa6\x62\x49\x3f\xdc\x8c\x29\x3d\x21\xce\x9d\x8e\xb1\xc5\x9e\xd1\xea\xb8\x8f\xdc\x56\xab\xd5\x5b\x9b\xd3\x30\x68\x90\xf2\x28\xc7\x7c\x3d\xe8\x19\x02\x1d\x7d\xdf\xb8\x61\xf6\x3c\x7b\xb1\xac\x3e\x1c\x28\x1b\xa7\x17\xab\xd5\x16\x1f\x85\x11\x29\x2f\xd7\x77\x57\xb7\x27\x1e\xa2\xab\x58\xbf\xf8\x2e\xa8\x77\xe9\xbe\x5e\x22\x9c\xf0\x1a\xeb\x87\x35\xbe\x7e\x85\xfb\x69\xfd\xd3\x7a\x36\xa7\x7b\x89\x0d\xb4\x58\xa6\xf8\x9c\xb2\x1b\x06\x79\x60\x6e\x2b\xdc\xfd\xa6\x13\x9f\x39\x6d\xdc\x0c\x65\x43\xfe\xb8\x0f\x7a\x3a\x71\xf6\x68\xe4\x18\x8e\x9d\xc5\x0b\x9a\xc8\x94\xca\xaa\x23\x5b\x67\x1c\xb5\x2c\x79\xa9\xf0\x47\x2e\xd9\xd9\x2c\x5f\x8a\x10\x83\x5d\x5c\x99\xe2\xe6\xd0\x0f\x9a\xac\x7c\x20\xdc\xd7\x33\x82\x7b\x17\xf3\x83\x9a\x2f\xdd\xdb\x52\xc9\xc6\xc3\xd5\x69\x6d\xd2\x61\x56\x41\xe5\xcc\x29\xfb\x8a\x34\x45\xed\x0a\xd7\x15\xde\x5b\x21\x38\xcf\xb6\xa3\x9e\x17\x4a\xf6\x17\x63\x77\xca\x07\x9d\xbc\xd2\x93\x68\x4b\xac\x29\x31\x15\xfd\xff\xff\xb0\x7d\x7c\x78\x80\xe4\xff\xe9\x50\x63\xb6\xe7\x3c\x4e\x39\xd7\x51\x6a\x27\x5a\xe2\xb0\x67\x69\xba\x9e\xbc\x9d\xbf\x4a\xa3\xa7\xb3\x5a\x95\x0f\xe8\x7f\x01\x00\x00\xff\xff\x03\xfa\x45\xac\x46\x07\x00\x00")

func oneLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_oneLoopMd,
		"one-loop.md",
	)
}

func oneLoopMd() (*asset, error) {
	bytes, err := oneLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "one-loop.md", size: 1862, mode: os.FileMode(420), modTime: time.Unix(1544124510, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x75, 0x7e, 0xb6, 0x41, 0x15, 0x8b, 0xc7, 0x50, 0x9d, 0x19, 0x54, 0x59, 0xff, 0x8c, 0x13, 0xc4, 0x2d, 0xed, 0x61, 0x39, 0x42, 0x9f, 0xc4, 0x1d, 0xb0, 0x64, 0x33, 0xf5, 0xa0, 0x7, 0xe8}}
	return a, nil
}

var _regexInFuncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x3b\x72\xc3\x30\x0c\x84\xe1\x3e\xa7\xd8\xce\x8d\xa3\x63\x24\x93\xd6\x37\xa0\xa8\x25\x8d\x31\x05\x68\x40\xd0\xb6\x6e\x9f\x51\x1e\x93\xf4\xff\x7e\xfb\x8a\x0b\xeb\x68\xc9\xc1\xe7\xe6\xec\x5d\x4c\x3b\x44\xf1\x6e\x78\x98\xdf\x90\xd0\x24\xa2\x11\x8b\x94\x42\xa7\x46\xdb\x51\xdc\x56\x58\x5c\xe9\x68\x49\xeb\x48\x95\x7d\xc2\x9b\x39\x66\x46\xd0\xb1\xd1\x8b\xf9\x9a\x34\xf3\x8c\x04\x67\xe5\x13\xd2\x91\x6d\xdd\xa4\x71\xc1\xcc\x62\x4e\x48\x9c\x3a\x46\xe7\x32\xe1\x22\xf5\x1a\x50\x7b\x9c\xb1\xdb\x38\x39\x7f\x62\xd1\x8a\xb8\xf2\xd7\xd0\x2e\x0b\x8f\xc2\x51\x86\xe6\x10\xd3\x33\xe6\x11\x90\x80\x69\xdb\xa1\xe4\xd2\x11\x86\x99\x7f\x77\xa6\x99\x13\x3e\xca\x7f\xa9\xa3\x47\x0a\xc9\x07\x86\x9c\x14\xab\xdd\xf9\x15\x7c\xcf\xd2\x61\x1f\xd0\x96\xf2\x2d\x55\xa2\xf1\xce\x36\xbd\x7c\x06\x00\x00\xff\xff\x5d\x1e\x2b\xac\x33\x01\x00\x00")

func regexInFuncMdBytes() ([]byte, error) {
	return bindataRead(
		_regexInFuncMd,
		"regex-in-func.md",
	)
}

func regexInFuncMd() (*asset, error) {
	bytes, err := regexInFuncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-in-func.md", size: 307, mode: os.FileMode(420), modTime: time.Unix(1543061558, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0xbc, 0x15, 0x8, 0x47, 0xce, 0xaa, 0xd3, 0x30, 0xee, 0xc5, 0x40, 0x2b, 0x17, 0xcb, 0x79, 0x80, 0x6f, 0xc0, 0x5e, 0xd4, 0x9c, 0x8a, 0x3e, 0xb8, 0x5c, 0xcb, 0x6a, 0xd1, 0xca, 0x1a, 0x6c}}
	return a, nil
}

var _regexToFastMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x51\x8b\xdc\x46\x13\x7c\xdf\x5f\x51\xf6\xcb\xde\xc1\x4a\xdf\xdd\xf7\x96\xb5\x1d\x70\x30\xc1\x7e\xb1\x21\x24\x1c\x26\x04\x34\x92\x5a\xd2\xb0\xb3\xdd\x62\xa6\xb5\xba\x25\xce\x7f\x0f\x3d\xd2\xde\x9e\x7d\x79\x5a\x34\x4c\xf7\x54\x57\x55\xd7\x6e\x8a\xa2\xd8\x7c\x95\x29\x22\x49\x98\xd4\x0b\x63\xf6\x3a\xa0\x8a\xd4\xd3\xe3\x58\xc1\x27\x9c\x28\x9e\x11\xc9\xb5\xae\x0e\x04\xc7\x2d\x54\xd4\x85\x70\x46\xe7\x99\x4a\xfc\x46\xfd\x14\x5c\x04\x3d\x8e\x91\x52\xf2\xc2\x09\x2e\xd2\x52\x37\xca\x4c\xb1\x9b\xc2\x0e\xf5\xa4\x98\xd2\x94\x0b\x53\x90\xb9\xc4\xa7\x0e\x3a\x78\xee\x13\x1a\xc7\xa8\x09\xad\x30\xe1\xe8\x78\xb9\x94\x81\x44\x72\x49\x38\xbf\x4c\x5d\x27\x51\xa1\x03\x81\x1e\x35\x3a\xcc\x12\x0f\x06\x50\x3a\x25\xb6\x2f\x1d\xe0\xb5\xc4\x47\x8a\x64\xe7\x0e\x49\x69\x2c\xea\x73\x61\xbf\xe8\x27\xdf\x12\x54\xe0\xd0\xb9\xa4\x74\x9d\x79\xbf\xd9\xdc\x97\xf8\xd5\xc7\xa4\x3b\x50\xf0\x47\xcf\x4e\x29\xbf\x14\x5f\x0c\x87\xfa\x8c\xa3\x9c\x3c\xf7\xf9\x42\x90\xde\x37\xf0\xac\xb2\x7e\xca\xb8\xdf\x6c\x00\xa0\xc0\xc3\xe0\x95\xd2\xe8\x9a\x05\x4e\x08\x32\x53\xbb\x43\x12\xcc\x94\x67\xae\x1a\x61\xf5\x3c\x51\x05\xdf\xd9\x21\x71\x23\x13\x1b\xb6\xf9\x59\x2d\x3f\xb5\x2e\x2f\xad\xbf\xe8\x40\x11\x2c\x5c\xb4\xbe\xf7\x9a\xf6\x56\x5d\x45\xd2\x29\x32\x3a\x17\xd2\x7f\xb4\xd4\x81\x8e\xdf\x35\xc3\x57\x99\x32\x8e\xd6\xc0\x3b\x5d\xb5\x9f\xd8\x37\xd2\x52\xf9\x29\x7d\xb0\xde\xb9\xd1\x59\xa6\x2c\xaa\x71\x6e\xa3\x2f\xe2\x4c\x4c\xa9\xcc\xe4\x3d\xd8\xb7\x0e\x3e\x3d\x07\xde\x0c\x8e\x7b\xda\x19\x0a\xcf\x1a\xa5\x9d\x1a\x6a\xe1\x30\x46\xa9\x03\x1d\xf7\x19\x89\xe7\x96\x1e\x51\xf9\x0a\xd2\x3d\x41\x33\xbe\x58\x14\x19\xba\xbd\xf7\xba\x91\x18\xa9\xd1\x70\x7e\x0d\xc7\xa6\x40\xa4\x12\x0f\x0b\x8d\x4d\x24\xd3\xcb\x81\x69\xc6\xc9\x45\x9f\xfd\x52\xad\x73\x57\xa6\xf9\x81\x68\x84\x46\xd7\x1c\xec\x99\x41\x66\xf3\xd9\x19\x0b\x79\x98\x69\x7b\x22\x24\x22\xde\x65\x83\x7b\x6e\x22\x1d\x89\x15\x5e\xaf\x86\x7c\x46\x1d\x6e\x5c\xb7\x52\xfa\x5c\x44\xab\x5d\x45\xa8\xd0\xb8\x44\xe9\xb6\xc4\x07\xe1\xad\xa2\x93\xd8\x93\x1a\x94\x66\xa0\xe6\x80\x6b\xfd\x32\x6f\xf7\x84\x17\x3f\xe3\x3e\x63\x4e\x44\xab\x86\xbd\x68\x9e\xd8\x54\x62\xd8\x96\x64\xe0\x0b\xf5\xef\x59\xb2\x19\x56\x56\x7f\x60\x7b\x5e\x84\xa1\x97\xba\x18\xc7\x8b\xea\x99\xc5\x4c\xb7\x0b\xcd\x14\x2e\xde\xaf\x02\x71\xaf\x43\x85\x9a\xba\xe5\xf1\x15\xac\xe3\xf3\xc2\xff\x2f\xd3\xa5\x1a\x2c\x33\xbc\x52\xb4\xe2\xda\x35\x87\xd9\xc5\x36\x41\x4e\xeb\x90\x49\xa3\xc9\x98\x3c\x37\x64\x25\x83\x3b\x59\x96\x64\xf5\x47\xe2\xd6\xb8\xce\x33\x61\x65\x61\x8f\xaa\x93\x08\x8f\xfd\x3b\x04\xe2\x9b\xa4\xf1\x16\x05\xee\xdf\xe0\x0e\x6f\xdf\xc1\xbf\x81\x2f\x0a\xfc\x5d\x96\xe5\x3f\xd5\xba\x15\xbf\x0f\x2b\x2f\xd9\x98\xcb\x78\xc4\xa8\xa2\xf5\xb0\x23\x6b\xf2\xa7\xff\xeb\xb6\xba\x3a\x5f\x29\x2d\x91\x72\x72\x61\x22\xf3\xc6\x77\xb6\x31\x09\xe6\x81\x32\xbf\x12\xb3\x25\xed\x72\x33\xc5\x78\x45\x9c\x06\x99\x42\xbb\x04\xd8\x54\x07\x6a\xcb\xcd\xe6\xbd\x2e\xdb\x30\x8a\x67\xbd\xc4\xdc\x7a\x31\xe7\x96\xeb\x9d\xe7\x6c\x98\x9a\x16\x2f\xaa\x3f\x52\x5a\xa3\xe9\xd5\x66\x53\xe0\x0b\x13\x82\x4b\x6b\xf9\xfe\xe2\xf6\x48\x63\x30\x15\xab\x57\x3f\x2c\xea\x4d\xbc\xad\x2e\xf1\x8d\xb7\xd8\xde\x6d\xf1\xed\x1b\xcc\x4f\xdb\x9f\xb6\x8b\x39\xcd\x4b\xa4\x70\xab\x65\xb2\xcf\x5d\xca\x11\x93\x46\xa2\xb6\xc4\xcd\x47\x99\xe9\x44\x71\x67\x66\x08\xa6\xd9\xcb\x3c\x38\xba\x03\x25\x5b\x8d\x14\x7c\x3f\x68\x38\xa3\x09\xe4\x62\x4e\x2d\xa7\xdb\x84\x5e\xac\x50\xb8\xc4\x1f\x4b\xe2\xef\xd6\x3f\x10\x1f\xbc\x9e\x4d\x99\xec\x66\x7f\x1c\x25\xaa\xcb\x04\xb9\x0b\x82\x5b\x13\xf3\xb3\x28\xed\x2f\xde\xf5\x29\x07\xf9\xc5\x69\x6d\x94\x71\x51\x41\xf8\x44\x31\x67\xb2\x0a\x2a\x53\xb8\x2a\xf1\x49\x33\xc1\x69\xb1\x9d\x3b\xd2\x4a\x49\x7d\x56\x32\xa7\x7c\x96\xd9\x3a\x5d\x45\x5b\xd7\xda\x45\x72\x59\xff\xff\xdf\x15\xf7\x77\x77\xe0\xf4\x3f\x19\x2b\x2c\xf6\x5c\xc6\xc9\xf7\x06\x17\xdb\xd9\xad\xeb\x50\x13\x37\xc3\xd1\xd9\x73\x76\x14\x27\xdb\xce\x72\x93\xff\x56\xff\x0d\x00\x00\xff\xff\x52\x85\xc2\xdf\x5c\x07\x00\x00")

func regexToFastMdBytes() ([]byte, error) {
	return bindataRead(
		_regexToFastMd,
		"regex-to-fast.md",
	)
}

func regexToFastMd() (*asset, error) {
	bytes, err := regexToFastMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-to-fast.md", size: 1884, mode: os.FileMode(420), modTime: time.Unix(1544124510, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x57, 0x22, 0xdc, 0x17, 0x82, 0x98, 0x30, 0x72, 0x6d, 0xf3, 0xef, 0xaa, 0xb3, 0xef, 0x56, 0x82, 0x5d, 0x8c, 0x8, 0x92, 0x8d, 0x6a, 0x14, 0xd8, 0xfc, 0x71, 0xf0, 0xc5, 0x36, 0xd0, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mustcompile.md": mustcompileMd,

	"one-loop.md": oneLoopMd,

	"regex-in-func.md": regexInFuncMd,

	"regex-to-fast.md": regexToFastMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mustcompile.md":   &bintree{mustcompileMd, map[string]*bintree{}},
	"one-loop.md":      &bintree{oneLoopMd, map[string]*bintree{}},
	"regex-in-func.md": &bintree{regexInFuncMd, map[string]*bintree{}},
	"regex-to-fast.md": &bintree{regexToFastMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
