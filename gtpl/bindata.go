// Code generated for package gtpl by go-bindata DO NOT EDIT. (@generated)
// sources:
// response/comment.md
// response/greeting.md
// response/improvement.md
// response/newcomer_greeting.md
// response/praise.md
// response/questions.md
// response/tip.md
// response/todo.md
// tips/advanced_tests.md
// tips/append.md
// tips/awesome_go.md
// tips/building.md
// tips/channels.md
// tips/channels2.md
// tips/community.md
// tips/concurrency.md
// tips/concurrencypatterns.md
// tips/concurrencypatterns2.md
// tips/conduct.md
// tips/context.md
// tips/debugger.md
// tips/effective.md
// tips/errors.md
// tips/faq.md
// tips/font.md
// tips/go-perfbook.md
// tips/gophercises.md
// tips/gophervids.md
// tips/graceful_errors.md
// tips/idiomatic.md
// tips/interface.md
// tips/magic.md
// tips/modules.md
// tips/mutexes.md
// tips/nil.md
// tips/performance.md
// tips/pointers.md
// tips/practical.md
// tips/profiling.md
// tips/proverbs.md
// tips/review.md
// tips/rubyists.md
// tips/servers.md
// tips/shades.md
// tips/simplicity.md
// tips/solid.md
// tips/tdd.md
// tips/tests.md
// tips/tooling.md
// tips/tour.md
// tools/compile.md
// tools/not_formatted.md
// tools/not_linted.md
// tools/not_vetted.md
// tools/pass_tests.md
// tools/race_condition.md
// topic/benchmarking.md
// topic/hints.md
// topic/pprof-allocations.md
// topic/regex.md
package gtpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _responseCommentMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x52\x2d\x56\xc8\xcf\x53\x28\xc9\xc8\x2c\x56\x48\xad\x48\x2d\x4a\xce\x2c\x4e\xb5\x02\x04\x00\x00\xff\xff\x8f\x03\x06\xcf\x15\x00\x00\x00")

func responseCommentMdBytes() ([]byte, error) {
	return bindataRead(
		_responseCommentMd,
		"response/comment.md",
	)
}

func responseCommentMd() (*asset, error) {
	bytes, err := responseCommentMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/comment.md", size: 21, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseGreetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xc8\x54\x50\x2d\x56\x04\x04\x00\x00\xff\xff\xc0\x2d\x24\x10\x06\x00\x00\x00")

func responseGreetingMdBytes() ([]byte, error) {
	return bindataRead(
		_responseGreetingMd,
		"response/greeting.md",
	)
}

func responseGreetingMd() (*asset, error) {
	bytes, err := responseGreetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/greeting.md", size: 6, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseImprovementMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xf2\x48\x2d\x4a\x55\x50\x2d\x56\x48\xcb\x2f\x52\x48\x2b\x2d\x2a\xc9\x48\x2d\x52\xc8\xcc\x2d\x28\xca\x2f\x4b\xcd\x4d\xcd\x2b\xb1\x02\x04\x00\x00\xff\xff\x8b\x2d\xa2\x17\x21\x00\x00\x00")

func responseImprovementMdBytes() ([]byte, error) {
	return bindataRead(
		_responseImprovementMd,
		"response/improvement.md",
	)
}

func responseImprovementMd() (*asset, error) {
	bytes, err := responseImprovementMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/improvement.md", size: 33, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseNewcomer_greetingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\x4f\xcd\x49\xce\xcf\x4d\x55\x28\xc9\x57\x70\xad\x48\x2d\x4a\xce\x2c\xce\x55\x48\xcc\x4b\x51\x28\x47\x88\xe7\xa4\x26\x16\xe5\x65\xe6\xa5\x2b\xb8\xe7\x2b\x2a\xf8\x65\x26\x83\x05\x73\x53\x53\x4b\x14\x2a\xf3\x4b\x15\x01\x01\x00\x00\xff\xff\xd0\x93\xfd\x53\x42\x00\x00\x00")

func responseNewcomer_greetingMdBytes() ([]byte, error) {
	return bindataRead(
		_responseNewcomer_greetingMd,
		"response/newcomer_greeting.md",
	)
}

func responseNewcomer_greetingMd() (*asset, error) {
	bytes, err := responseNewcomer_greetingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/newcomer_greeting.md", size: 66, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responsePraiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x0a\xc9\xc8\x2c\x56\xc8\xc9\xcf\xcf\x2e\x56\x50\x2d\x56\x04\x04\x00\x00\xff\xff\x8c\xda\x01\x83\x0f\x00\x00\x00")

func responsePraiseMdBytes() ([]byte, error) {
	return bindataRead(
		_responsePraiseMd,
		"response/praise.md",
	)
}

func responsePraiseMd() (*asset, error) {
	bytes, err := responsePraiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/praise.md", size: 15, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseQuestionsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcb\x4b\x0a\x80\x20\x00\x04\xd0\x7d\xa7\x98\x56\xed\x3a\x46\xd0\x31\x84\x46\x14\xcd\x29\xbf\x74\xfb\xa8\xfd\x7b\xd3\x46\x46\xd8\x4c\xa2\x0a\xa6\x04\x78\x8b\x47\x0d\xce\x74\xe2\x6e\x2c\xd5\x2b\x15\x28\x63\x98\x54\x3f\x14\x92\x06\x4e\x65\xae\xd8\x97\x03\x51\xfd\xbf\x8e\xf1\x9a\xdf\x00\x00\x00\xff\xff\x93\x42\xc4\x70\x4f\x00\x00\x00")

func responseQuestionsMdBytes() ([]byte, error) {
	return bindataRead(
		_responseQuestionsMd,
		"response/questions.md",
	)
}

func responseQuestionsMd() (*asset, error) {
	bytes, err := responseQuestionsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/questions.md", size: 79, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseTipMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xb1\x6d\xc3\x40\x0c\x05\xd0\x5e\x53\xfc\x4e\x4d\x90\x01\xb2\x40\x92\x31\x64\xdd\xf7\x1d\x61\x8a\x34\x48\xca\xb2\xb6\x37\xa0\xee\x55\x6f\xfa\x63\x70\x4e\xa4\x6f\xac\x21\xd6\x71\xfa\x8e\x4d\xfa\x28\xdc\xc5\x1a\xc4\x8a\xc1\x2c\xb1\xfe\x8d\xff\x9a\x13\xe6\x05\xe3\xca\xcc\x25\x44\x4f\x04\x75\x29\x36\x94\xa3\x86\x24\xf8\x66\xac\x92\xfc\xc2\x6d\x2f\x48\xe1\x10\x55\x0c\xea\xf3\xba\x1b\x5f\x54\xbf\x1c\xe8\x34\xc6\xa2\xf8\x75\x3c\xcc\x0f\x65\xeb\xfc\x99\x3e\x01\x00\x00\xff\xff\x9f\x0e\x2f\x32\x95\x00\x00\x00")

func responseTipMdBytes() ([]byte, error) {
	return bindataRead(
		_responseTipMd,
		"response/tip.md",
	)
}

func responseTipMd() (*asset, error) {
	bytes, err := responseTipMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/tip.md", size: 149, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _responseTodoMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xbb\x0d\x84\x30\x10\x45\xd1\x7c\xab\xb8\xc9\xd6\x41\x40\x44\x19\x23\x30\xd8\x62\xe4\x67\xe1\x0f\xa2\x7b\x24\xf2\xf3\x9b\xd5\x7d\xe3\x51\x27\xda\x08\x18\x2e\x9d\x58\xa3\xc5\xc0\x2e\x77\xdd\x29\x1f\xfc\x2b\x55\x2c\xac\x96\xb1\x52\x2e\x8d\xf0\x89\x2a\xef\x2d\x29\x4f\x6f\x00\x00\x00\xff\xff\xf1\x50\x3a\x1d\x49\x00\x00\x00")

func responseTodoMdBytes() ([]byte, error) {
	return bindataRead(
		_responseTodoMd,
		"response/todo.md",
	)
}

func responseTodoMd() (*asset, error) {
	bytes, err := responseTodoMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "response/todo.md", size: 73, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsAdvanced_testsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\xb1\x4e\x2b\x31\x10\xec\xdf\x57\x4c\x97\x87\x74\x24\xa2\xa5\x41\x14\x11\x34\x88\x06\x09\x21\x44\xb1\xe7\xdb\x9c\xad\xf8\xbc\x87\x77\x1d\x73\x7c\x3d\x8a\x43\x52\xd0\x8d\x66\x47\xb3\x33\x73\x8d\xe7\x84\xed\x17\x67\x17\x74\xea\x50\x79\x95\x19\x14\x2b\x2d\x8a\x9a\x83\x85\x34\xc2\xc9\xc0\x30\xc1\x44\x7b\x86\xb1\x9a\x62\x26\xd5\x0e\x7d\x31\x54\x4f\x06\xea\xe5\x08\x7f\xf5\xe6\xcf\x32\xf3\x3c\x29\xc7\x03\xeb\x1d\x5e\x3d\x27\x2c\x52\x50\x25\xef\x21\x0d\x67\x48\x4d\x98\xb3\x8c\x99\x26\xed\xda\x59\xbd\x94\x38\x34\xb3\xb3\xcd\x4e\x72\xb3\xea\x40\x69\xc0\x23\xa9\x0f\x4e\xf2\xbc\x52\x3c\x05\x73\x9e\x63\x3c\x91\x93\x98\xc0\x93\x62\x0c\x07\x4e\x20\x8c\x99\xc9\x60\x14\xdb\xc3\xf7\xfb\xe1\x40\xc9\xf1\x80\x17\xd6\x96\xb4\x06\xf3\x78\x90\x8f\xff\xde\x6c\xd6\xdb\xcd\x66\x91\x62\x65\xdd\xf3\x66\xd1\xef\x65\xdc\xdf\xb8\x79\xeb\xae\xd6\x78\x93\xb2\x8a\x11\x91\x29\x27\xa8\x4c\x8c\x59\x2a\xe7\x5d\x89\x30\x76\x3e\x85\xcf\xc2\x8a\x24\x06\x49\x71\x69\x79\x2f\x63\x1c\x1b\x9c\xa6\xfa\x4b\x53\x1f\xf9\x52\x7e\xfd\xef\x27\x00\x00\xff\xff\x7f\xa8\xc3\xf3\x8b\x01\x00\x00")

func tipsAdvanced_testsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsAdvanced_testsMd,
		"tips/advanced_tests.md",
	)
}

func tipsAdvanced_testsMd() (*asset, error) {
	bytes, err := tipsAdvanced_testsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/advanced_tests.md", size: 395, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsAppendMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\xb1\x6e\xf3\x30\x0c\x04\xe0\xfd\x7f\x8a\xdb\x92\x00\xf9\x9d\x3d\x5b\xa7\xbc\x40\xb7\xa0\x40\x58\x99\x92\x89\xca\xa4\x20\xca\x48\xfd\xf6\x85\x94\xae\x1d\x25\xdc\x1d\xbf\xff\x78\x5f\x18\x16\xa3\x04\xa1\x8c\xfb\xcd\xf0\x99\x2d\x7d\x1c\x97\xd6\x8a\x5f\x2f\x97\xfe\x9a\x92\x65\xd2\x34\x59\x4d\x27\x88\x23\x6e\x39\xc3\x22\x22\x79\x10\xa5\x26\x9a\x40\x3a\x63\x73\x8e\x5b\x06\xbb\xd3\xee\x30\x45\x64\x6a\x5b\x65\xef\xe1\x9b\x4d\xb8\xbf\xd5\x4a\xbb\x9f\xe1\x59\x02\x3b\x8e\xbd\xe5\xad\x8a\x26\x3f\x5d\x07\x65\xe5\xb0\x90\x4a\x18\x9d\x03\x95\xc2\x3a\x1f\xfe\xe4\x5c\x5e\x43\x43\x45\x28\x54\x9b\x84\x2d\x53\xcd\x3b\x92\xd9\x0c\x53\x3e\x83\xbf\x4b\x26\xd1\xae\x5c\xec\x09\x1a\x86\x01\xfe\x65\x3c\xad\x7e\x41\x14\x37\x3b\x8f\xef\x9e\x7a\xbc\x4e\x1f\x4f\x8f\xbe\x2d\x6b\xc9\xbc\xb2\x36\x9e\xa7\x7f\x3f\x01\x00\x00\xff\xff\x13\xfa\xee\xe6\x34\x01\x00\x00")

func tipsAppendMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsAppendMd,
		"tips/append.md",
	)
}

func tipsAppendMd() (*asset, error) {
	bytes, err := tipsAppendMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/append.md", size: 308, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsAwesome_goMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\x31\x8e\xdc\x30\x0c\x45\xfb\x9c\xe2\x97\x09\xe0\xb1\xfb\xa4\x0e\x72\x84\x14\x41\x0a\x8e\x44\x5b\x84\x25\xd1\x2b\x52\xe3\xf5\xed\x17\x32\x16\xd8\x8a\x00\xf1\x48\xfe\xc7\x07\xfe\x8a\x27\x14\xc9\x59\xb4\x1a\x74\xc5\x1f\xc5\xd1\x74\x6b\x54\x0a\x37\x03\x35\xed\x35\xc2\x13\xe3\xd4\x96\xe3\x34\x80\x44\x06\xc2\x8b\xcc\xc1\x41\xed\x32\xe7\x32\x66\x5d\x35\x1b\xa8\x46\x1c\x14\x76\xda\xd8\x7e\xc1\x14\xa5\x87\x34\xaa\x27\x72\x88\x23\x50\xc5\x93\x11\x65\x5d\x25\xf4\xec\x70\x45\x48\xaa\xc6\xf7\x9d\x26\x5b\x72\x68\x65\xac\xda\x70\x69\x6f\x70\xb2\x7d\xc6\x3f\x3a\xd9\xb4\xf0\x63\xd3\xff\xdf\x93\xfb\x61\x3f\x97\x65\x13\x4f\xfd\x39\x07\x2d\x0b\xbd\x38\x4b\xd5\xe5\x0b\xfb\x01\x19\x49\x43\x6f\xe4\x1c\x11\x34\x67\x0e\x2e\x5a\x47\xda\x4f\x6c\x08\xad\x8d\x0a\x9f\xda\x76\x9b\x90\xe5\xd9\xa8\x09\xdb\x74\x9b\x98\xae\x7e\x52\xe3\x19\xbf\x5f\xdc\x2e\x4f\x52\xb7\xb1\x35\xc9\x96\x1e\x6f\x9d\xb2\xf8\x75\x83\xfd\x18\x1e\x91\x9c\x27\x14\xda\x6f\xcc\xc1\x64\xd7\xe8\xaf\x52\x23\xf8\x9d\x82\xe7\x0b\xe7\x78\xc4\xa5\x1d\x95\x39\xce\xdf\x3e\x02\x00\x00\xff\xff\xa2\x3f\x1f\x70\x86\x01\x00\x00")

func tipsAwesome_goMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsAwesome_goMd,
		"tips/awesome_go.md",
	)
}

func tipsAwesome_goMd() (*asset, error) {
	bytes, err := tipsAwesome_goMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/awesome_go.md", size: 390, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsBuildingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x4a\x33\x41\x10\x84\xef\xff\x53\xd4\x2d\xbf\x10\x37\x37\x91\x88\x88\x17\xd7\xbb\x0a\x82\x78\x98\xcc\x74\x76\xda\xcc\x76\x2f\xd3\x3d\x59\xe3\xd3\xcb\xee\xc9\x53\x43\x17\x7c\xf5\x51\xd7\xe8\x15\x89\x93\x6c\x1c\x5f\xcd\x1c\x36\x55\x96\x01\x2c\xae\xa0\x6f\x36\x27\x89\x74\x07\x76\x24\xb2\x48\x92\x0c\xc7\xaa\x23\x02\x8a\xca\x80\xcc\xe6\x5a\x2f\xd0\x23\xa2\x8e\x53\x73\xaa\x28\x41\x86\x16\x06\x32\x04\x49\x88\x2a\x91\x26\xb7\x0e\x2f\x4e\x67\xc2\x53\x0d\x12\x39\x6c\x0c\x1e\xca\x09\x1f\xbd\xee\x71\x68\x5c\xd2\x52\xab\x02\xcf\x04\xcb\xda\x4a\xa2\x6a\x0b\x77\xe0\x20\x6e\x9f\xff\xb3\xfb\x64\xfb\xdd\x6e\x9e\xe7\xee\xa2\xcd\xdb\x81\xba\xa8\xe3\x6e\x0e\x1e\xf3\xc3\xf9\xde\xde\x6f\xeb\xcd\xcf\xe3\xeb\x73\xff\x76\x05\x6d\x5e\x58\xc8\x56\xdc\x1f\xc9\x5e\xb7\xeb\x6b\x22\x9d\x0a\xe1\x40\x99\x25\x81\x7d\xbb\xba\x2e\x49\x22\xe3\x41\x90\x28\xb2\xb1\x8a\x61\xce\x1c\x33\xc6\x70\xa2\x65\x85\x39\x07\x5f\x2e\x5b\xf7\xef\x37\x00\x00\xff\xff\x17\x6e\x3c\x8e\x3d\x01\x00\x00")

func tipsBuildingMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsBuildingMd,
		"tips/building.md",
	)
}

func tipsBuildingMd() (*asset, error) {
	bytes, err := tipsBuildingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/building.md", size: 317, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsChannelsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x50\xbb\x6e\x22\x51\x0c\xed\xf7\x2b\x4e\xb7\xbb\x12\x8f\x26\x15\x25\x44\x4a\x41\x4b\x95\x28\x85\x87\x31\x73\x2d\x1c\xdf\x91\xed\x0b\xb9\xf9\xfa\x68\x90\x68\xcf\x43\xe7\xb1\xc6\xa1\x90\x19\x6b\x80\x6c\xc4\x54\xbd\xb6\x14\xe3\x00\x39\x83\xe0\x4c\xaa\x1d\xc6\x94\xb8\x30\x65\x73\x46\xbd\xe0\xad\x6e\x70\x2a\xdc\xa1\x9c\x68\x81\xa1\x89\x8e\x88\xe6\xb3\x4b\x88\x4d\xda\x31\xd7\x3b\xfb\xa5\xe9\x0a\x21\x5f\xb3\x32\x68\x88\x74\x3a\xa7\x54\x0b\xdc\x25\x4b\x6d\x8b\x57\x6c\x02\x21\x66\x3e\x0b\x29\x54\x06\x27\xef\x2b\x54\x07\xdf\xd8\x90\x85\x11\x49\x36\x92\x8f\x4f\x76\xb7\xa0\xfd\xaf\xf3\x23\x37\x21\x96\xf5\x21\x54\xb2\xa9\xd1\xc4\x4b\x39\x09\x24\xe9\x15\x43\xc7\x5e\x54\x71\x64\x33\x1e\x3b\xf8\x7b\xd6\xea\x1c\xf8\x38\x15\xc6\x9e\x0b\xdd\xa4\xfa\x32\xea\xf9\xc4\xe7\xbf\x92\x39\xc7\x6e\xbb\xed\xb5\x65\xdb\x0c\xbc\xfd\x79\x3d\x1c\xdf\xed\x65\x3d\x9e\xaf\xff\xff\xfc\x06\x00\x00\xff\xff\x12\x64\x34\x23\x34\x01\x00\x00")

func tipsChannelsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsChannelsMd,
		"tips/channels.md",
	)
}

func tipsChannelsMd() (*asset, error) {
	bytes, err := tipsChannelsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/channels.md", size: 308, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsChannels2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcf\x31\x8f\xdb\x30\x0c\x05\xe0\xbd\xbf\xe2\x6d\x6d\x81\xd8\x4e\xba\x14\xe8\x52\x20\x1d\xbb\x16\xe8\x50\x74\xa0\x2d\xda\x22\x22\x93\x86\x28\x47\xf1\xbf\x3f\xd8\x77\xb9\x5b\x05\xbd\xc7\xf7\x35\xf8\x15\x49\x95\x93\x83\x32\x83\xe0\x32\x2f\x89\x21\x81\xe9\x84\x2a\x25\x62\xb0\xfd\xe5\x01\xd2\x80\xc5\x2a\xe7\x71\x4d\xd8\x7f\xc9\x40\x45\x4c\xbd\xc5\xdf\x48\x05\x37\xd1\x00\x1b\x51\xa2\xe8\xe4\x18\x48\x31\x3c\xbb\x83\x9d\x8e\x7c\xb4\x0a\x8f\xb6\xa6\x80\xcd\x56\xac\xce\x28\x91\xe7\x9f\xb8\x4a\x4a\xf8\xcd\xaa\x1c\xb6\xcf\x8e\xb4\x0e\x12\x8e\x04\xeb\x44\x93\xe8\x04\x76\xa7\x0d\xa6\xf8\xf7\x27\x32\xae\x1c\xe9\x2e\x96\xf7\x83\x4f\xc1\xff\x2f\xb1\x94\xc5\x7f\x74\x5d\xad\xb5\xa5\x1c\x48\x13\xf5\xde\x0e\x36\x77\x7d\xb2\xa9\xfb\x76\xbe\x7c\xef\x2e\xe7\xae\x44\x6e\xfa\xb7\x82\xc6\xc6\xe6\x39\xb3\x8d\x65\x4e\x5f\xc1\x8f\x25\x91\xa8\x83\xef\x9c\xb7\x83\x73\xac\x55\xe6\x80\x62\xb8\xa9\x55\x50\x6f\x6b\xf9\x00\x92\x83\xb0\x64\x9b\x32\xcd\x33\xe7\x57\xad\x47\xab\x7e\x44\x77\x77\xb1\x77\x2f\x44\x11\x64\x1c\x39\xb3\x16\xf8\xc0\x4a\x59\xcc\xdb\x4f\x2f\x01\x00\x00\xff\xff\x09\xa6\x33\x58\x8f\x01\x00\x00")

func tipsChannels2MdBytes() ([]byte, error) {
	return bindataRead(
		_tipsChannels2Md,
		"tips/channels2.md",
	)
}

func tipsChannels2Md() (*asset, error) {
	bytes, err := tipsChannels2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/channels2.md", size: 399, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsCommunityMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xb1\x6e\x1c\x31\x0c\x44\xfb\x7c\xc5\xb8\x4a\x0c\xf8\xb4\x7d\x9a\x94\xee\x93\x00\x29\x8c\x00\xa6\x57\x5c\x2d\x11\xad\x28\x50\xd4\x1d\x36\x5f\x1f\x68\xed\xc3\x5d\x91\x52\x94\xde\x88\x33\x73\xc2\xb3\x62\xa5\x06\xc2\x99\x6d\x07\xcd\x2e\x67\x46\x6f\x6c\x98\x75\xdb\x7a\x11\xdf\x9f\x40\x25\xc2\x57\x36\x06\x19\x23\xab\x37\xe8\x82\x0b\xed\x0d\x8b\x1a\x76\xed\x70\xc5\x1b\xa3\x92\xf9\xb8\x12\x7f\xc0\xcf\x01\x7c\x6e\x03\xc4\xcb\x6b\xd2\x4c\x25\x9d\x4a\xf7\xf6\x8a\x8d\x24\x4b\x49\xc8\xd2\xfc\xf7\x97\xd5\xbd\xb6\xaf\xd3\x94\x4c\x7b\x6d\x21\xa9\xa6\xcc\x61\xd6\x6d\x8a\xd3\xa2\xd6\xb7\xe9\x0e\x7e\x7c\x02\xe1\xe5\x59\xf1\x9d\x63\x94\x3b\xfa\x72\xb9\x04\x3b\x66\x07\x6a\x1f\xd0\x74\x05\xea\xca\xd6\xf0\x23\xd3\xfc\x07\x6a\x89\x8a\xfc\x25\x17\x2d\x37\x05\x29\x67\x71\x0e\x6d\x3c\x09\xef\xf4\x9b\x49\x4c\x1c\xd4\x6e\x3a\x88\xd2\xe6\xde\x9a\x68\xc1\xb1\xdd\x4d\xe0\x38\xfe\x9f\x2c\x11\x6b\x2f\xd1\x38\x1e\xd1\x0d\x9d\x8d\xd9\x7b\x6d\x77\xfe\xf5\xf4\x31\x0b\x54\x6b\xab\xfa\xee\xe4\x31\xe0\xd7\xba\xa3\xa8\x63\x91\x12\xa1\x85\x21\x65\x84\x6e\xc8\x3a\x53\x1e\xa5\xd0\xf1\x45\x1a\xe5\x89\x83\xe0\xb6\x7f\xc3\xd5\xf4\x28\xed\xa8\x77\x31\xe1\x12\xf3\x8e\xca\x5a\x33\x3f\x7c\xfa\x17\x00\x00\xff\xff\x21\x24\x81\xcb\x00\x02\x00\x00")

func tipsCommunityMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsCommunityMd,
		"tips/community.md",
	)
}

func tipsCommunityMd() (*asset, error) {
	bytes, err := tipsCommunityMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/community.md", size: 512, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsConcurrencyMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xbb\x4a\x04\x41\x10\x45\x73\xbf\xe2\x66\x2a\xac\x33\xb1\x82\x2c\xf8\xc0\xc0\x64\x31\x30\x11\x83\x9a\x9e\xda\xed\x66\x6b\xba\x86\xae\xea\x69\xe7\xef\x65\x7d\x20\x98\x5e\x0e\x9c\x73\xaf\x70\xaf\x39\xd4\x52\x38\x87\x15\xc9\xa0\x7b\xe7\x8c\x89\xb3\x27\xcd\x3c\x82\x0c\x9a\x19\xba\x87\x47\x86\xc7\x94\x0f\x86\x27\xc5\xa8\x6c\x28\x4c\x22\x2b\x1a\x8b\x74\xb8\xab\x8e\x16\xc9\x41\xc1\xeb\xd7\x9e\x0c\xc9\x37\x88\xda\xbe\xf1\xe4\x28\x2c\xe4\x0c\x57\xcc\x54\x48\x84\x25\xd9\xb4\x01\xe5\xf1\x07\x43\x63\x54\xe3\x93\xc2\x15\xa6\xb2\x30\xe6\xa2\x83\xf0\x64\x48\x19\x84\xf0\x1b\xec\x68\xb4\x6e\xf1\xa2\x03\x76\xe9\xc8\xe7\x06\x27\x39\xe2\x94\xee\xc2\x23\xde\xfe\x5d\xcb\xea\xd8\xfd\x59\xdf\x2f\xa2\xfb\x6c\x37\x7d\xdf\x5a\xeb\x56\xad\x5e\x07\xee\x82\x4e\x7d\x23\x0f\x71\xbb\xdc\xea\xeb\x75\x59\x1e\x44\x9e\x1f\x0f\x97\xe0\x8f\x59\x28\x65\xeb\xce\x3e\x03\x00\x00\xff\xff\xbc\x5c\x35\x05\x34\x01\x00\x00")

func tipsConcurrencyMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsConcurrencyMd,
		"tips/concurrency.md",
	)
}

func tipsConcurrencyMd() (*asset, error) {
	bytes, err := tipsConcurrencyMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/concurrency.md", size: 308, mode: os.FileMode(420), modTime: time.Unix(1620019865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsConcurrencypatternsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcf\x31\x4b\xc4\x40\x10\xc5\xf1\xde\x4f\xf1\xac\x4e\x0b\x13\xb0\x50\x38\x90\x14\x16\x67\x79\x88\x20\xa7\x58\xcc\x6d\x26\x66\xc9\x66\x26\xec\xcc\xba\x97\x6f\x2f\xe7\x15\xb6\xff\x57\xfc\x78\x77\x78\xd5\x23\xf6\x71\xe2\x8d\xc1\x29\x4d\xf8\xdc\x29\x9e\x55\x42\xc9\x99\x25\xac\xd8\x93\x3b\x67\xb1\xaf\x9b\xd1\x7d\xb1\x6d\xdb\xd6\x5a\x9b\x55\x8b\x97\x23\x37\x41\xe7\xb6\x92\x87\xb1\xfb\x79\x1a\x1e\xa6\x7e\xb9\x7f\x7c\x3b\x7c\xd8\x2d\xf8\xb4\x24\x8a\x62\x50\x61\xe8\x00\x1f\x19\xb3\x9a\x83\x4f\x21\x7a\x94\x6f\x0c\x4c\x5e\x32\xdb\x79\xdd\xe9\x16\xe1\x1f\xbd\xc6\xfb\x48\x8e\x5e\xd9\x10\x1d\x33\x93\x74\x97\x14\x48\xce\xa5\xd7\x0e\x2f\x5a\xd1\x2b\x56\x2d\x28\xc6\x88\xde\xe1\xa0\x65\x93\x12\x86\x28\x3d\x28\xa5\x3f\x94\xc4\x2a\x67\x43\x14\xf8\x18\x2f\x27\x9b\xab\xdf\x00\x00\x00\xff\xff\x4f\x10\x33\x6b\xf8\x00\x00\x00")

func tipsConcurrencypatternsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsConcurrencypatternsMd,
		"tips/concurrencypatterns.md",
	)
}

func tipsConcurrencypatternsMd() (*asset, error) {
	bytes, err := tipsConcurrencypatternsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/concurrencypatterns.md", size: 248, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsConcurrencypatterns2Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcf\xcd\x4a\xf4\x30\x14\x87\xf1\xfd\x7b\x15\xff\xdd\xbc\x03\xda\x82\x0b\x05\x41\x64\xb0\x30\xdb\xfa\x01\xa2\x83\x8b\x93\xe4\xd4\xc6\x69\x72\x4a\x72\xd2\xd8\xbb\x97\xee\x5c\x7b\x05\xcf\xef\xb9\xc4\xe9\xe0\x16\x8a\x96\x1d\x8e\x82\x07\x89\xb6\xa4\xc4\xd1\xae\xe8\x49\x95\x53\xcc\x1f\xff\x47\xd5\x39\xdf\xb6\x6d\xad\xb5\x59\xa5\x68\x31\xdc\x58\x09\x6d\x25\xb5\xe3\xfd\x72\xf7\xd8\x75\xb5\x72\x6f\x3a\xad\x7b\xf8\x0c\x82\x63\x25\x3f\xb1\x03\x7f\xcf\x93\x24\x52\x2f\x11\x32\xe0\x28\xbb\x0c\xfb\x2b\x32\x30\x69\x49\x9c\x41\xd1\x61\x94\x0a\x15\x94\xcc\xd0\x91\x03\x7c\x44\x62\x9a\x30\x27\xf9\x4c\x14\xf2\x05\xcc\xba\x29\x95\x29\x60\x62\x72\x78\xa6\xc0\x9c\x70\xf8\x0a\x14\x7d\x83\xd7\x0d\x04\x1d\x37\xc3\xa0\x9c\xb0\x4a\xd9\x2d\x0c\x32\x59\x92\x61\x87\x27\x31\xe8\xfd\x99\x77\x19\xa7\x3f\xef\x0e\xd7\x67\x37\x5f\xdd\xbc\xbc\xbd\xe7\x7d\xf3\xef\x27\x00\x00\xff\xff\x6b\xe7\xf7\xdc\x42\x01\x00\x00")

func tipsConcurrencypatterns2MdBytes() ([]byte, error) {
	return bindataRead(
		_tipsConcurrencypatterns2Md,
		"tips/concurrencypatterns2.md",
	)
}

func tipsConcurrencypatterns2Md() (*asset, error) {
	bytes, err := tipsConcurrencypatterns2MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/concurrencypatterns2.md", size: 322, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsConductMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\x31\x6b\xc3\x30\x10\x46\xf7\xfc\x8a\x8f\x2c\x6d\x21\x8d\xf7\x2c\x85\xba\x60\xba\x77\x2b\x1d\x0e\xe9\x2c\x89\xca\x3a\xa3\x3b\xd5\xf8\xdf\x17\x25\x21\xf3\xfb\xb8\x77\xef\x15\x1f\xc9\x63\x97\x86\xdf\x22\x1b\x2c\x32\x26\x81\x93\x65\x69\x25\xd9\x8e\x48\x0a\x82\x13\xcf\x90\x19\x4e\x8a\x6f\xce\xde\xf0\x69\x90\x66\x39\x15\xee\x58\xd9\x3a\xfd\xa3\xdc\x58\x61\x82\x2d\x26\x17\x31\xc9\x1a\xb9\x2a\x34\x4a\xcb\x1e\xa4\x6b\xaa\x7c\xea\xcb\x1b\xef\xb2\x39\x55\x35\x24\xc5\xf1\x9d\x31\xd7\xc4\xc5\xe7\x1d\x54\x3c\x36\xce\x4e\x96\x54\xc2\xf1\x8c\xaf\x48\xf6\xd4\x4d\xa1\x32\x19\xd4\xa8\xda\xe9\xba\xea\x9f\x3b\x2a\xa8\x4c\xfe\x7a\xb0\xb2\x1a\x22\x57\xbe\xe0\x7b\x12\x8c\x8f\x92\xf1\xde\x30\xde\x1a\x7e\x9e\xa3\xd9\xaa\x97\x61\x08\x92\xa9\x84\xb3\xd4\x30\xdc\xfb\x5e\x0e\x87\xff\x00\x00\x00\xff\xff\x70\xee\xaf\xe3\x18\x01\x00\x00")

func tipsConductMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsConductMd,
		"tips/conduct.md",
	)
}

func tipsConductMd() (*asset, error) {
	bytes, err := tipsConductMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/conduct.md", size: 280, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsContextMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x4f\xcb\xd3\x40\x10\x87\xef\x7e\x8a\xdf\xed\xf5\x85\x9a\x88\xe2\xa5\x20\x82\xc5\x14\x8b\x88\xa4\xfe\x83\x22\x76\xb2\xd9\x74\x17\x93\x99\xb0\x33\xeb\xb6\xfd\xf4\xd2\xf4\xe0\xe9\x3d\x0f\xf3\xfc\x9e\xe7\x05\x9a\x44\xec\xbc\x3a\x6c\x68\x9a\xe5\xf2\xa0\x38\xec\xb2\x5a\x23\xa9\xc9\xec\x7e\x3d\x0f\x66\xb3\xae\xeb\xba\x94\x52\x5d\x24\x5b\xee\x7c\xe5\x64\xaa\x5d\x20\x66\x3f\xd6\xdf\x36\xbf\xdf\x5f\x9b\xee\xbc\x7d\x75\xa5\xd7\xdd\xfc\xe6\x73\xdb\xb6\x3f\x77\xfb\xf2\x08\xf5\x29\x7a\x45\x54\x10\x86\xcc\x20\xee\x31\x90\xba\xc8\x64\x91\x4f\x88\x6c\x49\xfa\xec\x2c\x0a\xc3\x04\x5b\xa9\xf0\x91\x61\xc1\xc3\xcf\x51\xa5\xf7\x38\x7c\x0d\x1e\x1b\x61\xf3\x67\xc3\x17\x72\x7f\xe8\xe4\x9f\x56\x2a\x64\x2e\xbc\xfb\xfb\xf6\xd3\xfe\xda\xbe\xfc\xfe\x21\xd1\x8f\xf2\xb8\xfa\x1f\xe8\xcf\xf3\x48\x91\x75\x59\x38\xba\x3b\xf5\x88\xf9\x8e\xc5\x90\x64\x5a\x4e\x5b\x81\x1a\x71\x4f\xa9\xc7\x18\xbb\x44\xe9\xb2\x46\x09\x64\x88\xf6\xa0\x18\x24\xad\x10\xa4\xdc\x94\xb3\x7a\x44\x5b\x2d\x69\x2a\x93\x87\x0c\x0b\x22\xab\x1f\xf2\x08\x0b\x91\x4f\x8a\x68\x70\xc4\xe8\xe5\xf6\x8b\xac\xd5\xb3\x7f\x01\x00\x00\xff\xff\x14\xbd\xcc\x7c\x77\x01\x00\x00")

func tipsContextMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsContextMd,
		"tips/context.md",
	)
}

func tipsContextMd() (*asset, error) {
	bytes, err := tipsContextMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/context.md", size: 375, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsDebuggerMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x4e\xc4\x30\x10\x44\x7b\xbe\x62\xa8\x0e\x0a\x92\x1e\x09\x9d\x0e\x21\xae\x00\x0a\xa0\x02\x44\xe1\x4b\x36\xb1\x89\xe3\x0d\xbb\xeb\xb3\xc2\xd7\x23\x23\x21\x5d\x39\xf3\x34\xd2\x9b\x2b\xec\x0c\xca\x33\x61\xe1\x90\x0c\x21\x61\xe5\x2c\xd8\x33\xbe\x38\x4b\xa2\xb5\xe6\x4d\x8c\x18\x42\xea\xff\x98\x52\x1c\x90\x88\xfa\x90\x46\x18\x23\x2b\xc1\xa1\xa7\x43\x1e\x47\x92\x06\xb7\xd9\x50\xbc\x33\x04\x3d\xe9\xe1\x52\x0f\xcf\x05\x3d\x93\x22\x18\x0a\xcb\xb4\xc5\x63\xf8\xc1\x4b\xe8\x68\xa3\x30\x17\x27\x7c\xec\x70\xf7\xbf\xb8\x17\x9e\xf1\xda\x89\xb3\xce\x7f\x5e\x78\xb3\x45\xaf\xdb\xb6\x94\xd2\xac\x9c\x2d\x1f\xa8\xe9\x78\x6e\x4b\xc5\xdb\xe3\xcd\xbb\x2c\x93\x3c\x3d\xbc\x1d\xbf\x9f\x2f\x51\x5c\x9c\xb4\xda\xc2\xbc\x70\x1e\x3d\xcc\x13\x16\xe1\x8e\x54\xc1\x03\x8a\x04\xab\xfe\x9c\xa8\x7e\xde\xf3\xf9\xd9\x6f\x00\x00\x00\xff\xff\x91\xf4\x69\x66\x0b\x01\x00\x00")

func tipsDebuggerMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsDebuggerMd,
		"tips/debugger.md",
	)
}

func tipsDebuggerMd() (*asset, error) {
	bytes, err := tipsDebuggerMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/debugger.md", size: 267, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsEffectiveMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x90\x41\xaa\xdc\x30\x10\x44\xf7\x39\x45\xed\x26\x81\x1f\x7b\x9f\xac\xc3\x27\x27\x98\x45\x08\xa1\x6d\x97\xa5\x66\x24\xf5\x20\xb5\x6c\x7c\xfb\x60\x0f\xb3\x2c\xa1\x47\xbd\xea\xef\xb8\x13\x59\x0e\x44\xd9\x88\xcc\xe2\x6a\x85\x0b\xd4\x31\x71\xb5\xca\x0f\x4c\xdd\xf1\xe7\xd7\xba\x72\x76\xdd\x88\x4f\xfb\xfb\x35\xba\x3f\xdb\x8f\x71\x0c\x96\xa4\x84\xc1\x6a\x18\x17\x9b\x47\xbe\x3f\xfd\x0b\x36\x44\xcf\xe9\x1b\xb4\xa1\x52\x52\x3a\xb0\x5b\xf5\x78\x86\x45\x4b\x18\xf0\xdb\x6f\x0d\x92\x12\x64\xb2\xee\x88\xb6\xc3\x0d\x7b\x55\x27\x74\x51\xcb\xe2\x3a\xe3\xd3\x20\x65\x41\x96\x07\xe1\x91\x98\xd8\x1c\xbd\x11\xb6\x5e\x79\x93\xaa\xd6\x1b\x56\x8a\xf7\xca\xf6\x7e\x3f\xb5\xba\x04\x0e\xb8\x47\x16\x1c\xd6\x6f\x95\x58\xb5\x36\x47\xa2\xd4\xa2\x25\x7c\xe0\x29\xd5\x2f\x44\x1d\xbb\x95\x9b\x23\x53\x0a\x72\x9f\xe3\x29\x73\x58\xc7\x41\x7f\x5d\x60\xb6\x4c\x4c\x32\x3f\x2e\xa1\x73\xc6\x49\x49\x10\x2d\xe0\xc6\x7a\xa0\x19\x6c\x75\x96\x9f\x57\x5d\x4a\x08\x74\x34\xcb\xf4\xa8\x25\xa0\x70\xc7\xb9\xf4\x55\xf7\x42\x5c\x33\x87\x2f\xff\x03\x00\x00\xff\xff\x70\x9c\xac\x81\x84\x01\x00\x00")

func tipsEffectiveMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsEffectiveMd,
		"tips/effective.md",
	)
}

func tipsEffectiveMd() (*asset, error) {
	bytes, err := tipsEffectiveMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/effective.md", size: 388, mode: os.FileMode(420), modTime: time.Unix(1620019865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsErrorsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8f\xc1\x4e\xf3\x40\x0c\x84\xef\xff\x53\xcc\x7f\x03\xa9\x4d\xef\x95\x10\xe2\x80\x50\x5f\x80\x0b\x42\xaa\x9b\x38\xbb\x86\x8d\x5d\xbc\xde\x56\x79\x7b\xb4\xe1\x3e\xf3\xcd\x7c\x7b\xbc\x38\x63\xb5\x86\x10\xe7\x09\x36\xe3\xee\x12\xa2\x09\x67\x99\xc1\xee\xf8\xff\x04\x95\x72\x06\xcd\xc1\x0e\xbe\xb1\xaf\xb0\x2b\x3b\x85\x98\xe2\x9e\x65\xcc\x18\x49\xe1\x1c\xcd\x15\xa4\xbd\x65\xfe\x8c\xd3\x8c\x6a\xbb\x0d\xbe\x48\xca\x81\x59\x74\x42\x64\xa9\xb8\x14\x4b\xb8\x5a\x0d\xb0\x7e\xd9\x4a\x97\xc2\x20\x9d\xc0\x5a\x7a\x92\x55\x34\x1d\xf1\xf1\xda\x41\x15\xe4\x8c\x77\x2a\x8d\xeb\xe7\x43\x8e\xb8\xd6\xe3\xe1\xd0\x09\x43\xb2\x42\x9a\x06\xf3\x74\xd8\x36\xeb\x9e\x9c\xf7\xb7\x2d\xfa\x38\xe0\x14\xc8\x54\x51\x6d\x61\x24\x67\x0a\x04\x8f\x59\xe5\xa7\x71\xc5\x6c\x8e\x85\xbe\xbb\xe9\x6a\xcd\xf1\x66\x18\x6d\x62\x2c\xe6\x0c\x67\x9a\xfa\xa9\x5d\xf7\x2b\x8c\x1a\x52\x0a\xdc\x2e\xad\x46\x59\x91\x49\xa7\xd2\x9b\x7f\xab\xc3\xbf\xdf\x00\x00\x00\xff\xff\x8e\x1d\x21\xba\x47\x01\x00\x00")

func tipsErrorsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsErrorsMd,
		"tips/errors.md",
	)
}

func tipsErrorsMd() (*asset, error) {
	bytes, err := tipsErrorsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/errors.md", size: 327, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsFaqMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\x4e\x04\x31\x0c\x44\x7b\xbe\x62\xa8\x00\x89\xdb\xe5\x5a\x3a\x1a\x4e\x94\x48\x50\x21\x0a\x93\x38\x1b\xeb\xb2\xf6\x6d\xe2\x68\xc5\xdf\xa3\x20\x44\xf7\x24\x3f\xcf\xcc\x01\x6f\x99\xf1\xf1\xae\x96\x92\x04\xa1\x82\x93\xe1\xf9\xe9\xf5\xf3\x36\xbb\x5f\xda\xe3\x3c\x2f\x76\x7c\x38\x4e\x56\x97\x99\xaa\x4b\x28\x3c\xf7\x7f\xf9\x90\x68\x9b\xb2\xaf\xe5\x0e\xd2\x40\x58\x2a\x93\x23\x58\x29\x1c\x5c\x4c\x61\x09\x5b\xe7\x36\xb8\x81\x34\x82\xb4\xed\x5c\x1b\xe8\xcb\xba\xe3\x64\xf7\x68\xb6\xf2\xf0\xf6\x2c\x21\x83\x2a\x43\xcd\x91\xac\x6b\x84\x28\x3c\x8f\xeb\xdf\xb6\x68\xa1\xaf\xac\x4e\x23\x70\xc2\x8b\xdf\x34\xec\x5c\x0a\x76\xab\x9e\x51\x99\xa2\xe8\xf2\x5b\x74\x66\xbe\x0c\x1e\xff\x45\xf4\x8c\x4c\x1a\xbf\xaf\xaf\x7e\x02\x00\x00\xff\xff\xe4\x44\x55\x2e\xf1\x00\x00\x00")

func tipsFaqMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsFaqMd,
		"tips/faq.md",
	)
}

func tipsFaqMd() (*asset, error) {
	bytes, err := tipsFaqMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/faq.md", size: 241, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsFontMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xb1\x4e\xec\x40\x0c\x45\xfb\xf7\x15\xf7\x55\x01\x69\x77\xd3\x23\xa8\x90\x40\xf4\x74\x88\xc2\x3b\xe3\xcd\x58\xc9\xd8\xd1\xd8\xd1\x6e\xfe\x1e\x25\xac\xe8\xaf\x8e\xcf\xf1\x11\x9f\x85\x1b\x77\x0e\x82\xcf\x9c\x84\x26\x5c\x4c\x03\x99\x5d\x06\xe5\x8c\x8b\x35\xcc\xcd\x86\x46\xb5\x8a\x0e\x07\x5c\x8b\xa4\x82\x44\x8a\x4a\x23\x83\xb3\x84\xe8\x80\x77\x43\xb2\xcc\x20\xa8\x24\x6e\xe0\xdb\xcc\x4d\x58\x13\x9f\xf0\x11\x9d\x23\xd1\x34\x71\xc6\xd7\x9b\x34\xc2\xab\x65\xfe\x7e\x28\x11\xb3\x3f\xf5\xfd\x20\x51\x96\xf3\x29\x59\xed\xc3\xd4\xc7\xb5\xdf\x46\xdb\xe6\xf1\x00\xd2\x0c\x09\x14\xf2\x3f\x43\x5f\xeb\xd9\x26\xdf\xdd\xdc\x2a\x23\x8a\xe8\xe0\x10\xdd\x34\x7c\xd5\xa0\xdb\x01\x93\x8c\x8c\xee\xff\x4b\xb7\x23\xba\xe7\x63\x77\x37\xb9\x34\xe6\x5f\xee\x6a\xcb\x5e\xb2\x38\x6f\x37\xae\x12\x05\xa4\xeb\x1e\x65\x0d\xd6\x10\xdc\xaa\x28\x4d\xf7\x6c\x5f\xe6\xd9\x5a\xf8\xfe\x24\x3f\xfd\xfb\x09\x00\x00\xff\xff\x06\x5f\x4b\x62\x40\x01\x00\x00")

func tipsFontMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsFontMd,
		"tips/font.md",
	)
}

func tipsFontMd() (*asset, error) {
	bytes, err := tipsFontMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/font.md", size: 320, mode: os.FileMode(420), modTime: time.Unix(1620019865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsGoPerfbookMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x8a\xd5\x40\x10\x45\xf7\x7e\xc5\x65\x56\x0a\x33\xc9\xde\x8d\x20\xc2\xc3\x95\x4b\x11\x71\x51\xe9\x54\xd2\xe5\x4b\x77\xc5\xaa\xea\x09\x79\x5f\x2f\x1d\x11\x66\xd9\x5c\xce\xe1\x74\xbd\xe0\xe9\x6b\x45\x64\xc6\x2b\x79\xa0\xd0\x6f\x35\x89\x13\xba\x20\x91\xb3\x3f\x5f\x9b\xcb\x83\x41\x75\x86\xef\xcc\x73\x1f\x09\xbb\xe9\x6a\x54\x20\x8e\xaa\x01\x42\xd2\x9a\xd8\xea\xf0\x84\xcf\x2d\x20\xdd\xaa\xce\x30\x32\xfe\xe7\xc2\x91\xb9\x62\x67\x5b\xd4\x0a\xd5\xc4\x9d\x4d\x26\x21\x89\xb6\x67\x1c\x99\x02\xc1\x29\x57\xf9\xd3\xd8\x91\xa8\xe2\x60\x34\x67\x84\xe2\x30\x09\xc6\x2b\xdb\x09\x5e\x16\x49\xc2\x35\x70\xd3\xff\x19\xfe\x09\x3f\xbf\x77\x55\x5d\xaf\xd0\x6f\x7b\x48\x91\x47\x7f\xde\x14\x49\x67\xfe\xf5\x3e\x47\xec\xfe\x71\x1c\x57\x89\xdc\xa6\x21\x69\x19\xe7\xd5\x4e\xbf\xcb\xb8\xea\x4b\xef\x9a\x54\xef\xe3\xb4\xe9\x34\x16\xf2\x60\x1b\xdf\xc4\x0e\x65\xfe\xd0\x83\x09\x8b\x31\x43\xeb\x26\x95\xd1\x09\x4c\x27\xbe\x50\x11\xaa\xb8\x5d\x3a\x1c\x12\x19\x9b\x86\xf7\x53\x35\xe7\xa5\x6d\x08\xd9\xfd\x4a\x0b\x4a\x21\xc9\x07\xfc\xd0\x86\x22\x6b\x0e\x6c\x72\xbf\x3e\x19\x76\xc2\xb5\x70\xc7\x22\x73\xc1\xa9\xcd\x9c\xb7\x65\x78\xf7\x37\x00\x00\xff\xff\x28\x6f\x4f\xec\xa9\x01\x00\x00")

func tipsGoPerfbookMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsGoPerfbookMd,
		"tips/go-perfbook.md",
	)
}

func tipsGoPerfbookMd() (*asset, error) {
	bytes, err := tipsGoPerfbookMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/go-perfbook.md", size: 425, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsGophercisesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x4e\xf3\x40\x10\x84\xfb\xff\x29\xe6\xaf\x00\x29\xc4\x3d\x1d\x55\x14\x89\x0a\x89\x02\x21\x8a\xcd\x7a\x6c\x5f\x72\xbe\x3d\xed\x9e\x23\xfc\xf6\xc8\x08\x01\xed\x8c\x66\xe6\x9b\x7b\x1c\x07\xac\xb6\xdc\x38\xe1\x94\x7e\xc5\x60\x0e\xc1\x6c\x4e\xe8\x24\x39\xb3\x8c\xa9\x8c\x50\xcb\x99\xda\x92\x15\xd8\x00\x7e\xd0\x35\x05\x03\xcd\x10\x96\xaf\x44\x2a\x38\xd8\x0e\x6f\x07\xab\xd3\xb7\xf9\x7e\x3b\xb5\x56\xe3\xa1\xeb\xc6\x5f\x71\xaf\x36\x77\x77\x48\x01\xc1\xe8\x94\x06\x67\xd8\xe2\xca\x3d\x5e\x6d\x81\x4a\x81\x4e\x66\x41\x0c\x6e\x33\x04\xc1\x3f\xcb\xa9\x34\x3a\xa3\x6d\x4c\x52\x7a\x5c\xc5\x13\x7b\x54\xb7\x33\xb5\xc5\xee\x27\x94\xe6\x9a\x89\x97\xe7\x27\xc4\x64\xde\x58\xe8\x1b\xac\x14\x3c\x1e\x71\xb2\xf6\x75\xb4\x66\x59\xb7\xa6\x53\x16\xbd\x9c\x45\x2f\xff\xff\x7d\x06\x00\x00\xff\xff\x95\xa1\x0f\x74\x12\x01\x00\x00")

func tipsGophercisesMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsGophercisesMd,
		"tips/gophercises.md",
	)
}

func tipsGophercisesMd() (*asset, error) {
	bytes, err := tipsGophercisesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/gophercises.md", size: 274, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsGophervidsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x6e\xc3\x30\x0c\x45\xf7\x9e\xe2\x77\x6a\x02\xb8\xf6\xde\x0b\x04\xdd\x8b\x2e\x45\x07\x5a\x62\x2c\x22\x8a\x28\x50\xb4\x0d\xdf\xbe\x70\x5c\x64\xfd\x78\x78\xff\xbd\xe3\xf3\x8a\x4d\x67\x04\x2a\x6f\x0e\x72\xe7\x12\x41\xc8\x1a\x28\xe3\xa2\xb8\x33\xfb\x5c\x71\x52\x03\x2f\x5c\x20\x4f\xfc\xdc\x61\x25\x0f\x49\xca\x84\x45\x22\x2b\x9c\xf2\xad\x41\x4b\x96\xc2\x90\x06\xc2\x64\x4c\x8e\x95\x36\xb8\x22\x33\x59\x01\x8d\x3a\xfb\x6e\xa6\x12\x31\x32\xa4\xb4\x2a\xc6\xb1\xc7\xcf\x45\x6b\x62\xfb\x96\xd8\x7e\x4f\xc9\xbd\x7e\x0c\xc3\xf4\x98\x16\x89\xad\xa7\x5a\x5b\x55\xef\x83\xde\x87\xf3\xa1\x6f\x4c\x16\x12\xb8\x4c\xfb\xe3\x55\x6d\xf7\x1e\x15\x6b\x92\x90\x90\xd9\xdb\xa3\xf7\x9f\x1c\x37\xb4\xca\x74\x63\xeb\xe0\xe2\x99\x3b\xa8\xc1\xb5\x4a\xe8\xf1\x65\x1b\xc4\x5f\x5f\xfe\x02\x00\x00\xff\xff\x95\x48\xb0\x12\x14\x01\x00\x00")

func tipsGophervidsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsGophervidsMd,
		"tips/gophervids.md",
	)
}

func tipsGophervidsMd() (*asset, error) {
	bytes, err := tipsGophervidsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/gophervids.md", size: 276, mode: os.FileMode(420), modTime: time.Unix(1620019878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsGraceful_errorsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\xc1\x4a\xc5\x30\x10\x85\xe1\xbd\x4f\x71\x76\x2a\xf4\xb6\x2b\x41\x04\x11\xb4\x5a\x71\x27\xb8\x11\x71\x31\x4d\xa7\x26\x34\xc9\x48\x32\x69\xc8\xdb\x4b\x85\xbb\x3e\x1c\xbe\xff\x84\xaf\x51\xe2\xa5\xe2\xad\x64\xc5\x93\x65\xb3\xe1\x39\x25\x49\xb9\xc3\x2b\xc5\xc5\x33\x3e\x2c\x07\x4c\x89\x0c\xaf\xc5\xfb\xf6\x7d\x65\x55\x7f\xf3\xdd\x30\xd4\x5a\xfb\x26\x45\xcb\xcc\xbd\x91\x30\x54\x52\x63\x1f\xf6\x7b\x9f\x1f\x5f\x6e\x6e\xdf\x4f\x63\xfc\xbc\x86\xcb\x20\xac\x94\x8d\x8b\xa4\x2e\xfe\x40\xc9\x6f\x98\x1b\x46\xda\xf9\x00\x23\x37\xd0\x2c\x45\xc1\xff\x2e\x5c\xc4\x24\x1d\xaa\x25\x85\x0a\x16\x41\x75\x6a\xa1\x96\x43\x07\x8a\x0b\xac\xd4\x63\x08\xb4\x31\x9a\x94\x74\x3e\x06\x49\x8c\x92\x8f\xcc\xfe\xe2\x2f\x00\x00\xff\xff\x5b\xfa\x7d\xf7\xd9\x00\x00\x00")

func tipsGraceful_errorsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsGraceful_errorsMd,
		"tips/graceful_errors.md",
	)
}

func tipsGraceful_errorsMd() (*asset, error) {
	bytes, err := tipsGraceful_errorsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/graceful_errors.md", size: 217, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsIdiomaticMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\xc1\x4a\xc4\x40\x10\x04\xd0\xbb\x5f\x51\xec\x49\x61\x37\xb9\xfb\x03\x8b\xdf\x20\x1e\xda\x99\x49\xa6\xa1\xa7\x3b\x4c\x77\x36\x8c\x5f\x2f\x11\x14\xaf\x55\x45\xf1\x6e\xb8\xbc\x65\xb6\x46\xc1\xe9\x82\x64\xb9\x80\x15\x77\xc3\x62\x22\x76\x38\x08\x1e\xa4\x99\x7a\xbe\x22\x99\x3a\x7b\x14\x0d\x1c\x34\x60\x0b\xb2\xb1\xae\x88\xca\xba\xfa\x15\xbe\xa7\x0a\x72\x24\xda\x38\x48\xf8\xeb\x2c\x29\x75\xd3\xd1\xfc\x0a\xeb\x50\x6a\x67\x56\x7a\xb7\x8e\x07\x75\xa6\x4f\x29\x3e\xe1\xfd\x0f\x81\xbb\x7d\x3c\xd7\x88\xcd\x5f\xe7\x39\x37\x8e\xce\x93\xd7\xbd\x93\x0c\x7b\x4c\xc9\xda\xcc\xbf\xd3\xdb\x6a\x2f\xe0\x1f\x62\x23\x11\x24\x13\x29\x29\xd8\xf4\xa4\x05\x6f\x0e\x53\xf0\xbf\x67\x1c\x95\x53\xc5\xb0\x1d\x8d\x06\x16\xd6\x8c\xdd\xcb\xb2\xcb\xf4\xf4\x1d\x00\x00\xff\xff\x83\xee\xaa\x7a\x0a\x01\x00\x00")

func tipsIdiomaticMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsIdiomaticMd,
		"tips/idiomatic.md",
	)
}

func tipsIdiomaticMd() (*asset, error) {
	bytes, err := tipsIdiomaticMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/idiomatic.md", size: 266, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsInterfaceMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xc3\x40\x10\x44\x7b\xbe\x62\xe8\x40\x0a\x76\x8f\x84\x28\x10\xb1\xa8\x80\x8a\x02\x51\x2c\xe7\xb9\xd8\x89\x7d\x6b\xee\x76\x73\xf2\xdf\x23\x53\x20\x44\x35\xc5\xcc\x1b\xbd\x1b\x3c\x25\x63\x8e\x12\x58\x20\x99\xd0\x44\x68\x84\x0d\xc4\xac\xc5\xb0\x68\x65\x8e\x3e\xed\xe0\x85\x3f\x29\xa9\x87\xa7\xf1\xcb\x89\x48\x31\xcf\x2c\x1b\xd1\x69\x83\xb7\x81\x09\xab\x3a\x3c\xf5\xcc\xc5\xb6\xe9\xf8\xfb\xbf\xfb\x5f\x6d\xc8\x3e\x4b\x0a\x2c\x01\x0f\x32\x2f\xba\xe2\x20\x67\x42\x70\xc8\x14\x83\xc9\x74\x42\x90\x69\x62\x8f\xf7\x3f\xa2\x63\x42\xa7\x1f\x57\x83\xd9\x52\x6e\xdb\xb6\xd6\xda\xac\xea\xe6\x9f\x6c\x82\xce\x6d\x15\x0b\xc3\xfd\xf9\xee\x25\xbe\xee\x8f\xcf\xb5\xeb\x4e\xe5\xba\xc1\x63\x3a\xea\x7a\x79\xf1\x1d\x00\x00\xff\xff\x6e\x80\xe9\xd8\xf2\x00\x00\x00")

func tipsInterfaceMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsInterfaceMd,
		"tips/interface.md",
	)
}

func tipsInterfaceMd() (*asset, error) {
	bytes, err := tipsInterfaceMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/interface.md", size: 242, mode: os.FileMode(420), modTime: time.Unix(1620019865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsMagicMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcf\x31\x4e\x03\x31\x10\x85\xe1\x9e\x53\x3c\xa5\x01\xa4\x25\xe9\xb9\x40\xb4\x05\x14\x88\x0e\x51\xcc\x7a\x5f\xec\x51\xbc\xf6\xe2\x19\x2b\xf2\xed\x51\x10\xfd\xaf\x4f\xfa\x5f\x30\x5f\x30\x6a\x7f\x6c\x84\x16\x67\xa3\x39\x57\x68\x41\xa6\xb4\xa2\x25\xc2\xea\x46\xec\xf5\xc6\x76\xe9\x79\x02\x33\xa3\x14\x9f\x20\x65\x85\xe9\xb6\x67\xc2\x19\x52\xd1\x9f\x4e\x43\xbd\xe0\x5c\xb1\xb7\x1a\x9b\x6c\x9b\x96\x38\xe1\x26\x1e\x12\x3c\xa9\x21\x36\x8a\xc3\x25\x5f\xb1\x0c\xbc\x89\xe3\x63\xb0\x21\x48\xce\x5c\xf1\x35\xaf\x5a\x37\x71\x0d\x77\xe3\xb3\x69\xb8\xda\xf7\x53\x72\xdf\xed\xf5\x74\x1a\xb5\x7b\x3f\x2e\x3c\x0d\xd2\xe7\xf8\xce\xf9\x1a\x9e\x8f\x7f\x88\xc9\x30\x1c\xce\x15\x2b\xb3\x2e\x6c\xe2\xcc\x03\x49\x0c\xa5\x62\x93\xa8\x01\x4b\xd7\xec\xf7\xc5\x0a\x4f\x44\x96\x12\xbb\x44\x4e\x58\xba\xff\x27\x9e\xb4\x44\x43\x92\x7d\x67\xc1\x2d\xb1\x40\x1d\x6a\xe8\xc6\x15\xa1\xb6\xc6\xe0\x79\x1c\x0f\x0f\xbf\x01\x00\x00\xff\xff\xd7\x30\x47\x1d\x36\x01\x00\x00")

func tipsMagicMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsMagicMd,
		"tips/magic.md",
	)
}

func tipsMagicMd() (*asset, error) {
	bytes, err := tipsMagicMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/magic.md", size: 310, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsModulesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8f\xbd\x4e\x03\x31\x10\x84\x7b\x9e\x62\x44\x03\x88\xfc\xf4\x91\xa8\x28\xd2\x22\x0a\x24\x84\x28\x7c\xbe\x8d\xbd\xca\xd9\x7b\xec\xae\xe3\xe4\xed\xd1\x25\x88\x76\xa4\x99\xef\x9b\x35\x3e\xa5\xa1\x70\xca\x8e\x81\x10\x7a\x50\x82\x1c\x70\xbf\x17\x14\x19\xdb\x44\xf6\xb0\xc2\xd0\x1c\x55\x1c\x3f\x8d\x9d\x60\x4d\x09\x3d\x07\x87\x67\xba\xe0\xda\x50\x64\xe9\x70\x41\x33\x5a\xe2\xb2\xc1\x5e\x10\x45\x09\x4e\xa1\xa0\x50\x19\x48\xf1\xde\xcc\xf0\x2a\x67\xe4\x60\xe8\xca\xee\x54\x11\x60\xa4\x4c\xb6\x70\x87\x49\x12\x66\x31\x37\xd0\x79\x9e\x02\x57\xae\xe9\xba\xfd\x67\x83\x2e\x7a\x5c\x21\xd4\xf1\xa6\x30\xab\x0c\x13\x15\xbb\xb9\x98\x4c\x27\x5a\xa1\x67\x8e\x19\x97\xff\x67\x07\xae\x23\xb8\x3a\x29\x99\x73\x4d\x3b\x7c\xed\x05\xcf\x2f\x78\x0b\xf1\x18\x12\xe1\x83\xd4\x58\x16\xd6\xf7\x63\x76\x9f\x6d\xb7\xdd\x2a\x19\x05\x8d\x79\x63\xdd\x63\xde\x44\x29\xdb\x53\x92\x35\x57\x57\x79\xba\xfb\x0d\x00\x00\xff\xff\x93\x5f\xec\x1c\x39\x01\x00\x00")

func tipsModulesMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsModulesMd,
		"tips/modules.md",
	)
}

func tipsModulesMd() (*asset, error) {
	bytes, err := tipsModulesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/modules.md", size: 313, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsMutexesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x90\xb1\x6a\x33\x31\x10\x84\xfb\xff\x29\xa6\xf3\x1f\xf0\xd9\xc1\x04\x8c\xd3\x26\x90\x2a\x55\xca\x90\x62\xad\x5b\x4b\x22\xd6\xee\xb1\x5a\xf9\x72\x6f\x1f\x64\x3b\xdd\xc0\xe8\x13\xdf\xec\x80\x97\x44\x22\x7c\xae\x20\x63\x90\x20\x4b\x30\x1e\xf3\xf1\xbc\x60\xd2\x99\xed\xd4\xce\x08\x2a\x81\x27\x47\x96\x6b\x6c\x66\x2c\x8e\xc9\x34\x1a\x95\x92\x25\xae\x71\x6c\x0e\x4f\xbc\xf4\x6f\x64\x75\xcd\x20\xa9\x33\x1b\x5c\xc1\x17\xb6\xc5\x53\x96\xb8\xc1\x87\x16\xf6\x5c\xb8\x62\xd1\x06\x61\x1e\xfb\x8b\x56\x19\x84\xd2\x9c\x7f\xd6\x20\x19\xf1\xf9\x4a\x12\xb2\x44\xcc\xd9\x13\xde\x74\x55\xf1\xde\x5b\xae\x5f\xff\x93\xfb\x54\x9f\xb7\xdb\x44\xe1\x9b\x4d\x54\x65\x13\xb4\x6c\xc7\x1b\x31\x74\x62\x88\x3a\xd4\xa1\xdc\x88\xe1\xb0\x7b\x7a\xdc\x13\x1f\x76\xfb\xe3\xe9\x01\xb9\x82\x10\x8d\xa9\x2f\x72\xd3\xb1\x05\xcf\x2a\x5d\x23\xe9\xfc\x67\x73\x67\x6f\x36\x73\xe2\x6b\x1f\x92\x6a\xe5\xbe\xae\x40\x2f\x6c\x08\xf7\xf3\x6d\xfe\xfd\x06\x00\x00\xff\xff\x67\x97\x04\xbc\x4b\x01\x00\x00")

func tipsMutexesMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsMutexesMd,
		"tips/mutexes.md",
	)
}

func tipsMutexesMd() (*asset, error) {
	bytes, err := tipsMutexesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/mutexes.md", size: 331, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsNilMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8f\x41\x4b\xc3\x40\x10\x85\xef\xfe\x8a\x77\xab\x82\x4d\xc1\x93\x08\x92\x83\x50\x6f\xde\x44\x44\x84\x4e\x93\xd1\xac\xdd\xcc\x84\x9d\xd9\x6e\x37\xbf\x5e\x9a\x1c\xbf\xef\x1d\xde\x7b\x5b\x1c\x24\xc4\x03\x82\xc1\x74\x64\x1f\x82\xfc\xc2\x07\x72\x4c\x79\x9e\x23\xaf\x1a\xc2\x05\xaf\x3a\x0d\x9c\xac\xc1\xc7\x35\xee\x95\x0d\xc1\x31\x32\x49\xbb\xa8\xcd\xc2\x3f\x9a\x5a\xec\x13\x49\xc7\xd6\xe1\x85\xc6\x49\xeb\xc6\xe0\x14\x4f\xf8\x7a\x97\x9e\x93\x39\x49\x7f\xad\x79\x0b\xf1\xfb\x76\x70\x9f\xec\x69\xb7\x2b\xa5\x34\x55\xb3\xe7\x23\x37\x9d\x8e\xbb\x42\xde\x0d\xed\xf9\xb9\x8a\x7e\x3e\x5c\xe6\xed\xfe\xd1\xee\xc0\x97\x29\x52\x10\x03\x9f\x39\xd5\x75\x6c\xd5\xbc\x20\x0a\x89\x73\x0f\x57\x9c\x44\x0b\xe8\xa8\xd9\xd7\x77\xf7\x20\xe9\xf1\x97\xcd\x41\x88\xc1\x3d\x32\x46\x4d\xdc\xdc\xfc\x07\x00\x00\xff\xff\xae\x1f\xaf\x91\xff\x00\x00\x00")

func tipsNilMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsNilMd,
		"tips/nil.md",
	)
}

func tipsNilMd() (*asset, error) {
	bytes, err := tipsNilMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/nil.md", size: 255, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsPerformanceMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\xeb\x30\x0c\x45\xf7\xf7\x15\x77\x7c\x05\xe2\xb8\xed\x54\x64\x2b\x52\x34\x6b\x87\x6e\x45\x07\x99\x66\x24\x22\x36\x29\xd0\xb2\x13\xff\x7d\x61\x01\x41\xbb\x49\xe4\x3d\xf7\xb0\xc1\x6b\xc1\xc9\x72\x62\x27\x53\x3c\x3f\x3e\xbd\xec\xf0\x16\x16\xc6\x31\xb1\xf2\x8a\xa0\x3d\xde\x3d\x28\xf1\x44\x38\x86\x31\xdb\x8a\xb8\xed\x03\xae\xe6\x97\x29\x59\x86\x29\xbe\x4e\x86\x0f\xf6\xb3\xf9\xb8\x65\xf1\x39\xab\x68\xfc\xfe\x9f\x4a\xc9\xd3\xa1\x6d\xa3\x94\x34\x77\x7b\xb2\xb1\xed\xc3\xc2\x54\xcb\xdb\x78\x17\x6f\xde\x26\xff\xf2\x4d\xa9\x7c\x73\x57\x3c\xe0\x9a\x84\x12\xae\x32\x0c\x88\xb2\x30\x56\x9b\xc1\x0b\xfb\x5a\x92\x68\xac\x5f\x65\xee\x51\x0c\xbd\x84\xa8\x36\x71\xbd\xfd\x2c\x37\xfc\x29\x46\x76\xeb\x06\x1e\x27\x88\x6e\x90\xe3\x64\x20\xeb\xf9\x80\x8e\x95\xd2\x18\xfc\x22\x1a\x77\x5b\xee\x2c\x43\x7d\xf2\x8d\x69\x2e\x62\x8a\xe2\x81\xea\xa8\x24\x46\x0c\xde\x85\xc8\x20\x1b\x06\xa6\x62\xbe\xab\xc2\xd1\x9c\xf7\xff\x7e\x02\x00\x00\xff\xff\xd3\xe8\xca\xcc\x58\x01\x00\x00")

func tipsPerformanceMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsPerformanceMd,
		"tips/performance.md",
	)
}

func tipsPerformanceMd() (*asset, error) {
	bytes, err := tipsPerformanceMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/performance.md", size: 344, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsPointersMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\xcd\x4a\x03\x31\x14\xc5\xf1\xbd\x4f\x71\x76\x55\xf0\x4e\x62\x11\x2d\x6e\x44\x2c\xf8\x04\xae\xc4\x45\x66\xe6\xb6\x13\x8c\xf7\x86\x7c\xd4\xe6\xed\x25\x03\xed\x03\x9c\xf3\xfb\x13\xde\x12\xa3\x69\x45\xe4\x14\x03\x9f\x79\xc6\xd8\x10\xd5\x4b\xe1\x94\x5f\xb1\x57\xd9\x14\xfc\x69\x4a\xed\x1e\x7b\x77\x62\xbc\x2f\x2c\xdc\x36\x19\x63\xd0\x23\xa2\xe6\x82\xaf\x4f\x99\x39\xe5\xe2\x64\xc6\x87\x5e\xd7\xf0\x82\xc0\x39\xa3\x2c\x4e\xb0\xb3\xb6\xff\xcc\x19\x9a\xba\x98\xf0\xab\xc2\x0d\xa3\x9b\x7e\xbe\x6f\x97\x52\x62\x7e\x31\x66\x76\x27\x1e\xa6\x95\x18\x84\x8b\xd9\xda\x87\x67\x63\x1f\xcd\xf6\xc9\xd4\x2b\x42\x47\xa5\x0b\x42\x5e\xa8\x23\xd4\x11\xda\x59\x4b\x2b\x42\x9a\xa8\x23\xb4\x22\xd4\x91\x3b\xf8\x0c\x87\x91\x5d\x2d\xfe\x50\x43\x68\x98\x54\x26\x9f\x19\x3d\x7c\xe1\x10\x0f\x35\x80\xcf\x31\x38\x71\xc5\xab\x0c\x37\xff\x01\x00\x00\xff\xff\x8f\xbf\x7a\x6a\x20\x01\x00\x00")

func tipsPointersMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsPointersMd,
		"tips/pointers.md",
	)
}

func tipsPointersMd() (*asset, error) {
	bytes, err := tipsPointersMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/pointers.md", size: 288, mode: os.FileMode(420), modTime: time.Unix(1619980709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsPracticalMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcf\x31\x4f\xf3\x40\x0c\xc6\xf1\xfd\xfd\x14\xcf\xf8\x22\xb5\xc9\xde\xa5\x03\x48\x65\x44\x2c\x0c\x88\xc1\xbd\xb8\x77\x56\x2f\x76\x38\xbb\x89\xc2\xa7\x47\xa9\xc4\x00\xe3\x33\xf8\x27\xff\xf7\x78\x7f\x69\x94\x42\x12\x55\x9c\xec\x80\x57\xa6\x8a\xc5\x5a\x1d\x40\xc3\x2c\x89\x71\xb1\x86\xa5\x49\x88\x66\x8c\x24\x1a\x24\x4a\xe7\xca\x38\x19\xa6\x66\xb9\xd1\xe8\x1f\xff\x4b\xc4\xe4\x87\xbe\x1f\x68\xe6\x2e\x15\x56\x5e\x3b\xe5\xe8\xa7\x1f\x7d\x9f\xad\x9f\x1a\x3b\x6b\x50\x88\xa9\xf7\x9f\xc9\x74\x9f\x8a\x28\x75\x25\xc6\xfa\x00\x71\x10\xa2\x91\x7a\x6a\x32\x05\xec\xb2\x6d\xaa\x57\x9c\x57\x3c\xd1\xcc\x78\xbc\xc3\xa0\xb3\xdd\x02\x0b\xad\x8e\x30\x0c\x86\x28\xa2\xd9\x21\x8a\x93\x75\x78\xb6\x05\x5e\xec\x56\x07\xac\x76\x43\x2a\x66\xce\xc8\x66\x03\x94\x46\xf6\x7b\xd2\x4c\x4d\xb6\x0c\x3f\xe2\xad\xb0\xee\xb0\x94\x75\x07\xd2\x01\xe5\xf7\xf9\xd6\xce\x48\x36\x8e\xac\xe1\xc7\xbf\xba\xb5\x4c\x2a\x5f\xbc\x8d\x86\x89\xd2\x95\xf2\x86\xde\xff\x2d\xe4\x88\xc2\x20\xf5\x85\x9b\x77\xff\xbe\x03\x00\x00\xff\xff\x72\x8b\xfe\x49\x70\x01\x00\x00")

func tipsPracticalMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsPracticalMd,
		"tips/practical.md",
	)
}

func tipsPracticalMd() (*asset, error) {
	bytes, err := tipsPracticalMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/practical.md", size: 368, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsProfilingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x4f\xc4\x30\x0c\x46\x77\x7e\xc5\xb7\x1d\x48\x5c\xbb\xb3\x30\x1e\x23\x3b\x62\x48\x53\xa7\xb5\x9a\xda\x21\x76\xd4\xbb\x7f\x8f\x2e\x80\xc4\xfa\xa4\xcf\xef\xf9\x8c\x8b\x82\x0d\x29\x98\x23\xc8\x0c\x4a\x89\x23\x93\xf8\x33\xa6\xe6\x08\x0e\xd3\x9d\x50\x94\xc5\x71\xd3\x76\xca\x19\xa5\xea\x14\xa6\x7c\x03\x49\xd4\x26\x4e\x15\x01\x85\x6a\xd2\xba\x07\x89\x84\x49\xdd\x33\x09\xc5\x0d\x2c\xf7\x55\x45\xd4\x99\x06\xbc\xe9\x81\x18\x3a\x42\x62\x99\xbb\x32\xf1\xb5\x9f\xcc\xb4\x1b\x32\x6f\x04\x5f\xd9\x5e\xf1\xf1\x5e\x35\x71\x66\x59\x70\xd1\xcf\xc7\xd5\xbd\xd8\xcb\x38\x1e\xc7\x31\xb0\x38\x2d\x35\x64\x36\x1f\xa2\x0e\x6d\x1b\x8b\x9a\xdb\x58\xfe\x16\xe7\x45\xc7\x27\xd0\xb5\xe4\xc0\x62\x3f\x3f\x38\xc5\x55\xf8\xab\x91\x75\xad\xab\x66\x43\xd2\x8a\xf2\xcf\xd3\x43\x7f\xb3\x96\x56\xef\x50\x9b\xe3\x58\x83\x9f\x0c\x8b\x76\x20\xc3\xc3\x77\x00\x00\x00\xff\xff\x85\x21\xb7\x7a\x39\x01\x00\x00")

func tipsProfilingMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsProfilingMd,
		"tips/profiling.md",
	)
}

func tipsProfilingMd() (*asset, error) {
	bytes, err := tipsProfilingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/profiling.md", size: 313, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsProverbsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x3f\x4f\xc3\x30\x10\x47\x77\x3e\xc5\x4f\x9d\xda\xa1\x89\x58\x59\x50\xd5\xa1\x8c\x11\x7f\x06\x40\x0c\x67\xe7\x1a\x9f\xe2\xf8\x22\xfb\x9c\x92\x6f\x8f\x82\xc4\xc4\xfa\x86\xf7\xf4\x8e\x78\xa2\x85\xb1\x6a\x45\x60\xca\x3d\xf4\x8a\xcf\x8b\x62\xce\xba\x70\x76\xe5\x6b\x1f\xcc\xe6\xf2\xd0\xb6\x83\x1e\xff\x60\x33\x88\x85\xea\x1a\xd1\xf6\xf0\x88\xd7\xc0\x85\x41\x99\x41\xf0\x1a\x23\x7b\x13\x4d\x9b\xa8\xd0\x2a\x69\x28\xb8\x05\xf1\x01\x89\xc9\xe2\x0a\xfe\x9e\x33\x97\x82\xa2\x13\x43\xa6\x59\xb3\x51\x32\x48\xcf\x54\x40\x4e\xab\xe1\xa2\xd8\xef\xce\x91\x29\x43\x0a\x1c\x9b\x71\x86\x05\x4a\xf0\x91\x17\xce\xbb\x0d\x6b\xe2\xad\x31\xad\xb8\xd2\xa2\x35\x8b\x71\x39\x34\x78\xd7\x0a\x4f\x09\x37\x32\x1f\xf0\xac\x0e\x9d\x8c\xbc\x55\x23\x49\x82\x05\x9e\x20\x09\x04\xa3\x38\x82\x93\x89\x45\xee\x7f\x9f\xbb\x7f\xcf\xab\x56\xab\x8d\xe3\xb6\x3b\x9d\xc6\xf3\xcb\xc7\xdb\xe5\xde\x1f\x9a\xbb\x9f\x00\x00\x00\xff\xff\xbd\x2f\xb7\xe0\x35\x01\x00\x00")

func tipsProverbsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsProverbsMd,
		"tips/proverbs.md",
	)
}

func tipsProverbsMd() (*asset, error) {
	bytes, err := tipsProverbsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/proverbs.md", size: 309, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsReviewMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x8f\xdb\x30\x0c\x46\xf7\xfe\x8a\x6f\x6c\x81\xd6\xde\xbb\x06\x45\xda\xb5\x6b\xd1\x41\x96\x19\x89\x88\x24\x0a\x24\x1d\x27\xff\xfe\x20\xfb\x6e\xb8\x51\x80\x1e\xf8\xbd\xf7\x03\xbf\xc3\x83\x5b\x82\x78\x26\x45\x27\xe9\x85\xa0\xf4\x60\xda\xf1\x92\x4d\x11\x65\x25\xc4\xd0\xb0\x10\xb8\x45\xa5\x95\x97\xf2\x42\xa6\xd2\x6f\x5b\xf9\x8e\xd0\x56\xc8\x0d\x51\x36\x35\x82\x34\x1a\x2f\xcf\x84\xa4\x14\x1c\x9e\xb9\x25\x43\x58\x64\x73\xfc\x7a\x92\x46\xb6\x0a\x36\x78\x0e\x3e\x2e\x20\x91\x9f\x47\xce\xab\x86\x9b\x4a\x05\x3d\x3b\x29\x53\x8b\xb4\xe2\x2a\xe8\x2a\x49\x43\xad\xa4\x36\xe1\xdf\x65\x7c\xff\x7b\x8e\xbc\x48\xad\xd4\xdc\xfe\x7f\xcd\xee\xdd\x7e\xce\x73\x62\xcf\xdb\x32\x45\xa9\x73\x92\x12\x5a\x9a\x93\xcc\x3b\xdf\x79\x1e\xdc\x89\x7d\x50\xdf\xc6\x94\xf0\xbe\x35\x4a\x29\x14\x9d\xa5\x9d\x46\xb5\x4a\x43\x65\xf3\x70\x27\x3b\x44\xaf\x02\xf3\x57\x21\x90\xaa\xa8\x61\xcf\x1c\x33\x2c\xcb\x56\xd6\x11\xa8\x73\xbc\xd3\x8a\xad\x83\xdb\x27\xa9\x09\x7f\xfc\xa8\x38\xba\x1d\xda\xe1\x21\xbc\x8e\x50\x46\xc3\x6e\x29\x54\x6d\x50\x47\x74\xd9\x4f\x7c\xfa\xf2\x16\x00\x00\xff\xff\xd2\x20\xfb\x13\xa1\x01\x00\x00")

func tipsReviewMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsReviewMd,
		"tips/review.md",
	)
}

func tipsReviewMd() (*asset, error) {
	bytes, err := tipsReviewMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/review.md", size: 417, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsRubyistsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\x41\x6b\xe3\x40\x0c\x85\xef\xfb\x2b\xde\x2d\x09\xec\xc4\x9b\xdd\xcb\x52\x28\xa5\xa7\xa4\xb7\xd2\x6b\xe9\x41\xb1\x95\xf1\xe0\xb1\x64\x46\x1a\x8c\xf3\xeb\x8b\x93\xd0\xb3\xa4\x4f\xef\x7d\x01\x6f\x17\x2c\x5a\x37\x85\xd1\xea\x98\x24\xc2\x15\x47\xc5\xa5\xe8\x08\xc2\x47\x3d\x2f\x38\x53\x3b\xc4\xa2\x55\xba\xdf\x30\x1d\x19\xde\x27\x89\x86\x39\xe5\x8c\x91\x06\x86\xb1\x18\xaf\x97\x8b\x56\x94\x14\x7b\x07\xcd\xb4\x80\xa4\x83\x7a\xcf\xe5\xb1\x7c\x66\x10\x72\x72\xcf\x8c\x51\x0b\x63\xaa\xd7\x6b\x4e\x12\xf7\x38\x59\x92\x18\x4e\x35\xe1\x64\x75\x63\xf8\x7c\xbd\x3d\x4f\xe6\x1b\xc3\xf6\x5d\x53\x14\x12\xdf\xe1\x58\x53\xc7\xf7\x90\x5f\xdb\xde\x7d\xb2\xa7\xa6\xb1\x89\x69\xe0\xd2\x71\x3b\xec\x5b\x1d\x1b\xd3\x91\x64\xe9\xad\x89\x1a\x44\x8b\xf7\x33\x9b\x87\xbf\x7f\x0e\xff\x03\x85\x72\xc7\x5a\x98\x1e\xd0\x10\x57\x66\x70\x0d\x51\x5f\x2c\xa7\x8e\x9f\x0f\xff\x76\x48\x06\x42\x2c\x4c\x8e\xb5\x8b\x2b\x0a\x67\x72\xc6\xdc\x93\xdf\x9a\x0e\xa2\xf3\xdd\xd4\xcd\x93\xeb\xcf\x68\xf5\x99\x99\x8a\xac\x46\x93\xe0\xa8\xfb\x5f\xdf\x01\x00\x00\xff\xff\x89\x45\xd8\xda\x6c\x01\x00\x00")

func tipsRubyistsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsRubyistsMd,
		"tips/rubyists.md",
	)
}

func tipsRubyistsMd() (*asset, error) {
	bytes, err := tipsRubyistsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/rubyists.md", size: 364, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsServersMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3d\x6e\xeb\x40\x0c\x06\xfb\x77\x8a\xaf\x7c\x01\x2c\x29\x49\x91\x22\x17\xf0\x01\x52\x06\x29\x28\xed\xa7\x15\x11\x99\x14\x76\x29\xcb\xbe\x7d\x20\xe7\x0f\x69\x49\x60\x86\xc3\x06\x47\x87\x56\x6c\x9a\x38\x5f\xb1\x56\x26\x8c\x5e\xb0\x15\x0d\xb5\x0c\xb5\x60\x31\x06\x2a\xcb\x99\xa5\x1e\xd0\xaf\x81\x98\xf8\xbb\x19\xc4\xd0\x13\x82\x24\x96\x59\x7c\xad\x58\x66\x19\xd8\xe2\xf5\xc5\x71\xf5\x15\x9b\x58\x20\x1c\xbc\x2c\x5e\xb9\x1b\xdd\xfe\x30\xde\xfe\x4f\x11\x4b\x7d\xee\xba\x7e\xf6\xdc\x66\x5f\x26\x16\x19\x24\xf1\x74\x6d\x07\x3f\x75\x92\xce\xb4\x68\x1e\xef\x1f\x9e\xba\x1b\x45\x2d\x37\xd9\x1b\xb7\x26\x26\x36\xdf\x9c\xee\x6e\x6f\x11\x03\x2f\x03\xe7\x99\x16\xc8\xab\x26\xee\xf2\xdd\x17\x93\x5a\xae\xb7\x9b\x8c\x4c\x9f\x63\xb5\x77\x48\xef\x6b\x60\x9b\x68\x3f\xe5\x55\x46\x1e\x50\x38\xab\xf4\x33\x0f\x10\x4b\xe0\x38\xea\xa0\x3b\xf6\xeb\x1d\x50\xc3\xd1\xdb\x7f\x1f\x01\x00\x00\xff\xff\xa0\x34\x4b\xed\x47\x01\x00\x00")

func tipsServersMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsServersMd,
		"tips/servers.md",
	)
}

func tipsServersMd() (*asset, error) {
	bytes, err := tipsServersMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/servers.md", size: 327, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsShadesMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x90\x3d\x6e\xdc\x40\x0c\x85\xfb\x9c\xe2\xa5\xb2\x0d\x48\xda\x34\x69\x72\x01\x1f\xc0\x45\x8a\x20\x05\x77\x86\x92\x08\x73\x48\x61\x7e\x56\xab\xdb\x07\x23\xc5\xd5\x0c\x01\x7e\xdf\x23\xde\x88\x3f\x3f\x7f\xe0\x63\xa5\xc8\x05\x3e\xe3\xdd\xff\xbe\xae\xb5\x6e\xbf\x6e\xb7\xc8\x8f\x32\x05\xf5\x16\x25\xa5\x66\x52\x8f\x29\x78\xba\x2d\x5e\xc3\x4a\x65\x24\x8b\x63\xf0\x94\xdc\xc6\x24\xa5\xd2\x27\x97\x51\x6c\x5c\x7c\x5c\x5c\xc9\x96\x9b\x58\xe4\xe7\xb4\xd6\xa4\x6f\x90\x02\xc2\xee\x16\x39\xcf\x4d\x11\x5c\x95\x43\x15\xb7\x9e\x59\x33\x6d\x65\xc0\x7f\xf1\x00\xb2\x88\xcb\x8c\x2f\x33\xc4\xf0\xee\x03\x3c\x2f\x46\x52\x38\xe2\x7e\x80\x9f\x1b\x67\x61\x0b\x0c\xe5\x07\x2b\xe6\xec\x09\x77\x5e\xc4\x8c\x33\xda\xb6\x53\x8e\x65\xc2\x87\x27\x3e\x73\x56\x2e\x8c\xc3\x1b\x12\x1d\x20\xcd\x4c\xf1\xc0\xa7\xf9\x8e\xd7\x66\xad\x5b\x1f\x94\x85\xee\xca\xe5\xfb\xdb\x80\x44\x76\x60\x17\x55\xdc\x19\xc6\x3b\xaa\x77\x7a\xc2\xef\x55\xf4\x12\x95\xd5\x9b\x46\x7b\xa9\x30\x0e\x5c\x0a\x65\xd1\x03\x5d\x0c\xa9\xd7\x3d\xc1\x1f\x9c\x3b\x7a\x7e\x86\x8e\xbd\xa8\x62\x16\x8b\xa8\xeb\x59\x4c\x2b\xdc\x5b\x51\x29\xb5\x2f\x46\xd9\x20\x56\xfd\x2c\x22\xf3\x7c\xe1\xa7\xac\x4a\xe2\x3e\xf4\x77\xfa\xf6\x2f\x00\x00\xff\xff\xd0\xe5\x30\x66\xbd\x01\x00\x00")

func tipsShadesMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsShadesMd,
		"tips/shades.md",
	)
}

func tipsShadesMd() (*asset, error) {
	bytes, err := tipsShadesMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/shades.md", size: 445, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsSimplicityMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xc1\x4e\xc2\x50\x10\x45\xf7\x7e\xc5\xdd\xa1\x09\xd2\x3d\xae\x8c\x89\xc0\xc2\xc4\xe8\xd2\x18\x33\xed\x1b\xfa\x06\xca\x9b\xa6\x73\x1b\xe8\xdf\x9b\xca\x02\x97\x93\xb9\xe7\x9c\x47\x6c\x1c\x16\xf0\x3d\xb5\x20\x69\x34\x83\xd5\x9a\x20\x01\x41\xd8\xa9\xef\x14\x9d\x94\x76\x94\x56\x57\xd8\x71\x11\x28\xce\x27\x18\x71\x18\x83\x08\xd5\x53\x80\x59\x88\xb3\x4c\x2b\xec\x0a\x98\x2d\x40\xe9\x8e\x4b\x7c\x78\x8d\x77\x3b\x2a\xf4\xd2\x77\x62\x25\x90\xfd\x8c\x8d\x2f\xe2\xea\xb6\xc6\x38\x21\x5b\xd2\x39\xd7\x0e\x2a\x44\x52\xe9\xe0\x7b\x34\x3e\xc7\x2f\xc6\x69\x09\x29\xe9\xda\xa8\x9d\x19\xcc\xfa\x1f\x9f\x9f\xb7\x31\x64\x50\xf4\x32\x70\x76\xcc\xcb\xa4\x61\x6d\x59\xe3\xeb\xf3\x86\x58\xe0\xc5\xff\x2e\xa1\xa6\xef\xfb\x4c\xf6\xb1\xae\xaa\xc9\x47\x8e\xab\x5a\xab\xe1\x55\x0f\xfd\xf6\x87\xcf\xdb\xb7\x87\xbb\xdf\x00\x00\x00\xff\xff\x65\xba\x92\x7d\x24\x01\x00\x00")

func tipsSimplicityMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsSimplicityMd,
		"tips/simplicity.md",
	)
}

func tipsSimplicityMd() (*asset, error) {
	bytes, err := tipsSimplicityMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/simplicity.md", size: 292, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsSolidMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x4b\x03\x41\x10\x46\x7b\x7f\xc5\xd7\xa9\x90\xe4\x62\x0a\x11\x5b\x03\x22\x08\x16\x96\x62\x31\xb9\x9d\xec\x2e\x8c\x33\xcb\xce\xde\xc5\xfb\xf7\xb2\x17\xb0\x9b\xe2\xbd\x79\xdf\x16\x47\x9a\x19\x2f\x89\x95\x97\x5b\xc7\xd7\xe7\xc7\xfb\xdb\x11\xaf\x86\x23\x7b\x8e\xfa\x7d\x97\x5a\x2b\xfe\x3c\x0c\x81\x66\xde\x8d\x2b\xb7\x53\x6e\xc3\x61\xff\xf0\x38\xec\x9f\x86\xc3\x7e\x70\x93\x1c\xb6\xd1\xb6\x61\x75\xee\x91\x1d\x84\x96\x6c\x8a\xa9\x9d\x27\x01\xbb\xd3\x02\x53\xb4\xc4\x28\x35\xeb\x98\x8b\xb0\xc3\xce\x88\x66\x01\x6e\xe7\x76\xa1\xca\x60\x8d\x59\x99\x6b\xd6\x88\xac\x88\xac\x5c\x49\x36\x20\x0d\x48\x76\xe9\xfe\x02\x2a\x45\x16\x34\xeb\x2b\xb3\xa2\x50\x6d\x79\x9c\x84\xea\x06\xfc\x5b\x84\xb2\x76\x7d\xc5\x0d\xd7\x49\x1d\x2d\xd5\x62\xa5\x1f\x47\x4b\xd4\xd0\x6b\x17\x16\xf9\x4f\x72\xd8\x20\xf0\x68\x53\x91\x7e\x56\x9e\x9c\x4e\xc2\xd7\x36\x9d\x6c\x66\x90\x08\x2a\x7b\x31\xf5\x3c\x73\xff\x3e\x26\xd2\xc8\xbb\x9b\xbf\x00\x00\x00\xff\xff\x24\xf2\xa4\x1c\x47\x01\x00\x00")

func tipsSolidMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsSolidMd,
		"tips/solid.md",
	)
}

func tipsSolidMd() (*asset, error) {
	bytes, err := tipsSolidMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/solid.md", size: 327, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsTddMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xb1\x6a\x33\x31\x10\x84\xfb\xff\x29\x06\x37\xb6\xc1\xfa\xaf\x49\x42\x70\xe3\x14\x17\xd2\xba\x38\x48\x11\x52\x48\xd6\xc6\x5a\x7c\xd2\x0a\x69\x6d\xf9\xde\x3e\x9c\x13\x88\xab\x85\x1d\x98\xf9\x3e\x83\x9e\x3d\x26\x39\xe3\x94\xa4\x41\x83\x55\xb4\x40\xe9\xf6\xaa\x32\x5e\x08\xb9\x88\x1b\x29\x56\x48\xc2\xeb\x95\xca\x81\x6b\x9c\xe3\x65\x21\x78\xe1\x74\xc4\x42\xa9\xaa\xf1\x85\x2f\x94\xe0\xe9\x42\xa3\xe4\x48\x49\x17\x58\x0d\x7d\xbf\xde\xe1\x7d\xae\xe5\x8a\xa1\xef\x61\xd3\xd4\xec\xb4\x81\x4d\x1e\x2d\x4c\xf0\x42\x15\xac\x88\x56\x95\xca\x0e\x43\xa0\x42\xcb\x0a\x8b\xc4\x07\x82\x1b\xe5\x88\x2c\x55\xe1\x26\xec\x99\x4a\x21\xec\x0b\x27\x52\x65\x58\x27\x67\x85\x06\xba\x35\x37\x29\xa7\xaf\x51\xda\x06\x8d\x35\xc0\xa2\x2a\x65\xe3\x26\x33\x5f\xd0\xd5\xc6\x3c\xd2\x16\x1f\xc3\x4c\xdb\xff\xd0\xf6\x7f\xb4\xe0\x84\x37\xf9\x5c\x05\xd5\x5c\xb7\x5d\x17\xc9\xf3\x39\xfe\x3f\x48\xec\x5e\xf2\x6d\x38\xff\xee\x76\x77\xbe\xe6\xce\xd7\x70\x32\x47\x31\xce\x92\x75\x8f\xd6\xbb\x87\xa7\xe7\xf5\xbf\xef\x00\x00\x00\xff\xff\xe2\x58\xca\xab\x62\x01\x00\x00")

func tipsTddMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsTddMd,
		"tips/tdd.md",
	)
}

func tipsTddMd() (*asset, error) {
	bytes, err := tipsTddMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/tdd.md", size: 354, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsTestsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x90\xbf\x6a\x23\x31\x10\xc6\xfb\x7b\x8a\xcf\x95\xef\xc0\xeb\xed\xaf\x09\x18\x82\x53\xa4\x34\x84\x10\x52\xcc\x6a\xc7\xab\x21\x5a\x8d\x22\x8d\x50\xfc\xf6\x41\x6b\x77\x42\x7c\xff\x7e\x33\xe0\x74\x43\xd4\x86\x9b\xd6\x7d\x08\x98\x18\x57\x5a\x25\x08\x65\x34\x31\x0f\xf3\x0c\x99\x99\xa0\x57\x18\x17\x2b\x07\x14\x89\x8e\x41\x21\xe0\xf9\x87\xb3\x93\xb2\x82\xef\x0f\x2e\xa8\x85\xbb\x67\xdd\xe1\x54\x0d\x5e\x1b\x66\xed\xe1\x58\x14\x34\x69\x35\xb4\x2c\x26\x71\xe9\x9f\x19\xda\xe2\x3d\xf6\x09\x17\xcf\x99\xf7\x05\x84\x25\x33\x19\xce\x62\x2f\x75\x42\xe6\xa4\x70\x14\x02\xcf\xf8\x78\x65\xca\x11\x67\xc5\x5b\xdf\x76\xe9\xc6\xcf\xbf\xde\x2c\x95\xff\xe3\xb8\x88\xf9\x3a\x1d\x9d\xae\xe3\x77\x15\x19\x43\x17\x0f\x8b\x0e\x1d\x64\xd8\x5a\xfe\xa1\x79\x71\x1e\x4d\x42\x80\xe7\x90\xfa\x8a\x23\xde\xef\xf0\x4d\xf3\x17\xcc\x67\xad\x8b\x07\xa1\x70\x16\x2e\x1d\x3c\x65\x9d\x02\xaf\xe5\xe1\x36\x26\xe7\x37\x28\x59\x93\x66\xa3\x68\xa0\x92\xd8\xd9\xa6\x3e\xeb\x01\x14\x67\x6c\xfd\x20\x04\xb5\x07\x7a\xdf\xd0\xd1\x25\x6e\x77\x4d\x59\x1d\x97\xb2\xfb\xf3\x1b\x00\x00\xff\xff\x66\xe3\x52\x93\x86\x01\x00\x00")

func tipsTestsMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsTestsMd,
		"tips/tests.md",
	)
}

func tipsTestsMd() (*asset, error) {
	bytes, err := tipsTestsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/tests.md", size: 390, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsToolingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xb1\x4e\xc3\x40\x10\x84\xe1\x9e\xa7\x98\x0e\x90\x20\xee\xe9\x00\x09\x97\x14\xa4\x43\x14\x1b\x7b\x73\x77\xc8\xde\xb1\x6e\xf7\x30\x7e\x7b\x94\x98\xfe\x1f\xcd\xf7\x88\x77\x53\xf0\x8c\xc8\x8a\x59\x6c\x43\xaa\x2a\x81\xc8\xc5\x92\x43\x4e\x6c\x81\x9e\x28\xbe\x17\x1c\xb5\xda\x03\x16\xae\x5a\xcf\x6d\x42\x90\x53\xb1\x84\xc8\x12\x18\x38\xab\x63\x2d\x91\xaf\xf1\x24\x96\x9a\x24\x3d\xe0\xad\x8a\x0d\xea\x03\x5e\x65\x5e\xb8\xdd\x3a\x3e\x7b\xe2\xf8\xbf\x2d\x86\xe7\x21\x0a\xed\xeb\x2e\x47\x2c\xfe\xd4\x75\x1b\x5b\xb4\xc3\x49\xbb\xf6\xf2\xcd\xe3\x2f\xfd\x63\xf3\xfb\x0b\x42\xf0\x53\x46\x25\x52\x2b\xa3\xee\xaf\xc5\xa2\x72\x6c\x83\xee\xc4\x9e\x57\x94\x43\x6c\x44\xe6\x8a\x20\x9a\x5f\x5a\x9d\x0f\x37\x7f\x01\x00\x00\xff\xff\xb3\xbd\xb7\x1b\xf0\x00\x00\x00")

func tipsToolingMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsToolingMd,
		"tips/tooling.md",
	)
}

func tipsToolingMd() (*asset, error) {
	bytes, err := tipsToolingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/tooling.md", size: 240, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tipsTourMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8f\xb1\x4e\xc4\x40\x0c\x44\x7b\xbe\x62\xa8\x00\x09\x72\x3d\x0d\xe5\x41\x4f\x87\x28\x9c\xac\xb3\x59\x69\x65\x47\xde\xd9\x44\xf9\x7b\x94\xe3\x2a\x17\xd6\x9b\x79\xf3\x86\x4f\xd9\x14\x87\x77\x30\x8a\x26\x70\x51\x14\xa3\x86\x4c\x2c\x9b\xe2\xe7\xdb\x7b\xc0\x67\x5c\xfd\xf7\x79\x21\xd7\xf6\x7e\xb9\xd0\x7b\x0c\xd9\xab\x58\x1e\x3c\xf2\xe5\xe5\x03\x5f\x7c\x6a\x10\x3b\xd9\xf0\xd4\x27\x16\x37\xd0\x71\x75\xec\x4b\x99\x16\x54\x65\xbb\xf5\x68\x2a\x84\x58\x42\x74\xc3\xe4\x49\x11\x25\x2f\x44\xb1\xf3\x1d\x18\xc3\xf7\xa6\x31\xdc\x23\x6b\x73\xc8\x26\xa5\xca\x58\x4f\x35\x70\x57\xe3\x81\x54\xe6\x59\x43\x8d\x38\x35\xba\x64\x6d\x8f\x77\x04\x39\x54\x88\x5d\x8e\xd3\xa0\xaa\x84\x41\x46\xef\x84\x6e\x1a\x07\xa4\xad\x3a\xf1\x7f\xd4\x2b\x1a\x75\xc5\x78\xdc\xee\xf0\xf0\x17\x00\x00\xff\xff\x5b\xd4\xfd\xc8\x11\x01\x00\x00")

func tipsTourMdBytes() ([]byte, error) {
	return bindataRead(
		_tipsTourMd,
		"tips/tour.md",
	)
}

func tipsTourMd() (*asset, error) {
	bytes, err := tipsTourMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tips/tour.md", size: 273, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsCompileMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x31\x4e\xc5\x40\x0c\x44\x7b\x4e\x31\x54\x34\x1f\xae\xf0\x1b\x1a\x0a\x4a\x0e\xe0\x6c\x9c\x64\x85\x63\x47\xde\x59\xd0\xde\x1e\x25\x12\xbf\x1c\x8d\x66\xde\x7b\xc5\x97\x2f\x91\xec\x2e\x54\x1b\x37\x70\xab\x0d\x2d\xac\xb3\x86\x63\x0e\x6d\xf0\x20\x4a\xec\x47\x35\x45\x89\x4c\x2d\xb4\xf1\x86\xf7\x3a\x63\x44\x47\x76\x07\x37\x05\xb5\xb1\xdd\xf1\x29\x63\xd2\xab\x90\x52\xea\xac\x4e\x31\x1b\x68\x7d\xda\x2b\xa9\x33\xc4\x51\xfd\xfc\x33\xa5\x3e\x50\x77\x7c\x2c\xe7\xea\x25\x15\x9b\xfc\x54\x5f\xc1\x8c\x3e\x99\x62\x55\xf2\xcc\x23\x7a\xe2\xc8\x58\x53\x76\x30\xfe\x9d\x6e\x17\xac\x88\x43\xec\x57\x46\x83\xb4\x6f\xec\x8a\x25\x12\x9b\xda\xf1\xfc\xf4\x17\x00\x00\xff\xff\x15\x59\x6b\x94\xe5\x00\x00\x00")

func toolsCompileMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsCompileMd,
		"tools/compile.md",
	)
}

func toolsCompileMd() (*asset, error) {
	bytes, err := toolsCompileMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/compile.md", size: 229, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsNot_formattedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xc1\x6a\xf3\x30\x10\x84\xef\x79\x8a\x39\xfe\x39\xc4\xbe\xe7\xfa\xb7\x84\xf6\xda\x52\x28\xa1\x90\xb5\x25\xcb\xdb\x48\xbb\x41\x5a\x25\xf5\xdb\x17\xb9\x94\xf4\x26\x10\xf3\xcd\xa7\xd1\x0e\xff\xd5\x79\x4c\x9a\x13\x99\xb1\x04\xb0\xe0\xa0\xe0\x82\xab\xcf\x0b\x38\x5d\x34\x1b\x89\xc1\x14\x36\x7b\x8c\x9a\x52\x15\xb6\xa5\xc3\x2b\x9d\x3d\x08\x51\xf5\x0c\x32\x9c\x82\x4e\xc9\x4e\x20\x71\xc8\x55\xc0\x06\x15\x2c\x5a\x33\x46\x75\xbe\xc3\x7b\x3b\x7a\xc7\xa6\x19\x9a\xf1\xf4\xf0\x88\x32\x6b\x8d\x0e\x83\x07\x0d\xd1\xb7\x0e\xd7\x6a\xb8\x34\xa3\x96\x05\x55\xd3\x44\xc6\x23\xc5\xb8\xec\x37\x1b\x00\xd8\xe1\x8d\x4b\xa5\x88\x17\xab\x8e\xf5\xe7\x09\x33\x15\x1c\x43\xf6\x64\xcd\xbf\xd4\x4b\x13\xff\xf8\x37\x9b\x5d\xca\xbe\xef\x57\x85\xeb\x1a\x2b\x6b\xaa\x1b\x35\xf5\x4e\xc7\xd2\x47\x92\x50\x29\xf8\xd2\x07\xdd\xde\x1b\x12\x28\x16\x5d\xb9\x84\xe3\x44\x62\x54\x8c\xc7\x46\xf7\x5f\xe6\xa5\xb0\xca\x9d\x1f\xd8\xe6\x3a\xac\xd0\x89\x8c\xe7\xfe\xca\x69\xf7\x87\x77\x7c\xf6\x36\x64\x62\x29\x38\x68\x24\x71\xf7\xe8\xed\x76\xeb\x3e\x7f\x6f\x57\x42\xd0\x7e\xdb\xbe\x80\x04\x5e\x8c\xb3\x5f\xc7\x6a\x93\x1c\x74\xf3\x1d\x00\x00\xff\xff\xe5\x10\x69\xa6\xb3\x01\x00\x00")

func toolsNot_formattedMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsNot_formattedMd,
		"tools/not_formatted.md",
	)
}

func toolsNot_formattedMd() (*asset, error) {
	bytes, err := toolsNot_formattedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/not_formatted.md", size: 435, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsNot_lintedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xc1\x8a\xdc\x30\x10\x44\xef\xf3\x15\x75\x9b\x1d\xd8\x78\xee\x9b\x0f\x08\xb9\x2f\x84\x10\x42\x2c\x5b\x6d\xa9\x59\x49\x6d\xd4\xad\x38\xfe\xfb\x20\x7b\x97\x9d\x9b\xc1\x45\xd5\x7b\xad\x2f\x78\x8d\x54\xe9\xaa\x70\x08\x95\x9c\xc1\x44\x12\x66\x97\x12\x79\xfc\x1a\x83\x24\x2e\x36\xfe\x7e\x8a\x66\xab\xbe\xdc\xef\x81\x2d\xb6\x69\x98\x25\xdf\x83\x24\x57\xc2\xbd\x07\x6e\xd8\x22\xcf\x11\x1b\xa7\x04\xfa\xe7\x32\x17\xc2\x2e\xad\x62\x16\x4f\x58\xa4\x7f\xe4\x2c\x05\x6b\x95\x29\x51\x56\xb8\xe2\xa1\xb6\x27\x02\xab\x36\xd2\x01\xaf\x75\x47\x6d\xa5\x70\x09\xf8\x18\x86\x94\xcf\x9e\x67\xd0\x10\x86\x97\x8f\x9f\xb0\x4d\xfe\x2c\x54\x87\x20\xe3\x57\xb0\x9d\xeb\xd9\xbd\x11\x54\x32\xa1\x29\x2d\x2d\x41\x5b\x08\xa4\xc6\x52\xf4\x00\xd9\xa5\x0d\x97\x0b\x00\x7c\xb7\xd3\x5b\xc4\x83\x3d\x39\x98\xc0\xa5\xcd\xed\x8a\x39\xd2\xfc\xf6\x60\xb0\xb1\xc5\x4f\xa8\xa7\xc3\xa7\x2c\x1c\x5a\x7d\xf7\x24\xcf\x26\xb5\x37\x78\xe9\x2c\xef\x4b\xb7\x01\x3f\x22\x1d\x0e\xd7\x4a\xd8\x2a\x5b\xd7\xfb\x26\x50\x59\x6c\x73\xf5\x3c\xce\x5a\xc5\xb7\xb9\x33\x3e\x23\xbb\xb2\x63\x6a\x9c\x3c\x56\x5e\x29\x71\x21\x3d\xd5\x5c\x33\xc9\xce\xb8\xbf\xce\x8e\xc5\x71\x02\x2f\xb0\x48\x27\xa3\x17\xd2\x72\x35\xac\x4e\xf5\x81\xb5\x1f\x7a\x0c\xb2\x64\x1b\x6f\x03\x7e\x4a\xc3\xec\x0a\xdc\x5f\x61\x0f\x8b\xac\x98\x76\xf4\x68\xe7\x3a\x7a\xba\x8f\x52\x5a\xb0\x56\x3e\x95\xb4\x4d\x99\xed\x48\xb0\x0d\x97\xff\x01\x00\x00\xff\xff\x21\x0b\x03\xa7\x35\x02\x00\x00")

func toolsNot_lintedMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsNot_lintedMd,
		"tools/not_linted.md",
	)
}

func toolsNot_lintedMd() (*asset, error) {
	bytes, err := toolsNot_lintedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/not_linted.md", size: 565, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsNot_vettedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x4f\xeb\x30\x14\x85\xf7\xf7\x2b\xce\xf6\x5a\xe9\xbd\x64\x6f\x07\x06\x90\x10\x73\x11\x0b\x42\xd4\xd8\x37\x8e\x55\xdb\xb7\xf2\xbd\x4e\xc8\xbf\x47\x4e\x5b\x09\xd8\x2c\xf9\xf8\xf3\x39\xdf\x7f\x3c\x04\x87\x85\x2b\x4e\x99\x67\x3c\x32\xac\xc9\x30\x55\x39\x19\x0d\xd6\xc4\xb8\xc0\x8e\x64\x4f\x2d\x53\x60\xd9\x11\x06\x2e\x10\x4e\x04\xcb\x29\x71\xc6\xb9\xf0\x47\xa4\x24\x77\x78\xd2\xbf\x02\x03\x5f\xc8\x28\x82\x23\x03\x65\x94\x9a\xf1\x7a\xf4\x8c\x89\xf4\xf8\xb6\x19\x55\xcf\xb2\xeb\x7b\xcf\xd1\x64\xdf\x71\xf1\xbd\x4d\xae\x9f\x48\xfb\x2d\x68\xa2\xb2\x40\x18\x3c\x28\xe5\x0e\xcf\x65\x41\x50\x70\xfe\xf6\x7d\xe6\x79\xb7\x76\xa0\x4f\x93\xce\x91\xfe\xe1\x0a\x87\xce\xfc\x3e\x50\xe9\x3c\x1f\xf7\xed\xd9\x1c\x62\x44\x32\x27\xba\xd4\xad\x42\x43\x8d\x90\xea\x3d\x89\x06\xce\xb2\x62\x16\xae\x1d\x0e\x2d\x40\x2e\x28\x17\xc1\xe6\x07\xfd\x25\x48\x35\x11\x07\xad\x2e\x30\xee\xd9\xd1\x76\x95\xd4\x76\xdd\x66\xdd\x40\xbf\xcc\x5d\xe6\x68\x48\xb4\x5e\x8a\x99\x68\x7f\xd5\xa9\x23\xc1\xb1\xad\x89\xb2\x9a\x56\xe6\x86\x28\xd7\x1a\x4d\x9d\x10\x61\xe4\xb9\x1d\x1d\x43\xc7\x20\xdd\x9f\xaf\x00\x00\x00\xff\xff\x49\x4a\xfd\x8f\xb2\x01\x00\x00")

func toolsNot_vettedMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsNot_vettedMd,
		"tools/not_vetted.md",
	)
}

func toolsNot_vettedMd() (*asset, error) {
	bytes, err := toolsNot_vettedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/not_vetted.md", size: 434, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsPass_testsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x31\x92\xdb\x30\x0c\x45\x7b\x9d\xe2\x77\x6e\x14\x1d\x20\xcd\x36\x69\xb6\x4a\x93\x14\x29\x61\x11\x0c\x39\xa6\x00\x0f\x00\x59\xd1\xed\x33\xa2\x3c\x76\xd2\x02\xe0\x7f\x0f\xe0\x17\xfc\x94\xac\x16\xab\x50\x70\xdb\x47\x44\xa9\x0e\xd7\xb6\x46\x55\x41\x52\x76\x88\x06\xee\xe4\x8e\x28\x8c\x60\x0f\x9f\xf0\xad\x26\xec\xba\xc2\x56\x79\x97\x3f\xf0\xdd\x90\x9e\x1d\x9a\xe7\x9a\x58\x82\x5a\xdb\xe1\xeb\x75\xa9\x01\x12\x54\x99\x75\xb9\x37\x0e\x7e\x51\x3e\x86\xcf\x7c\x3e\x31\xee\x30\x5f\x8d\x51\x74\x43\xe8\x31\xf4\xe0\xd3\x8a\xff\xb0\xcd\xd5\x79\x44\x66\x6e\xc8\xc6\x7c\x4c\x90\xdf\xb0\x30\xb2\x1a\x4a\x95\xf0\x69\x18\x00\xe0\x33\xbf\xc5\xba\x3e\x27\x6c\x85\xa5\x93\x4e\x9f\xe0\xf4\xff\xbe\x63\x6f\x2e\xb4\xa3\xd0\x83\xb1\x15\x8a\x8b\xe3\x26\xba\x09\xc8\x41\xb8\xe4\x56\xe7\x1b\x5b\x95\xdf\x3d\xf9\xf2\x15\x2a\x87\x1e\x9d\x27\xe2\x23\x6b\xe1\xa8\x0b\xfb\x08\x92\x84\x4c\xb5\x39\x34\x0a\x1b\x7a\x79\xc2\x0f\xdb\x8f\xbb\x49\x0f\x79\x29\xc6\xa6\x50\x43\x94\xbe\xd6\x31\x89\x2a\x20\x98\x6e\x3d\xc8\x99\x51\x73\xc7\xf5\xcc\x09\xbf\xfe\x75\x25\x18\xcd\x8c\x59\x25\xd5\xfe\x75\x6a\x5d\xe5\x89\xbe\x9b\x5e\x1b\x2f\xd3\xf0\x37\x00\x00\xff\xff\x80\xe3\x5d\x8b\xf1\x01\x00\x00")

func toolsPass_testsMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsPass_testsMd,
		"tools/pass_tests.md",
	)
}

func toolsPass_testsMd() (*asset, error) {
	bytes, err := toolsPass_testsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/pass_tests.md", size: 497, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toolsRace_conditionMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x41\xae\x83\x30\x0c\x44\xf7\x39\xc5\x1c\x00\xb8\xc2\xdf\xfc\x4d\x0f\xd0\x3d\x11\x38\x24\x2a\xd8\x95\xed\x14\x71\xfb\x2a\xe9\xa2\x52\x97\x1e\xfb\xf9\xcd\x88\x3b\x27\x51\xaf\x1c\x9d\xf6\x6b\x80\xe7\x62\x30\xd9\xab\x17\x61\xe4\x68\xd0\xb8\x10\x16\xe1\xb5\xb4\xc8\x70\x66\x62\x68\x65\x2e\xbc\xc1\x33\xc1\xc9\xdc\x26\xfc\x97\x15\x97\xd4\xb6\xfa\xc6\x38\x8b\xe7\x3e\xce\x63\x7b\x34\xe3\x19\x35\x1e\xe4\xa4\x7f\xe1\x96\x3a\x10\x95\xc0\xe2\xb0\xaa\x84\x2c\x27\x5c\x5a\x83\x17\x75\xee\x47\x3f\x20\x11\xed\x48\x4a\xd4\xee\xa2\x3d\x70\x10\x92\x28\x72\x61\xb7\x29\x04\x60\xde\xa4\xdb\xf1\x51\x86\x77\x00\x00\x00\xff\xff\x47\x01\xc1\x03\xe5\x00\x00\x00")

func toolsRace_conditionMdBytes() ([]byte, error) {
	return bindataRead(
		_toolsRace_conditionMd,
		"tools/race_condition.md",
	)
}

func toolsRace_conditionMd() (*asset, error) {
	bytes, err := toolsRace_conditionMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tools/race_condition.md", size: 229, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topicBenchmarkingMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x4d\x8f\xe3\x36\x0c\xbd\xfb\x57\xbc\x9e\x3a\x13\x8c\x9d\x99\xfd\x9c\xe6\xd6\x69\xd1\xed\x5c\x8a\x02\xbb\x97\xa2\x28\x60\xc6\xa6\x6d\x21\x92\x18\x48\x74\x3c\xfe\xf7\x85\xe4\x7c\x62\xdb\x9c\x14\x45\x7c\x7c\x8f\x7c\x64\x8a\xb2\x2c\x8b\xd5\x6a\xf5\xc2\xbe\x19\x1c\x85\x9d\xf1\xfd\x6a\xb5\x2a\x8a\x57\x0c\x74\x60\x38\x6a\x19\x51\x1c\x23\x8e\x7d\xcf\x51\x8d\xf8\x08\x1d\x48\x61\xfc\x41\xec\x81\xb1\xbd\x0a\xc5\x9d\xa6\x37\xbe\x87\x0e\x8c\x3d\x87\x4e\x82\x23\xdf\x30\xc8\xb7\xe0\xae\x33\x8d\x61\xdf\xcc\x90\x0e\xb3\x8c\x01\x8d\xb4\x7c\x5f\xe1\x35\x7f\xfd\x31\x30\xc8\x06\xa6\x76\x46\x47\xce\x58\x43\x01\x93\xd1\xe1\x36\xc7\x2c\x23\x1a\xf2\x88\x3b\xb3\x87\x0e\x26\x56\x45\x71\xe6\x1f\xcf\x08\xfc\x66\xa2\xa2\x93\x90\xdf\x80\xdf\x38\x34\x26\x72\x85\xbf\x8e\xf1\xfc\xc6\xcd\xa8\x9c\xa8\xba\x9c\x66\x53\xd4\x75\x5d\xf4\x82\x24\x02\xe5\x01\x65\x99\x13\xa3\x3a\x9d\x1c\xbb\xfc\xa6\xf8\x96\x20\x27\x63\x2d\x3a\x13\xa2\x22\x8c\x3e\x4b\x4e\x91\xf1\x21\xab\xd5\x81\x97\xbb\x33\xf9\xf8\x80\x7d\x90\x76\x6c\x92\x8a\x54\x54\x1d\xd2\xc9\x9a\x1d\x67\x8e\x9b\xe2\x48\x40\xe2\x06\x2d\x85\xc9\xf8\xa2\x17\x0a\xcd\xb0\x01\xb9\xf6\xd3\x87\x62\xbf\xeb\x37\xd8\x93\x0e\x6b\x95\xf5\x49\xd1\x45\xfc\x1f\xe4\xb8\x7c\x06\x9e\x1e\xd3\x07\x78\x7a\xfe\xf8\x13\x7c\x5c\xcb\x1e\xf8\xf8\x19\x2f\xf9\xf0\x19\x64\xad\x34\xe9\xb6\xf8\xf3\xe7\xaf\x5f\x0b\xd9\xe1\x3b\x4c\x00\xef\xaa\xc7\x0f\xef\xe2\x22\xf7\x37\x09\x60\x6a\xae\x1a\x91\x94\x05\x5e\x4a\xb0\x65\x10\xac\xf1\x8c\xa8\x14\x72\xfb\x73\xd7\x92\xf8\xfa\x86\x5c\x8d\x4e\xac\x95\x89\x5b\x6c\xe7\xfc\xbb\x1f\xdd\x96\x43\xf2\x43\x23\x81\x23\xee\xea\xe7\xfa\x1e\x74\x20\x63\x69\x6b\xb9\xc2\xb7\xf4\x88\xdf\xf4\xf4\xf2\xae\x5e\xd4\xd5\xf7\x30\xbe\x35\x0d\x29\x47\x0c\x32\xc1\x91\x9f\xa1\xc6\x71\xbc\xad\x3a\x26\x8a\xa9\x3f\x15\xbe\xc8\xc2\x97\x46\x15\x47\x6a\x1a\xb2\x76\xc6\x24\x61\x07\x19\xf5\x3b\x10\x39\x77\xf5\x4a\xb5\xa0\x67\x05\x25\xa5\x6a\xe2\x09\x63\x8c\xdc\x8d\x16\x81\xe3\x68\xb5\x4a\xf6\x38\x92\xd6\x21\xf0\x49\x64\x3c\x13\xde\x14\xc5\x53\xb5\xf8\xc5\x38\x86\x51\xa8\x48\x06\xbf\xf2\xe4\x25\xeb\x03\x8c\x47\x9d\xfb\x58\xe3\xce\x93\x97\xc8\x8d\xf8\x36\xa6\x09\x83\xec\x39\x50\x9a\xcb\xfb\x33\xaa\x63\x27\x21\xb1\xa2\x9e\x97\xe0\x97\x25\x76\x3b\xa7\x6a\x49\x77\x7a\x91\x9d\x40\xca\xed\xff\x21\x5d\xda\x73\x1b\x91\xd6\xc0\x82\x9c\x2f\x12\xfa\xe2\x12\xb2\x36\x05\xc6\xb3\xe8\x07\xa4\x7e\x07\x98\x88\x2d\xab\x72\x38\x96\xc7\x52\x3c\xf7\xb4\x5e\xbc\x56\x5f\x75\x34\x7b\x47\x45\xc9\x1e\x6b\x62\xc4\xe7\x6a\xd5\x79\xa4\x73\x9a\x34\x6b\x79\xd4\x2e\x13\x56\xe1\xb5\xf7\x12\x96\x79\x4a\xe6\x31\x31\x65\x5e\x79\xd1\x15\xa2\xe9\xbd\xe9\x4c\x43\x7e\xd9\x0b\x8e\x29\x8e\x21\x0f\xe3\x9e\xb9\xfd\x21\x7b\xed\x66\xd5\xa8\x88\x4d\x2a\xbf\x9c\x3b\x13\xd1\x51\x54\x0e\x57\x39\xe1\x52\x42\xe9\x34\xcd\xbb\x1c\x47\x9c\x97\xdb\xc0\xd6\x24\x1f\x1f\xad\x91\x36\x80\xc4\x68\xb6\x76\x86\xf1\x4d\x60\x8a\xa7\x65\xf9\x5f\x5a\xab\xa2\xf8\x35\x6d\xe1\x5f\x06\xf6\x3c\x63\xa0\x88\x29\x18\x4d\x89\x08\xbd\x48\x8b\xad\x95\x3e\x41\x2a\x24\xb3\xbc\x61\x3f\x0d\xa6\x19\xf2\xba\x74\x34\xa3\x33\xbe\x85\xf1\xca\x61\x59\xd1\x1b\xfc\xfd\xbb\x4c\x89\x71\xc2\xbc\x5e\x53\x8b\xe2\x7f\xee\x06\xd5\x7d\xdc\xac\xd7\x2d\x1d\xb8\x6a\x32\x87\xca\xb3\xae\xdf\x3d\x3e\xbd\x5f\x3f\x7e\x5a\xbf\x7f\x5c\x0f\x32\x95\x2a\x65\x46\x28\x2f\x08\xa5\xf1\x65\x2f\xf7\x45\xfa\x7b\xf9\x37\x00\x00\xff\xff\x5f\x4d\x95\x5f\x63\x06\x00\x00")

func topicBenchmarkingMdBytes() ([]byte, error) {
	return bindataRead(
		_topicBenchmarkingMd,
		"topic/benchmarking.md",
	)
}

func topicBenchmarkingMd() (*asset, error) {
	bytes, err := topicBenchmarkingMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/benchmarking.md", size: 1635, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topicHintsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x56\xcd\x8e\xdc\xcc\x0d\xbc\xcf\x53\xd0\xa7\x05\x84\x59\x19\xf9\x3d\x24\x27\x1f\xbe\x18\x46\xe0\x4b\xf0\x05\xbe\x9a\xd3\xa2\x24\x66\x5b\x4d\xa1\xc9\x1e\x59\x79\xfa\x80\x94\x76\x76\x63\xf8\x34\xa3\x99\x16\x7f\x8a\x55\xc5\xbe\x3c\x3f\x3f\x5f\xba\xae\xfb\x46\x39\xc9\x42\x60\x02\x36\x13\x7c\x16\xb0\x8a\xe9\xe5\x43\xd7\x75\x97\xcb\x27\x05\x9b\x59\x81\x15\x32\xbf\x50\xde\x61\x97\x56\x61\xe4\xaa\xe6\x47\xe9\x07\xd5\xc4\x4a\x20\x05\x7e\x3b\xbe\x2f\x57\xf8\x02\x36\x4b\x9b\x66\x83\x2f\x4f\x03\xe8\x8c\x95\x00\x61\xa4\x0d\x8c\x57\x8f\x88\x06\x0b\xee\x70\x23\x98\x29\xaf\x63\xcb\xfd\xe5\xf2\x87\x1e\xba\xee\x5f\xad\x44\x15\x46\x6a\xda\x75\x20\x85\x20\xa3\x1a\x18\x2f\x04\x37\x1a\xa5\x12\x68\xbb\x2d\x6c\xc6\x65\xea\xe1\xdf\xda\x30\xe7\x1d\x6a\x2b\x85\xcb\x04\xff\x69\x6a\xf0\x7d\x92\x88\xf0\x1d\xf8\x08\xf7\x28\x73\xe0\x4a\xc9\xa4\xee\xde\x11\xe6\xec\xed\x40\x21\x1a\xbc\xfd\x41\x7a\xf8\x32\xc6\x4f\x09\xcb\x93\xc1\x44\x16\x87\x1e\x15\xf9\xa9\x15\x55\xaf\x30\x12\x65\x18\x2b\x05\x6e\x47\x41\x71\x4c\x25\x37\x63\x29\x80\x65\xdf\x70\x07\x2c\x03\xa0\xbe\xc0\x28\x35\x7a\xed\xe1\x2b\x15\x93\xaa\xb0\x71\xce\x81\x00\xae\xeb\xee\x51\x26\xbe\x53\x24\x9f\xb9\x98\xf6\x97\xcb\x1f\x7b\xf8\xad\x68\xab\x74\x80\xde\x75\x49\x06\xf2\xc2\x47\xa9\x0b\x9a\xd1\xd0\x75\xb0\xb1\xcd\xde\xf0\xb8\xd8\xf7\x1e\xbe\x8a\x1a\xd0\xc0\x91\x21\x70\xd6\xb6\xae\x52\x63\x58\x09\x8b\x27\x4c\x52\x46\x9e\x5a\x7d\x6d\xfa\x98\x30\x36\x93\x05\x8d\x93\xc3\xf9\x8a\xc3\x53\xf5\xe3\x8b\x03\x6b\xe2\x21\xc6\x2a\x0b\x88\xcd\x54\x21\x63\x99\x1a\x4e\xa4\xd7\x28\xda\xe7\x59\xc4\x3c\x41\xd3\x23\xb4\xe3\xc1\x03\xe1\x51\x88\xbf\x44\x4f\xea\x23\xbd\x06\x2c\x52\xf2\x7e\x3e\xa5\x44\xab\xd1\x00\x8e\x98\xc9\xd9\x5f\x94\x2c\xc3\x79\x9a\xed\x49\x23\xe2\xd9\xab\x9f\xed\xe1\x93\x9d\x5c\x8c\x1e\xbc\x06\x25\x5a\x40\xee\x54\x9d\x14\xa4\x56\x39\x19\xdf\xe9\x0a\xb7\x76\xd6\x00\x4e\xc7\xa9\x12\x1a\xe0\x70\xc7\x62\xde\x44\x8c\xd1\xb0\x0c\x58\x87\x57\x7c\xb9\x4c\xd7\xe8\x29\x53\x50\xd0\xbb\x60\x03\xbc\x0b\x0f\x0a\x08\x59\x0c\x64\x84\xb1\x19\x67\x8f\x3a\xb5\x85\x8a\x29\xe0\x4d\x9a\xc1\x36\x73\x9a\x7d\x5a\x5e\xf4\x8d\xd4\x7e\xdd\x5d\x7f\xb9\xfc\xa9\x87\xaf\xf8\xe2\xbc\xfe\x69\xd4\x4e\x35\x52\xef\x38\x73\xb1\xef\x5d\xd7\x3f\xbe\x07\x7f\xc1\x44\xf2\x51\x17\x16\xcc\xbb\x1f\x8e\xf7\xe3\x6d\xa7\x5c\x92\x65\x91\x02\x54\xab\x13\xc2\x71\x5c\xab\xdc\x32\x2d\x7a\xa0\x8a\x59\x05\xa8\x8c\x52\x13\x85\xd4\xcb\x74\x28\x1d\x06\x49\xd1\x0e\x06\x9b\x3d\x4e\xf4\xe6\x41\x0f\x0b\x68\x25\xf9\x5f\x47\x54\x1e\xa8\x18\x8f\x4c\x55\x7b\xf8\x34\x21\x97\xeb\x71\xec\xe0\x62\x50\xaf\x9d\x52\xf5\xfa\xdf\x95\xf9\x7f\xc4\x7b\x37\x6b\x84\x49\x64\x38\x09\x24\xa0\x74\x0e\xb9\xad\x3d\xb8\x4d\xb8\xc8\x5d\xa0\xcf\x0d\x26\x71\x32\xf6\x52\xa7\x8f\x3f\x3e\x7a\xf8\x8f\xaf\x28\x99\x00\x17\x35\x17\xf1\x2b\x72\x47\x8a\x34\x53\x7a\x79\x57\x45\xc8\x88\xed\x17\x16\x73\xb9\xfc\xd9\x9d\xe9\xf7\x99\x60\x12\xcc\x3e\xf1\xd3\x4e\x96\x98\xae\x5b\x0d\xa6\x19\xc6\xdc\xa8\xa4\xdd\x87\xf4\x69\x91\x32\x9d\x32\x39\x31\x3d\x5c\xb4\xa4\xdc\x06\x52\x98\x1a\x0f\x2e\x2a\x17\x8e\x09\x20\x74\x9d\xf2\xb2\x66\xba\x42\x25\x1c\xf0\xe6\x7c\x0a\x58\xf9\xc0\xa6\xeb\x1e\xce\xd2\xc3\xb7\xd9\xf9\x66\x33\xe9\xc9\x65\xc7\x49\x65\xb4\xcd\x9f\xa8\x4c\x5c\x88\xaa\xc7\x5f\x2b\x97\xc4\x6b\x26\xcf\x0d\x13\x15\xaa\x98\xaf\xfe\xea\xee\xd2\x26\x5d\x29\x71\x0c\x85\x17\x77\x09\x2c\xe6\x07\x3f\xcb\x15\xb6\x90\x8a\x73\x77\x9b\x25\xd3\x43\xee\xde\xf3\x40\xca\x53\xa1\x10\x0a\x2c\xf8\x83\x97\xb6\x40\x34\xc0\x89\xed\x30\xbd\x94\xb1\xb2\xed\xfd\xe5\x02\x00\xf0\x6d\xa6\x72\x78\x1b\xde\xdd\x24\x17\x0a\x5c\x4e\x91\x6c\x52\x5f\xf4\x0a\x56\x43\x1f\x47\xa0\x71\x0f\xad\x29\x2c\x2d\xcd\xfe\xb9\x8a\x2a\x3b\x30\xb7\x1d\x28\xf3\xc2\x05\x7d\x3e\x61\xd0\x95\x86\x56\x06\xaf\x5e\x2a\x0c\xcd\xeb\x40\xf7\x93\x37\xfb\xa8\xb4\x55\x8e\xf3\x74\xa7\xba\x1f\xd9\xb9\x00\x9b\x1e\x09\x5d\xa0\xae\xcc\xb0\xbe\x37\x9f\x58\xb1\x9a\xfa\xcc\x1d\x89\x83\x29\x51\x72\xd8\x0c\x6e\x2f\x9b\xfb\xc5\x21\xb4\x47\x56\x13\x6f\xd5\xfb\xf1\x65\x14\x1c\x73\x12\x72\x49\xa6\x67\x31\x23\xfa\x16\x7a\x0b\xda\x8a\xf1\xb1\x8c\x62\xb1\xc4\x44\x0f\x1b\x61\xeb\xe1\xcb\x31\x92\xa7\x94\x09\xab\x0f\xe0\x46\x66\xc1\x2d\x2c\x90\xb2\x77\xf4\xd4\xc3\x3f\x89\xd6\xd3\xa4\x0a\x2c\xec\xea\x2e\x43\xc4\xdc\x24\xb6\x99\xc0\x88\x15\xb6\x2a\xc1\xea\xbf\xc4\xbe\x25\x65\xb5\x73\xc1\x2d\xeb\xa9\x76\x13\x90\xd5\x78\xe1\xff\xd2\x7b\xb8\x7c\xda\x2b\xd5\xf0\xaf\x92\xc8\x99\xfe\x59\xdc\x50\xa6\x8a\x8b\x06\x5c\x23\xaa\xfd\x1d\x50\x4d\x0a\xab\xbf\x94\xf7\xf8\xed\x0a\xfc\x58\x28\xaf\xeb\x81\x8b\x51\x5d\x2b\x39\x64\x8f\x65\x12\x21\xc3\x95\x66\xd4\xd3\xa5\xdf\xe5\x3c\x7d\x2e\x74\x27\x59\xff\x76\x9a\x6b\x49\xf3\x82\xf5\x85\x6a\x70\xdb\x4b\x1a\x39\xfb\x93\x23\xa0\x02\xae\x9a\xdf\x1f\x7a\x71\xc6\x1c\x91\xc7\x16\xcd\xae\x19\xf7\x70\x80\xd3\x14\xf5\x21\x22\x85\x8d\x20\xcb\x9d\x9c\x9c\xe7\x1a\x1c\x1d\x5a\x4f\x83\xb7\xd0\xa4\xdf\x8a\x02\x2e\xcc\xaf\x16\x3f\xc8\x1b\xc7\x7b\xf8\xc7\xfb\xbb\x42\xfc\x15\xcb\x08\xf3\x86\xbb\xfa\x3a\x56\x1e\xa8\xfe\x2c\xa0\xc3\x08\x38\xfb\x73\xec\xb8\xc7\xe5\x24\x0a\x40\x58\xdc\xa8\x68\x1c\x39\x31\x15\x03\x4f\x27\xc3\x49\xcf\x41\x48\x7d\xe6\x4e\xcb\x2a\x8b\x5f\x7d\xde\xc5\xbb\x9e\x34\xd1\x80\x96\x92\x7d\xb8\x5c\xfe\xea\x08\x9d\x3b\xf4\x46\x71\xf1\x3a\x59\xef\xf7\x36\x49\x09\x35\xdc\x9e\xcb\xe9\x9a\x58\x89\xaa\xdb\x44\x79\xbd\x31\x85\x1d\xaf\x54\x55\x8a\xbb\x8c\x14\x7a\x36\x79\xf6\x48\x7e\xf3\x39\xa0\x1d\xee\x9c\xe8\xb8\x46\x60\x01\xfa\xb1\x52\x65\x2a\x89\x7e\x61\x60\xce\xcf\xd8\x8b\x5e\xc4\xe2\x17\x1b\x19\x81\xed\x9c\xd1\xcd\x87\x82\x39\x5f\x0f\x4b\x19\x5b\xf9\xe0\x17\xd6\xff\x05\x00\x00\xff\xff\x40\xcf\x52\xc4\xd6\x0a\x00\x00")

func topicHintsMdBytes() ([]byte, error) {
	return bindataRead(
		_topicHintsMd,
		"topic/hints.md",
	)
}

func topicHintsMd() (*asset, error) {
	bytes, err := topicHintsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/hints.md", size: 2774, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topicPprofAllocationsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xc1\x8e\xdc\x36\x0c\xbd\xfb\x2b\xde\x2d\xcd\x62\xed\x41\x0f\xbd\x6c\xd1\x43\x8a\x22\xe9\x29\x28\xda\x05\x72\x28\x0a\x98\x96\x69\x5b\x5d\x49\x34\x24\xd9\xce\xf4\xeb\x0b\xca\xf6\xec\x24\x48\xd1\x9b\x77\x45\xbe\x47\x3e\x3e\x72\xaa\xba\xae\xab\x87\x87\x87\x79\x8e\x32\x3c\xe1\x9d\x73\x62\x28\x5b\x09\xe9\xe1\xe1\xa1\xaa\x9e\x27\x46\x47\xc9\x1a\x64\x11\x87\x41\x22\x34\xd0\x3a\x1b\x46\x7c\x10\xfd\x63\x8c\xe4\x13\x6c\x42\x5b\x30\xda\x06\xcf\x13\x47\x06\x45\x46\x9e\x22\x33\x7a\x3b\x0c\x1c\x39\x64\xac\x1c\x93\x95\x00\x19\x90\x27\x3e\x33\x0a\xf6\x53\x55\xd5\xf8\x33\x2e\x21\x5b\xcf\x67\xe0\x5f\xdf\x4d\x39\xcf\xe9\xe9\x72\x19\xc5\x51\x18\x1b\x89\xe3\x65\x7e\x19\x2f\x47\xdc\xa5\x00\x5c\xde\x6a\x6a\xe0\x7c\xd1\xe8\xff\xcd\x3d\x03\xef\x93\x8d\x78\x4f\xa1\xaf\x9d\x0d\xdf\x20\xef\x9c\x8c\xcd\x3d\xca\x29\x41\x3d\x4a\x7d\x4a\xf0\x76\x57\xeb\x5b\x48\xda\xef\xd9\xab\x4d\x98\x29\xe6\x53\x82\x0f\x52\xba\x37\x13\xd9\xf0\x08\x0a\x3d\xae\xb2\xc0\x50\x40\x5c\x02\x6c\xc6\x66\xf3\x84\x76\xdc\xc3\x70\x80\x48\xc4\xdf\x4b\xca\xaf\xa0\xa1\x80\x65\x8e\xde\x06\x72\x0d\x3e\x31\x36\xeb\x1c\x96\xa4\x43\xb0\x09\x41\x36\x64\x81\x13\x79\x41\xcf\x3c\x73\x84\x0d\x59\x4a\x1a\xbd\x0e\x5d\xcb\x92\x25\xc2\x48\xcf\x4d\x55\xbd\xb7\x31\x65\x6c\x8c\xc0\xdc\x6b\xbe\x89\x4c\x99\x41\xf0\xec\x25\x5e\x0f\x33\x70\x21\xd4\xa2\x7b\xd9\xe9\xb6\xc9\x3a\xd6\x16\x82\x1a\xa5\xe3\x60\x26\x4f\xf1\x25\x3d\x55\x55\xdb\xb6\x95\xb6\xc3\x29\xa3\x5e\x51\xd7\xe5\x15\xcd\xf9\xe5\xd9\xa3\xae\x3d\xfb\x03\x5b\xa9\x1a\x59\xf2\x17\xff\x8c\x94\xf9\xa7\xef\x0b\x56\xf5\x89\x4b\x77\x13\xad\x5a\x58\x7b\x84\xb7\x28\xc9\x46\x42\x26\x5b\xaa\xf8\xcf\xa2\x6d\x58\x39\x65\x3b\x6a\x67\xa7\xe2\xf7\xf6\x3c\x46\x8a\x21\x8a\xff\x52\xe7\xbd\x9b\x12\x76\x96\xb9\xd7\xf4\x51\x36\x95\x4d\x77\xe0\x98\xcd\x2b\x58\x48\xa2\xe4\xbf\xea\x92\x6c\x7b\x05\xf9\x3a\x33\xd2\xcc\xc6\x0e\xd6\x7c\xcd\x9b\x1a\xfc\x91\xd5\x32\xbb\x15\x26\x76\xb3\xae\x0c\xd2\x24\x1b\x08\xce\xa6\xe2\x26\x72\x0e\xb4\x92\x75\xd4\x39\xbe\xcb\x3d\x9a\xcc\x13\x07\x24\x66\x6c\x13\xe5\x32\xe3\x2c\xf3\xa9\x88\x16\xb5\x78\x8e\xa9\x54\xbc\xf3\x64\x99\x7f\x68\x1f\xd5\x6a\xe5\x13\xb5\x59\xfc\xce\x2b\x31\x2b\x9c\x47\x77\x2d\xad\x99\xc5\x2f\x8e\xb2\x5d\x95\xd6\x2d\x3e\x34\x65\x28\xca\x4a\x2e\x09\xcc\xc4\xe6\x45\x2d\x61\xa6\x62\xac\xd3\x70\x9c\x0e\xfe\xdd\xf8\xda\x8e\x5f\xcc\x54\x0e\xc8\x4d\xf4\x56\xfb\x6b\x91\xe9\x85\x13\x08\x91\xc7\xc5\x51\x04\x7f\x9e\x23\xa7\xb2\x5c\x5a\x12\x53\x34\x93\x4a\x7d\xbd\xb9\x17\xcf\xf1\x8a\xd1\xae\x3a\x7a\x9b\x41\x18\x96\x60\xd4\xe4\x08\xe4\x59\xb3\xee\xe6\x7e\xf8\xb2\x68\x79\xc6\x7d\x24\xcf\xfb\x34\x9f\x8b\xa5\x75\x9f\x76\xcd\x9d\xdb\xfb\xd8\xca\xa1\x6b\xef\x13\x5a\x6c\x94\x30\xc8\x12\x7a\x64\x55\xda\x86\x55\xdc\x7a\x6b\xf5\x6e\xd9\x1a\xfc\xcc\x83\x94\x2b\xc9\xd0\x73\x91\xf6\x8c\x53\x9d\x33\x43\x0f\xc2\x4e\xce\x7c\x13\xe9\x7c\x54\xb6\x33\xa1\x6f\xaa\xea\x77\xf6\xec\x3b\x8e\x3b\x94\xda\xab\x6c\x6c\x5f\x48\xce\x8d\xea\xae\xb7\xd5\xa4\xd7\xe5\x7c\x44\x12\xf4\x12\xde\x64\x74\x3a\x23\x8a\x7e\x5f\x7a\xe5\x4d\xbc\x72\x24\x07\xcf\x23\x75\x57\x1d\x5d\xc7\x25\xff\xe4\x86\xba\x2a\x18\xfe\x71\xb7\x44\x91\x87\x12\xf8\x33\x9b\xa5\x3c\x63\xe0\x0d\x79\x92\x25\xe9\x58\xf5\x7a\xa7\x72\x61\x02\x39\x77\x7d\x84\xcd\x6f\x12\x98\xd2\x55\x19\x47\x0e\x65\xc5\x41\x08\xd6\x30\x56\x9b\x16\x72\xf6\x9f\xa2\xdb\x79\x3a\xbf\xe5\xdf\xdd\x3b\xed\xdc\xdf\xad\x6d\xd1\xee\x76\xb8\x7a\x4b\x7a\xae\x8b\xe3\x92\x9e\x0c\xf5\x86\x3a\xeb\xb7\x5f\xde\x63\x3f\x0b\xef\x5c\xe6\x18\x8a\xa1\xb5\xb2\xb2\xbd\x1b\x77\x5f\x21\xca\xcc\x87\xdd\xba\x28\x5b\xe2\xb8\x43\xea\x80\x34\xe3\xe4\xc9\xea\x91\xa6\xd2\xdf\xd9\x7f\x03\x00\x00\xff\xff\xaf\x47\x4f\x76\x6c\x07\x00\x00")

func topicPprofAllocationsMdBytes() ([]byte, error) {
	return bindataRead(
		_topicPprofAllocationsMd,
		"topic/pprof-allocations.md",
	)
}

func topicPprofAllocationsMd() (*asset, error) {
	bytes, err := topicPprofAllocationsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/pprof-allocations.md", size: 1900, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _topicRegexMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\xe3\x46\x0c\x85\xcf\x99\x5f\xc1\x2e\x50\xc4\x16\x64\x19\xbd\xa6\xc8\x61\x5b\x74\x17\x7b\x28\x50\xac\x0f\x7b\x28\x8a\xd5\x58\xa2\x47\x03\x8f\x66\x04\x92\xb2\x93\x06\xf9\xef\x05\x67\x64\x3b\x08\x7a\xd8\xa3\x34\xe4\xe3\xe3\xf7\x68\x36\x9b\x8d\xa9\xaa\xea\x2b\xba\x39\x58\x82\x3f\x9e\x26\x42\x66\x9f\x22\x57\x55\x65\xcc\xc7\xae\x4b\xd4\xfb\xe8\x40\x12\xc8\x80\xf0\x77\x9f\xba\x79\xc4\x28\x56\x7c\x8a\x90\x0e\xf9\x2f\xa1\xc3\xa7\x09\x26\xdb\x1d\xad\xc3\x7f\x56\x83\xc8\xc4\x0f\xdb\xad\x4b\xc1\x46\xd7\x24\x72\xdb\xe9\xe8\xb6\xa5\x6c\xbb\xae\xe1\x73\xba\x67\xf0\xe3\x14\xf0\xa6\xe5\x19\xdc\x6c\xc9\x46\x41\xec\x75\x1e\xcd\x11\x7c\x84\xef\xc1\x47\xb4\x04\xe2\x47\xfc\xfe\x2b\xc8\x60\x05\x3c\xd7\xe0\x05\xfa\x84\x1c\xef\x05\x1c\x0a\x70\x48\x67\x24\xb0\x9c\x1d\xb1\xff\x17\x2f\xee\x7c\x9c\xe6\x5c\xc3\xb0\xf7\xce\x21\x35\xf0\x1b\x76\x76\xe6\xa5\x42\xc5\x68\x01\x80\x37\x00\x3a\xfb\x73\x82\xc1\x9e\x10\xe4\x9c\x80\x71\xb2\x64\x05\x81\xc5\x3a\xe4\x07\x68\xbb\x34\x4e\x3e\x64\xf7\x2d\xd8\xd8\x43\x3b\xb3\x75\xd8\x36\xc6\x54\xd5\xef\xb7\x47\x25\xf9\x6d\xc0\x08\xa5\x41\x71\x5a\x68\x59\xf7\xee\xda\x02\x4f\xb7\xf1\x0c\xb6\x3f\x79\xb6\xfb\x80\xba\xbf\x1a\x6c\x0b\xb3\xe6\xcf\x99\xa5\x28\xe2\x6a\xdd\xd6\x79\xda\x98\xd4\xd9\x80\xf0\xc6\x87\xf6\xb5\x4b\x0e\x2d\x04\x3c\x61\x68\xe0\xcb\x9b\x94\x74\x8a\x8f\x27\x1b\x7c\x5f\xe7\xbf\x13\x25\x47\x76\x84\xb3\x0f\x01\x26\x1b\x7d\x07\x29\xea\x8e\x24\xf3\x54\xc3\x68\x8f\xea\xd7\x0b\x9c\x90\x9e\x21\xed\x4f\x3e\xcd\x7c\x39\x87\x5e\x07\xa4\x09\xa9\xc4\x22\x03\x12\xde\x33\x58\x55\xdd\x07\x1c\x1b\x63\xda\xb6\x75\xc9\x9c\x2c\xc1\xca\xdc\x71\x1a\xf1\x6b\xb6\xf1\x08\xff\xb3\x59\xab\xef\xf9\x7f\xbb\x36\x6b\x63\x0e\x73\xec\x60\x97\x46\xfc\x34\xc7\x6e\xc5\xc0\x42\x3e\xba\x35\xbc\x98\x3b\x42\x9e\x83\xc0\xc3\x23\x5c\x35\x9b\x4f\x3e\xf6\x1f\x43\xd8\xe5\xaa\x15\xd7\xb0\xf9\x65\x6d\xee\xb6\xdb\xa6\x69\xcc\xab\x1a\x31\xe6\x3d\x8a\x98\x04\x4a\x10\xf9\xa0\x58\x94\xc2\x68\x8f\xc8\xc0\x18\x39\xe7\x50\xf0\xa2\xbe\xa7\x18\x9e\xe1\xac\x51\x46\xec\x90\xd9\xd2\x73\x03\x5f\x62\x3e\x22\xe8\x6c\x09\xec\x49\xd7\xba\x85\xa5\x63\xf6\x28\x82\x54\xeb\x75\x7a\x29\xa8\x09\x65\xa6\x08\x36\x02\x12\x25\x82\x43\x22\xfd\x58\xb2\x29\x0e\x6b\x20\xab\x4c\x95\x6e\x2c\xe1\x68\x1a\x57\xaa\xef\xf8\xd4\xa0\x17\x3a\x5e\x31\x15\xe1\x17\x03\x00\x45\x6f\x27\xa4\xc4\x0e\xa3\x34\xbb\x89\x7c\x94\xc3\xea\x43\x7e\xf8\xe6\x65\xf8\x4b\x7b\x7f\xe6\x0f\x8b\xca\x3a\xb7\x5d\xe1\xd6\xaa\xa6\xcd\x4b\x6c\x97\xfd\x2e\xba\xa5\xdc\x1f\x72\xd9\x4f\x8f\x10\x7d\x58\x26\x97\xe9\x79\x59\x24\xca\xbf\x5e\xcd\xe2\xe9\x07\x33\xd4\xe2\x37\x21\x6e\x36\x9b\xff\x02\x00\x00\xff\xff\x58\xeb\x13\x24\xb9\x04\x00\x00")

func topicRegexMdBytes() ([]byte, error) {
	return bindataRead(
		_topicRegexMd,
		"topic/regex.md",
	)
}

func topicRegexMd() (*asset, error) {
	bytes, err := topicRegexMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "topic/regex.md", size: 1209, mode: os.FileMode(420), modTime: time.Unix(1619980710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"response/comment.md":           responseCommentMd,
	"response/greeting.md":          responseGreetingMd,
	"response/improvement.md":       responseImprovementMd,
	"response/newcomer_greeting.md": responseNewcomer_greetingMd,
	"response/praise.md":            responsePraiseMd,
	"response/questions.md":         responseQuestionsMd,
	"response/tip.md":               responseTipMd,
	"response/todo.md":              responseTodoMd,
	"tips/advanced_tests.md":        tipsAdvanced_testsMd,
	"tips/append.md":                tipsAppendMd,
	"tips/awesome_go.md":            tipsAwesome_goMd,
	"tips/building.md":              tipsBuildingMd,
	"tips/channels.md":              tipsChannelsMd,
	"tips/channels2.md":             tipsChannels2Md,
	"tips/community.md":             tipsCommunityMd,
	"tips/concurrency.md":           tipsConcurrencyMd,
	"tips/concurrencypatterns.md":   tipsConcurrencypatternsMd,
	"tips/concurrencypatterns2.md":  tipsConcurrencypatterns2Md,
	"tips/conduct.md":               tipsConductMd,
	"tips/context.md":               tipsContextMd,
	"tips/debugger.md":              tipsDebuggerMd,
	"tips/effective.md":             tipsEffectiveMd,
	"tips/errors.md":                tipsErrorsMd,
	"tips/faq.md":                   tipsFaqMd,
	"tips/font.md":                  tipsFontMd,
	"tips/go-perfbook.md":           tipsGoPerfbookMd,
	"tips/gophercises.md":           tipsGophercisesMd,
	"tips/gophervids.md":            tipsGophervidsMd,
	"tips/graceful_errors.md":       tipsGraceful_errorsMd,
	"tips/idiomatic.md":             tipsIdiomaticMd,
	"tips/interface.md":             tipsInterfaceMd,
	"tips/magic.md":                 tipsMagicMd,
	"tips/modules.md":               tipsModulesMd,
	"tips/mutexes.md":               tipsMutexesMd,
	"tips/nil.md":                   tipsNilMd,
	"tips/performance.md":           tipsPerformanceMd,
	"tips/pointers.md":              tipsPointersMd,
	"tips/practical.md":             tipsPracticalMd,
	"tips/profiling.md":             tipsProfilingMd,
	"tips/proverbs.md":              tipsProverbsMd,
	"tips/review.md":                tipsReviewMd,
	"tips/rubyists.md":              tipsRubyistsMd,
	"tips/servers.md":               tipsServersMd,
	"tips/shades.md":                tipsShadesMd,
	"tips/simplicity.md":            tipsSimplicityMd,
	"tips/solid.md":                 tipsSolidMd,
	"tips/tdd.md":                   tipsTddMd,
	"tips/tests.md":                 tipsTestsMd,
	"tips/tooling.md":               tipsToolingMd,
	"tips/tour.md":                  tipsTourMd,
	"tools/compile.md":              toolsCompileMd,
	"tools/not_formatted.md":        toolsNot_formattedMd,
	"tools/not_linted.md":           toolsNot_lintedMd,
	"tools/not_vetted.md":           toolsNot_vettedMd,
	"tools/pass_tests.md":           toolsPass_testsMd,
	"tools/race_condition.md":       toolsRace_conditionMd,
	"topic/benchmarking.md":         topicBenchmarkingMd,
	"topic/hints.md":                topicHintsMd,
	"topic/pprof-allocations.md":    topicPprofAllocationsMd,
	"topic/regex.md":                topicRegexMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"response": &bintree{nil, map[string]*bintree{
		"comment.md":           &bintree{responseCommentMd, map[string]*bintree{}},
		"greeting.md":          &bintree{responseGreetingMd, map[string]*bintree{}},
		"improvement.md":       &bintree{responseImprovementMd, map[string]*bintree{}},
		"newcomer_greeting.md": &bintree{responseNewcomer_greetingMd, map[string]*bintree{}},
		"praise.md":            &bintree{responsePraiseMd, map[string]*bintree{}},
		"questions.md":         &bintree{responseQuestionsMd, map[string]*bintree{}},
		"tip.md":               &bintree{responseTipMd, map[string]*bintree{}},
		"todo.md":              &bintree{responseTodoMd, map[string]*bintree{}},
	}},
	"tips": &bintree{nil, map[string]*bintree{
		"advanced_tests.md":       &bintree{tipsAdvanced_testsMd, map[string]*bintree{}},
		"append.md":               &bintree{tipsAppendMd, map[string]*bintree{}},
		"awesome_go.md":           &bintree{tipsAwesome_goMd, map[string]*bintree{}},
		"building.md":             &bintree{tipsBuildingMd, map[string]*bintree{}},
		"channels.md":             &bintree{tipsChannelsMd, map[string]*bintree{}},
		"channels2.md":            &bintree{tipsChannels2Md, map[string]*bintree{}},
		"community.md":            &bintree{tipsCommunityMd, map[string]*bintree{}},
		"concurrency.md":          &bintree{tipsConcurrencyMd, map[string]*bintree{}},
		"concurrencypatterns.md":  &bintree{tipsConcurrencypatternsMd, map[string]*bintree{}},
		"concurrencypatterns2.md": &bintree{tipsConcurrencypatterns2Md, map[string]*bintree{}},
		"conduct.md":              &bintree{tipsConductMd, map[string]*bintree{}},
		"context.md":              &bintree{tipsContextMd, map[string]*bintree{}},
		"debugger.md":             &bintree{tipsDebuggerMd, map[string]*bintree{}},
		"effective.md":            &bintree{tipsEffectiveMd, map[string]*bintree{}},
		"errors.md":               &bintree{tipsErrorsMd, map[string]*bintree{}},
		"faq.md":                  &bintree{tipsFaqMd, map[string]*bintree{}},
		"font.md":                 &bintree{tipsFontMd, map[string]*bintree{}},
		"go-perfbook.md":          &bintree{tipsGoPerfbookMd, map[string]*bintree{}},
		"gophercises.md":          &bintree{tipsGophercisesMd, map[string]*bintree{}},
		"gophervids.md":           &bintree{tipsGophervidsMd, map[string]*bintree{}},
		"graceful_errors.md":      &bintree{tipsGraceful_errorsMd, map[string]*bintree{}},
		"idiomatic.md":            &bintree{tipsIdiomaticMd, map[string]*bintree{}},
		"interface.md":            &bintree{tipsInterfaceMd, map[string]*bintree{}},
		"magic.md":                &bintree{tipsMagicMd, map[string]*bintree{}},
		"modules.md":              &bintree{tipsModulesMd, map[string]*bintree{}},
		"mutexes.md":              &bintree{tipsMutexesMd, map[string]*bintree{}},
		"nil.md":                  &bintree{tipsNilMd, map[string]*bintree{}},
		"performance.md":          &bintree{tipsPerformanceMd, map[string]*bintree{}},
		"pointers.md":             &bintree{tipsPointersMd, map[string]*bintree{}},
		"practical.md":            &bintree{tipsPracticalMd, map[string]*bintree{}},
		"profiling.md":            &bintree{tipsProfilingMd, map[string]*bintree{}},
		"proverbs.md":             &bintree{tipsProverbsMd, map[string]*bintree{}},
		"review.md":               &bintree{tipsReviewMd, map[string]*bintree{}},
		"rubyists.md":             &bintree{tipsRubyistsMd, map[string]*bintree{}},
		"servers.md":              &bintree{tipsServersMd, map[string]*bintree{}},
		"shades.md":               &bintree{tipsShadesMd, map[string]*bintree{}},
		"simplicity.md":           &bintree{tipsSimplicityMd, map[string]*bintree{}},
		"solid.md":                &bintree{tipsSolidMd, map[string]*bintree{}},
		"tdd.md":                  &bintree{tipsTddMd, map[string]*bintree{}},
		"tests.md":                &bintree{tipsTestsMd, map[string]*bintree{}},
		"tooling.md":              &bintree{tipsToolingMd, map[string]*bintree{}},
		"tour.md":                 &bintree{tipsTourMd, map[string]*bintree{}},
	}},
	"tools": &bintree{nil, map[string]*bintree{
		"compile.md":        &bintree{toolsCompileMd, map[string]*bintree{}},
		"not_formatted.md":  &bintree{toolsNot_formattedMd, map[string]*bintree{}},
		"not_linted.md":     &bintree{toolsNot_lintedMd, map[string]*bintree{}},
		"not_vetted.md":     &bintree{toolsNot_vettedMd, map[string]*bintree{}},
		"pass_tests.md":     &bintree{toolsPass_testsMd, map[string]*bintree{}},
		"race_condition.md": &bintree{toolsRace_conditionMd, map[string]*bintree{}},
	}},
	"topic": &bintree{nil, map[string]*bintree{
		"benchmarking.md":      &bintree{topicBenchmarkingMd, map[string]*bintree{}},
		"hints.md":             &bintree{topicHintsMd, map[string]*bintree{}},
		"pprof-allocations.md": &bintree{topicPprofAllocationsMd, map[string]*bintree{}},
		"regex.md":             &bintree{topicRegexMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
